
LDR_garageSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016e  00800060  000050c0  00005154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008001ce  008001ce  000052c2  2**0
                  ALLOC
  3 .stab         0000615c  00000000  00000000  000052c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003cb8  00000000  00000000  0000b420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000f278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000f46a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011875  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00012bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001428a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__vector_1>
       8:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__vector_2>
       c:	0c 94 c5 20 	jmp	0x418a	; 0x418a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3e       	cpi	r26, 0xE5	; 229
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 27 	call	0x4eec	; 0x4eec <main>
      8a:	0c 94 5e 28 	jmp	0x50bc	; 0x50bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 27 28 	jmp	0x504e	; 0x504e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e8       	ldi	r26, 0x8A	; 138
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 43 28 	jmp	0x5086	; 0x5086 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 27 28 	jmp	0x504e	; 0x504e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e8       	ldi	r24, 0x8A	; 138
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 43 28 	jmp	0x5086	; 0x5086 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2f 28 	jmp	0x505e	; 0x505e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e8       	ldi	r22, 0x8A	; 138
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4b 28 	jmp	0x5096	; 0x5096 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 37 28 	jmp	0x506e	; 0x506e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2f 28 	jmp	0x505e	; 0x505e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 4b 28 	jmp	0x5096	; 0x5096 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 56       	subi	r30, 0x6E	; 110
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MAP>:
#include "STD_TYPES_H.h"
#include "MAP.h"

sint32 MAP(sint32 copy_s32InputRangeMin, sint32 copy_s32InputRangeMax,
           sint32 copy_s32OutputRangeMin, sint32 copy_s32OutputRangeMax, sint32 copy_s32InputValue)
{
     e2e:	af 92       	push	r10
     e30:	bf 92       	push	r11
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	68 97       	sbiw	r28, 0x18	; 24
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	69 87       	std	Y+9, r22	; 0x09
     e54:	7a 87       	std	Y+10, r23	; 0x0a
     e56:	8b 87       	std	Y+11, r24	; 0x0b
     e58:	9c 87       	std	Y+12, r25	; 0x0c
     e5a:	2d 87       	std	Y+13, r18	; 0x0d
     e5c:	3e 87       	std	Y+14, r19	; 0x0e
     e5e:	4f 87       	std	Y+15, r20	; 0x0f
     e60:	58 8b       	std	Y+16, r21	; 0x10
     e62:	e9 8a       	std	Y+17, r14	; 0x11
     e64:	fa 8a       	std	Y+18, r15	; 0x12
     e66:	0b 8b       	std	Y+19, r16	; 0x13
     e68:	1c 8b       	std	Y+20, r17	; 0x14
     e6a:	ad 8a       	std	Y+21, r10	; 0x15
     e6c:	be 8a       	std	Y+22, r11	; 0x16
     e6e:	cf 8a       	std	Y+23, r12	; 0x17
     e70:	d8 8e       	std	Y+24, r13	; 0x18
    sint32 Local_s32YDiff,Local_s32XDiff;
    Local_s32XDiff = copy_s32InputRangeMax - copy_s32OutputRangeMin;
     e72:	2d 85       	ldd	r18, Y+13	; 0x0d
     e74:	3e 85       	ldd	r19, Y+14	; 0x0e
     e76:	4f 85       	ldd	r20, Y+15	; 0x0f
     e78:	58 89       	ldd	r21, Y+16	; 0x10
     e7a:	89 89       	ldd	r24, Y+17	; 0x11
     e7c:	9a 89       	ldd	r25, Y+18	; 0x12
     e7e:	ab 89       	ldd	r26, Y+19	; 0x13
     e80:	bc 89       	ldd	r27, Y+20	; 0x14
     e82:	79 01       	movw	r14, r18
     e84:	8a 01       	movw	r16, r20
     e86:	e8 1a       	sub	r14, r24
     e88:	f9 0a       	sbc	r15, r25
     e8a:	0a 0b       	sbc	r16, r26
     e8c:	1b 0b       	sbc	r17, r27
     e8e:	d8 01       	movw	r26, r16
     e90:	c7 01       	movw	r24, r14
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	ab 83       	std	Y+3, r26	; 0x03
     e98:	bc 83       	std	Y+4, r27	; 0x04
    Local_s32YDiff = copy_s32OutputRangeMax - copy_s32InputRangeMin;
     e9a:	2d 89       	ldd	r18, Y+21	; 0x15
     e9c:	3e 89       	ldd	r19, Y+22	; 0x16
     e9e:	4f 89       	ldd	r20, Y+23	; 0x17
     ea0:	58 8d       	ldd	r21, Y+24	; 0x18
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	ab 85       	ldd	r26, Y+11	; 0x0b
     ea8:	bc 85       	ldd	r27, Y+12	; 0x0c
     eaa:	79 01       	movw	r14, r18
     eac:	8a 01       	movw	r16, r20
     eae:	e8 1a       	sub	r14, r24
     eb0:	f9 0a       	sbc	r15, r25
     eb2:	0a 0b       	sbc	r16, r26
     eb4:	1b 0b       	sbc	r17, r27
     eb6:	d8 01       	movw	r26, r16
     eb8:	c7 01       	movw	r24, r14
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	af 83       	std	Y+7, r26	; 0x07
     ec0:	b8 87       	std	Y+8, r27	; 0x08

    return (sint32)((copy_s32InputValue*Local_s32YDiff)/Local_s32XDiff);
     ec2:	8d a1       	ldd	r24, Y+37	; 0x25
     ec4:	9e a1       	ldd	r25, Y+38	; 0x26
     ec6:	af a1       	ldd	r26, Y+39	; 0x27
     ec8:	b8 a5       	ldd	r27, Y+40	; 0x28
     eca:	2d 81       	ldd	r18, Y+5	; 0x05
     ecc:	3e 81       	ldd	r19, Y+6	; 0x06
     ece:	4f 81       	ldd	r20, Y+7	; 0x07
     ed0:	58 85       	ldd	r21, Y+8	; 0x08
     ed2:	bc 01       	movw	r22, r24
     ed4:	cd 01       	movw	r24, r26
     ed6:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <__mulsi3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	29 81       	ldd	r18, Y+1	; 0x01
     ee0:	3a 81       	ldd	r19, Y+2	; 0x02
     ee2:	4b 81       	ldd	r20, Y+3	; 0x03
     ee4:	5c 81       	ldd	r21, Y+4	; 0x04
     ee6:	bc 01       	movw	r22, r24
     ee8:	cd 01       	movw	r24, r26
     eea:	0e 94 0c 28 	call	0x5018	; 0x5018 <__divmodsi4>
     eee:	da 01       	movw	r26, r20
     ef0:	c9 01       	movw	r24, r18
}
     ef2:	bc 01       	movw	r22, r24
     ef4:	cd 01       	movw	r24, r26
     ef6:	68 96       	adiw	r28, 0x18	; 24
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	bf 90       	pop	r11
     f14:	af 90       	pop	r10
     f16:	08 95       	ret

00000f18 <ADC0CallBack>:
uint8 Gloabl_u8CarInFlag = 0u;	// car go into in the garage
uint8 Gloabl_u8CarOutFlag = 0u; // car go out from the garage

// ADC Notification Callback
void ADC0CallBack(void)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
	// measure light level
	LDR_u8GetLLFromDigSignal(&Gloable_GASY->GA_LDR_INPoint);
     f20:	80 91 d0 01 	lds	r24, 0x01D0
     f24:	90 91 d1 01 	lds	r25, 0x01D1
     f28:	0e 94 44 18 	call	0x3088	; 0x3088 <LDR_u8GetLLFromDigSignal>
	if (Gloable_GASY->GA_LDR_INPoint.LightLevel < GASY_CUTON_LIGHT_LEVE)
     f2c:	e0 91 d0 01 	lds	r30, 0x01D0
     f30:	f0 91 d1 01 	lds	r31, 0x01D1
     f34:	84 81       	ldd	r24, Z+4	; 0x04
     f36:	95 81       	ldd	r25, Z+5	; 0x05
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	18 f4       	brcc	.+6      	; 0xf44 <ADC0CallBack+0x2c>
	{
		Gloabl_u8CarInFlag = 1u;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	80 93 ce 01 	sts	0x01CE, r24
	}
	else
	{
		/*do nothing*/
	}
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <ADC7CallBack>:
void ADC7CallBack(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	// measure light level
	LDR_u8GetLLFromDigSignal(&Gloable_GASY->GA_LDR_OutPoint);
     f52:	80 91 d0 01 	lds	r24, 0x01D0
     f56:	90 91 d1 01 	lds	r25, 0x01D1
     f5a:	06 96       	adiw	r24, 0x06	; 6
     f5c:	0e 94 44 18 	call	0x3088	; 0x3088 <LDR_u8GetLLFromDigSignal>
	if (Gloable_GASY->GA_LDR_OutPoint.LightLevel < GASY_CUTON_LIGHT_LEVE)
     f60:	e0 91 d0 01 	lds	r30, 0x01D0
     f64:	f0 91 d1 01 	lds	r31, 0x01D1
     f68:	82 85       	ldd	r24, Z+10	; 0x0a
     f6a:	93 85       	ldd	r25, Z+11	; 0x0b
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	91 05       	cpc	r25, r1
     f70:	18 f4       	brcc	.+6      	; 0xf78 <ADC7CallBack+0x2e>
	{
		Gloabl_u8CarOutFlag = 1u;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	80 93 cf 01 	sts	0x01CF, r24
	}
	else
	{
		/*do nothing*/
	}
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <GASY_u8init>:
////
uint8 GASY_u8init(GASY_CONFIG_t *referance_GASY)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <GASY_u8init+0x6>
     f84:	0f 92       	push	r0
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	9b 83       	std	Y+3, r25	; 0x03
     f8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	89 83       	std	Y+1, r24	; 0x01
	if (referance_GASY != NULL)
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	9b 81       	ldd	r25, Y+3	; 0x03
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	09 f4       	brne	.+2      	; 0xf9c <GASY_u8init+0x1e>
     f9a:	6d c0       	rjmp	.+218    	; 0x1076 <GASY_u8init+0xf8>
	{

		Gloable_GASY = referance_GASY;
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	9b 81       	ldd	r25, Y+3	; 0x03
     fa0:	90 93 d1 01 	sts	0x01D1, r25
     fa4:	80 93 d0 01 	sts	0x01D0, r24
		// init enter point
		Gloabl_ADC_Chain_devicses[0].ConversionChannel = (ADC_channel_t)Gloable_GASY->GA_LDR_INPoint.AnalogChannel_DigitalSignal;
     fa8:	e0 91 d0 01 	lds	r30, 0x01D0
     fac:	f0 91 d1 01 	lds	r31, 0x01D1
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	80 93 e0 01 	sts	0x01E0, r24
		Gloabl_ADC_Chain_devicses[0].pvnotificationFunction = &ADC0CallBack;
     fb8:	8c e8       	ldi	r24, 0x8C	; 140
     fba:	97 e0       	ldi	r25, 0x07	; 7
     fbc:	90 93 e4 01 	sts	0x01E4, r25
     fc0:	80 93 e3 01 	sts	0x01E3, r24
		Gloabl_ADC_Chain_devicses[0].result = &(Gloable_GASY->GA_LDR_INPoint.AnalogChannel_DigitalSignal);
     fc4:	80 91 d0 01 	lds	r24, 0x01D0
     fc8:	90 91 d1 01 	lds	r25, 0x01D1
     fcc:	90 93 e2 01 	sts	0x01E2, r25
     fd0:	80 93 e1 01 	sts	0x01E1, r24
		// init out point
		Gloabl_ADC_Chain_devicses[1].ConversionChannel = (ADC_channel_t)Gloable_GASY->GA_LDR_OutPoint.AnalogChannel_DigitalSignal;
     fd4:	e0 91 d0 01 	lds	r30, 0x01D0
     fd8:	f0 91 d1 01 	lds	r31, 0x01D1
     fdc:	86 81       	ldd	r24, Z+6	; 0x06
     fde:	97 81       	ldd	r25, Z+7	; 0x07
     fe0:	80 93 e5 01 	sts	0x01E5, r24
		Gloabl_ADC_Chain_devicses[1].pvnotificationFunction = &ADC7CallBack;
     fe4:	85 ea       	ldi	r24, 0xA5	; 165
     fe6:	97 e0       	ldi	r25, 0x07	; 7
     fe8:	90 93 e9 01 	sts	0x01E9, r25
     fec:	80 93 e8 01 	sts	0x01E8, r24
		Gloabl_ADC_Chain_devicses[1].result = &(Gloable_GASY->GA_LDR_OutPoint.AnalogChannel_DigitalSignal);
     ff0:	80 91 d0 01 	lds	r24, 0x01D0
     ff4:	90 91 d1 01 	lds	r25, 0x01D1
     ff8:	06 96       	adiw	r24, 0x06	; 6
     ffa:	90 93 e7 01 	sts	0x01E7, r25
     ffe:	80 93 e6 01 	sts	0x01E6, r24

		// display on screen
		CLCD_VoidSendCommand(CLCD_CLEAR_CMD);
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	0e 94 c1 1b 	call	0x3782	; 0x3782 <CLCD_VoidSendCommand>
		CLCD_VoidPrintChars("Available: ");
    1008:	80 e6       	ldi	r24, 0x60	; 96
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <CLCD_VoidPrintChars>
		CLCD_VoidPrintInt((sint32)(Gloabl_u8GrageSpace - Gloabl_u8CarsCount));
    1010:	20 91 92 01 	lds	r18, 0x0192
    1014:	30 91 93 01 	lds	r19, 0x0193
    1018:	80 91 94 01 	lds	r24, 0x0194
    101c:	90 91 95 01 	lds	r25, 0x0195
    1020:	a9 01       	movw	r20, r18
    1022:	48 1b       	sub	r20, r24
    1024:	59 0b       	sbc	r21, r25
    1026:	ca 01       	movw	r24, r20
    1028:	aa 27       	eor	r26, r26
    102a:	97 fd       	sbrc	r25, 7
    102c:	a0 95       	com	r26
    102e:	ba 2f       	mov	r27, r26
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <CLCD_VoidPrintInt>
		CLCD_voidGoToXY(0,1);
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	0e 94 8a 1c 	call	0x3914	; 0x3914 <CLCD_voidGoToXY>
		CLCD_VoidPrintChars("in use: ");
    1040:	8c e6       	ldi	r24, 0x6C	; 108
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <CLCD_VoidPrintChars>
		CLCD_VoidPrintInt((sint32)Gloabl_u8CarsCount);
    1048:	80 91 94 01 	lds	r24, 0x0194
    104c:	90 91 95 01 	lds	r25, 0x0195
    1050:	aa 27       	eor	r26, r26
    1052:	97 fd       	sbrc	r25, 7
    1054:	a0 95       	com	r26
    1056:	ba 2f       	mov	r27, r26
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <CLCD_VoidPrintInt>
		// init leds notification
		LED_u8SetON(&referance_GASY->GA_LED_cont);
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	9b 81       	ldd	r25, Y+3	; 0x03
    1064:	0f 96       	adiw	r24, 0x0f	; 15
    1066:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LED_u8SetON>
		LED_u8SetOFF(&referance_GASY->GA_LED_STOP);
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	9b 81       	ldd	r25, Y+3	; 0x03
    106e:	0c 96       	adiw	r24, 0x0c	; 12
    1070:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LED_u8SetOFF>
    1074:	02 c0       	rjmp	.+4      	; 0x107a <GASY_u8init+0xfc>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR;
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    107a:	89 81       	ldd	r24, Y+1	; 0x01
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <GASY_voidUpdateAfterLeave>:

void GASY_voidUpdateAfterLeave()
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62

	// display on screen
	CLCD_VoidSendCommand(CLCD_CLEAR_CMD);
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	0e 94 c1 1b 	call	0x3782	; 0x3782 <CLCD_VoidSendCommand>
	CLCD_VoidPrintChars("Available: ");
    1096:	80 e6       	ldi	r24, 0x60	; 96
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <CLCD_VoidPrintChars>
	CLCD_VoidPrintInt((sint32)(Gloabl_u8GrageSpace - Gloabl_u8CarsCount));
    109e:	20 91 92 01 	lds	r18, 0x0192
    10a2:	30 91 93 01 	lds	r19, 0x0193
    10a6:	80 91 94 01 	lds	r24, 0x0194
    10aa:	90 91 95 01 	lds	r25, 0x0195
    10ae:	a9 01       	movw	r20, r18
    10b0:	48 1b       	sub	r20, r24
    10b2:	59 0b       	sbc	r21, r25
    10b4:	ca 01       	movw	r24, r20
    10b6:	aa 27       	eor	r26, r26
    10b8:	97 fd       	sbrc	r25, 7
    10ba:	a0 95       	com	r26
    10bc:	ba 2f       	mov	r27, r26
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <CLCD_VoidPrintInt>
	CLCD_voidGoToXY(0,1);
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	0e 94 8a 1c 	call	0x3914	; 0x3914 <CLCD_voidGoToXY>
	CLCD_VoidPrintChars("in use: ");
    10ce:	8c e6       	ldi	r24, 0x6C	; 108
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <CLCD_VoidPrintChars>
	CLCD_VoidPrintInt((sint32)Gloabl_u8CarsCount);
    10d6:	80 91 94 01 	lds	r24, 0x0194
    10da:	90 91 95 01 	lds	r25, 0x0195
    10de:	aa 27       	eor	r26, r26
    10e0:	97 fd       	sbrc	r25, 7
    10e2:	a0 95       	com	r26
    10e4:	ba 2f       	mov	r27, r26
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <CLCD_VoidPrintInt>
	// init leds notification
	LED_u8SetON(&Gloable_GASY->GA_LED_cont);
    10ee:	80 91 d0 01 	lds	r24, 0x01D0
    10f2:	90 91 d1 01 	lds	r25, 0x01D1
    10f6:	0f 96       	adiw	r24, 0x0f	; 15
    10f8:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LED_u8SetON>
	LED_u8SetOFF(&Gloable_GASY->GA_LED_STOP);
    10fc:	80 91 d0 01 	lds	r24, 0x01D0
    1100:	90 91 d1 01 	lds	r25, 0x01D1
    1104:	0c 96       	adiw	r24, 0x0c	; 12
    1106:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LED_u8SetOFF>
	// reset flags
	Gloabl_u8CarInFlag = 0u;
    110a:	10 92 ce 01 	sts	0x01CE, r1
	Gloabl_u8CarOutFlag = 0u;
    110e:	10 92 cf 01 	sts	0x01CF, r1
}
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <GASY_voidMainLoop>:
void GASY_voidMainLoop()
{
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	c2 56       	subi	r28, 0x62	; 98
    1126:	d0 40       	sbci	r29, 0x00	; 0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61

	while (1)
	{

		// read all LDR light level
		ADC_u8StartChainConverstionAsync(Gloabl_ADC_Chain_devicses, 2u);
    1132:	80 ee       	ldi	r24, 0xE0	; 224
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	62 e0       	ldi	r22, 0x02	; 2
    1138:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <ADC_u8StartChainConverstionAsync>
    113c:	fe 01       	movw	r30, r28
    113e:	e1 5a       	subi	r30, 0xA1	; 161
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a8 e4       	ldi	r26, 0x48	; 72
    1148:	b2 e4       	ldi	r27, 0x42	; 66
    114a:	80 83       	st	Z, r24
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	a2 83       	std	Z+2, r26	; 0x02
    1150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1152:	8e 01       	movw	r16, r28
    1154:	05 5a       	subi	r16, 0xA5	; 165
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	fe 01       	movw	r30, r28
    115a:	e1 5a       	subi	r30, 0xA1	; 161
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	60 81       	ld	r22, Z
    1160:	71 81       	ldd	r23, Z+1	; 0x01
    1162:	82 81       	ldd	r24, Z+2	; 0x02
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	4a e7       	ldi	r20, 0x7A	; 122
    116c:	55 e4       	ldi	r21, 0x45	; 69
    116e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	f8 01       	movw	r30, r16
    1178:	80 83       	st	Z, r24
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	a2 83       	std	Z+2, r26	; 0x02
    117e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1180:	fe 01       	movw	r30, r28
    1182:	e5 5a       	subi	r30, 0xA5	; 165
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e8       	ldi	r20, 0x80	; 128
    1194:	5f e3       	ldi	r21, 0x3F	; 63
    1196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    119a:	88 23       	and	r24, r24
    119c:	44 f4       	brge	.+16     	; 0x11ae <GASY_voidMainLoop+0x96>
		__ticks = 1;
    119e:	fe 01       	movw	r30, r28
    11a0:	e7 5a       	subi	r30, 0xA7	; 167
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	80 83       	st	Z, r24
    11ac:	64 c0       	rjmp	.+200    	; 0x1276 <GASY_voidMainLoop+0x15e>
	else if (__tmp > 65535)
    11ae:	fe 01       	movw	r30, r28
    11b0:	e5 5a       	subi	r30, 0xA5	; 165
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	3f ef       	ldi	r19, 0xFF	; 255
    11c0:	4f e7       	ldi	r20, 0x7F	; 127
    11c2:	57 e4       	ldi	r21, 0x47	; 71
    11c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11c8:	18 16       	cp	r1, r24
    11ca:	0c f0       	brlt	.+2      	; 0x11ce <GASY_voidMainLoop+0xb6>
    11cc:	43 c0       	rjmp	.+134    	; 0x1254 <GASY_voidMainLoop+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ce:	fe 01       	movw	r30, r28
    11d0:	e1 5a       	subi	r30, 0xA1	; 161
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	51 e4       	ldi	r21, 0x41	; 65
    11e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	8e 01       	movw	r16, r28
    11ee:	07 5a       	subi	r16, 0xA7	; 167
    11f0:	1f 4f       	sbci	r17, 0xFF	; 255
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	f8 01       	movw	r30, r16
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	80 83       	st	Z, r24
    1204:	1f c0       	rjmp	.+62     	; 0x1244 <GASY_voidMainLoop+0x12c>
    1206:	fe 01       	movw	r30, r28
    1208:	e9 5a       	subi	r30, 0xA9	; 169
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 e9       	ldi	r24, 0x90	; 144
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1214:	fe 01       	movw	r30, r28
    1216:	e9 5a       	subi	r30, 0xA9	; 169
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <GASY_voidMainLoop+0x106>
    1222:	fe 01       	movw	r30, r28
    1224:	e9 5a       	subi	r30, 0xA9	; 169
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	91 83       	std	Z+1, r25	; 0x01
    122a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122c:	de 01       	movw	r26, r28
    122e:	a7 5a       	subi	r26, 0xA7	; 167
    1230:	bf 4f       	sbci	r27, 0xFF	; 255
    1232:	fe 01       	movw	r30, r28
    1234:	e7 5a       	subi	r30, 0xA7	; 167
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	80 81       	ld	r24, Z
    123a:	91 81       	ldd	r25, Z+1	; 0x01
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	11 96       	adiw	r26, 0x01	; 1
    1240:	9c 93       	st	X, r25
    1242:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1244:	fe 01       	movw	r30, r28
    1246:	e7 5a       	subi	r30, 0xA7	; 167
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	80 81       	ld	r24, Z
    124c:	91 81       	ldd	r25, Z+1	; 0x01
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	d1 f6       	brne	.-76     	; 0x1206 <GASY_voidMainLoop+0xee>
    1252:	28 c0       	rjmp	.+80     	; 0x12a4 <GASY_voidMainLoop+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	8e 01       	movw	r16, r28
    1256:	07 5a       	subi	r16, 0xA7	; 167
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	fe 01       	movw	r30, r28
    125c:	e5 5a       	subi	r30, 0xA5	; 165
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	60 81       	ld	r22, Z
    1262:	71 81       	ldd	r23, Z+1	; 0x01
    1264:	82 81       	ldd	r24, Z+2	; 0x02
    1266:	93 81       	ldd	r25, Z+3	; 0x03
    1268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	f8 01       	movw	r30, r16
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	80 83       	st	Z, r24
    1276:	de 01       	movw	r26, r28
    1278:	ab 5a       	subi	r26, 0xAB	; 171
    127a:	bf 4f       	sbci	r27, 0xFF	; 255
    127c:	fe 01       	movw	r30, r28
    127e:	e7 5a       	subi	r30, 0xA7	; 167
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	80 81       	ld	r24, Z
    1284:	91 81       	ldd	r25, Z+1	; 0x01
    1286:	11 96       	adiw	r26, 0x01	; 1
    1288:	9c 93       	st	X, r25
    128a:	8e 93       	st	-X, r24
    128c:	fe 01       	movw	r30, r28
    128e:	eb 5a       	subi	r30, 0xAB	; 171
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	80 81       	ld	r24, Z
    1294:	91 81       	ldd	r25, Z+1	; 0x01
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <GASY_voidMainLoop+0x17e>
    129a:	fe 01       	movw	r30, r28
    129c:	eb 5a       	subi	r30, 0xAB	; 171
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	91 83       	std	Z+1, r25	; 0x01
    12a2:	80 83       	st	Z, r24
		_delay_ms(50);
		// car enter the garage
		if (Gloabl_u8CarInFlag == 1)
    12a4:	80 91 ce 01 	lds	r24, 0x01CE
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	09 f0       	breq	.+2      	; 0x12ae <GASY_voidMainLoop+0x196>
    12ac:	a7 c2       	rjmp	.+1358   	; 0x17fc <GASY_voidMainLoop+0x6e4>
		{
			// led notification for stop car while the other one out
			LED_u8SetOFF(&Gloable_GASY->GA_LED_cont);
    12ae:	80 91 d0 01 	lds	r24, 0x01D0
    12b2:	90 91 d1 01 	lds	r25, 0x01D1
    12b6:	0f 96       	adiw	r24, 0x0f	; 15
    12b8:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LED_u8SetOFF>
			LED_u8SetON(&Gloable_GASY->GA_LED_STOP);
    12bc:	80 91 d0 01 	lds	r24, 0x01D0
    12c0:	90 91 d1 01 	lds	r25, 0x01D1
    12c4:	0c 96       	adiw	r24, 0x0c	; 12
    12c6:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LED_u8SetON>
			//if there is a free parking slot
			if((Gloabl_u8GrageSpace - Gloabl_u8CarsCount)>0){
    12ca:	20 91 92 01 	lds	r18, 0x0192
    12ce:	30 91 93 01 	lds	r19, 0x0193
    12d2:	80 91 94 01 	lds	r24, 0x0194
    12d6:	90 91 95 01 	lds	r25, 0x0195
    12da:	a9 01       	movw	r20, r18
    12dc:	48 1b       	sub	r20, r24
    12de:	59 0b       	sbc	r21, r25
    12e0:	ca 01       	movw	r24, r20
    12e2:	18 16       	cp	r1, r24
    12e4:	19 06       	cpc	r1, r25
    12e6:	0c f0       	brlt	.+2      	; 0x12ea <GASY_voidMainLoop+0x1d2>
    12e8:	6e c1       	rjmp	.+732    	; 0x15c6 <GASY_voidMainLoop+0x4ae>
    12ea:	c1 c0       	rjmp	.+386    	; 0x146e <GASY_voidMainLoop+0x356>
				//wait for second flag
				while (Gloabl_u8CarOutFlag != 1)
				{
					ADC_u8StartConverstionAsync(Gloabl_ADC_Chain_devicses[1].ConversionChannel,
    12ec:	80 91 e5 01 	lds	r24, 0x01E5
    12f0:	20 91 e6 01 	lds	r18, 0x01E6
    12f4:	30 91 e7 01 	lds	r19, 0x01E7
    12f8:	40 91 e8 01 	lds	r20, 0x01E8
    12fc:	50 91 e9 01 	lds	r21, 0x01E9
    1300:	b9 01       	movw	r22, r18
    1302:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <ADC_u8StartConverstionAsync>
    1306:	fe 01       	movw	r30, r28
    1308:	ef 5a       	subi	r30, 0xAF	; 175
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a8 e4       	ldi	r26, 0x48	; 72
    1312:	b2 e4       	ldi	r27, 0x42	; 66
    1314:	80 83       	st	Z, r24
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	a2 83       	std	Z+2, r26	; 0x02
    131a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131c:	8e 01       	movw	r16, r28
    131e:	03 5b       	subi	r16, 0xB3	; 179
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	fe 01       	movw	r30, r28
    1324:	ef 5a       	subi	r30, 0xAF	; 175
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	60 81       	ld	r22, Z
    132a:	71 81       	ldd	r23, Z+1	; 0x01
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	4a e7       	ldi	r20, 0x7A	; 122
    1336:	55 e4       	ldi	r21, 0x45	; 69
    1338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	f8 01       	movw	r30, r16
    1342:	80 83       	st	Z, r24
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	a2 83       	std	Z+2, r26	; 0x02
    1348:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    134a:	fe 01       	movw	r30, r28
    134c:	e3 5b       	subi	r30, 0xB3	; 179
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1364:	88 23       	and	r24, r24
    1366:	44 f4       	brge	.+16     	; 0x1378 <GASY_voidMainLoop+0x260>
		__ticks = 1;
    1368:	fe 01       	movw	r30, r28
    136a:	e5 5b       	subi	r30, 0xB5	; 181
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	91 83       	std	Z+1, r25	; 0x01
    1374:	80 83       	st	Z, r24
    1376:	64 c0       	rjmp	.+200    	; 0x1440 <GASY_voidMainLoop+0x328>
	else if (__tmp > 65535)
    1378:	fe 01       	movw	r30, r28
    137a:	e3 5b       	subi	r30, 0xB3	; 179
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	60 81       	ld	r22, Z
    1380:	71 81       	ldd	r23, Z+1	; 0x01
    1382:	82 81       	ldd	r24, Z+2	; 0x02
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	3f ef       	ldi	r19, 0xFF	; 255
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	57 e4       	ldi	r21, 0x47	; 71
    138e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1392:	18 16       	cp	r1, r24
    1394:	0c f0       	brlt	.+2      	; 0x1398 <GASY_voidMainLoop+0x280>
    1396:	43 c0       	rjmp	.+134    	; 0x141e <GASY_voidMainLoop+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1398:	fe 01       	movw	r30, r28
    139a:	ef 5a       	subi	r30, 0xAF	; 175
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	60 81       	ld	r22, Z
    13a0:	71 81       	ldd	r23, Z+1	; 0x01
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e2       	ldi	r20, 0x20	; 32
    13ac:	51 e4       	ldi	r21, 0x41	; 65
    13ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8e 01       	movw	r16, r28
    13b8:	05 5b       	subi	r16, 0xB5	; 181
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	bc 01       	movw	r22, r24
    13be:	cd 01       	movw	r24, r26
    13c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	f8 01       	movw	r30, r16
    13ca:	91 83       	std	Z+1, r25	; 0x01
    13cc:	80 83       	st	Z, r24
    13ce:	1f c0       	rjmp	.+62     	; 0x140e <GASY_voidMainLoop+0x2f6>
    13d0:	fe 01       	movw	r30, r28
    13d2:	e7 5b       	subi	r30, 0xB7	; 183
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	80 e9       	ldi	r24, 0x90	; 144
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	91 83       	std	Z+1, r25	; 0x01
    13dc:	80 83       	st	Z, r24
    13de:	fe 01       	movw	r30, r28
    13e0:	e7 5b       	subi	r30, 0xB7	; 183
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <GASY_voidMainLoop+0x2d0>
    13ec:	fe 01       	movw	r30, r28
    13ee:	e7 5b       	subi	r30, 0xB7	; 183
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	91 83       	std	Z+1, r25	; 0x01
    13f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f6:	de 01       	movw	r26, r28
    13f8:	a5 5b       	subi	r26, 0xB5	; 181
    13fa:	bf 4f       	sbci	r27, 0xFF	; 255
    13fc:	fe 01       	movw	r30, r28
    13fe:	e5 5b       	subi	r30, 0xB5	; 181
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	11 96       	adiw	r26, 0x01	; 1
    140a:	9c 93       	st	X, r25
    140c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	fe 01       	movw	r30, r28
    1410:	e5 5b       	subi	r30, 0xB5	; 181
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	d1 f6       	brne	.-76     	; 0x13d0 <GASY_voidMainLoop+0x2b8>
    141c:	28 c0       	rjmp	.+80     	; 0x146e <GASY_voidMainLoop+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141e:	8e 01       	movw	r16, r28
    1420:	05 5b       	subi	r16, 0xB5	; 181
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	fe 01       	movw	r30, r28
    1426:	e3 5b       	subi	r30, 0xB3	; 179
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	f8 01       	movw	r30, r16
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	80 83       	st	Z, r24
    1440:	de 01       	movw	r26, r28
    1442:	a9 5b       	subi	r26, 0xB9	; 185
    1444:	bf 4f       	sbci	r27, 0xFF	; 255
    1446:	fe 01       	movw	r30, r28
    1448:	e5 5b       	subi	r30, 0xB5	; 181
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	80 81       	ld	r24, Z
    144e:	91 81       	ldd	r25, Z+1	; 0x01
    1450:	11 96       	adiw	r26, 0x01	; 1
    1452:	9c 93       	st	X, r25
    1454:	8e 93       	st	-X, r24
    1456:	fe 01       	movw	r30, r28
    1458:	e9 5b       	subi	r30, 0xB9	; 185
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	80 81       	ld	r24, Z
    145e:	91 81       	ldd	r25, Z+1	; 0x01
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <GASY_voidMainLoop+0x348>
    1464:	fe 01       	movw	r30, r28
    1466:	e9 5b       	subi	r30, 0xB9	; 185
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
			LED_u8SetOFF(&Gloable_GASY->GA_LED_cont);
			LED_u8SetON(&Gloable_GASY->GA_LED_STOP);
			//if there is a free parking slot
			if((Gloabl_u8GrageSpace - Gloabl_u8CarsCount)>0){
				//wait for second flag
				while (Gloabl_u8CarOutFlag != 1)
    146e:	80 91 cf 01 	lds	r24, 0x01CF
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	09 f0       	breq	.+2      	; 0x1478 <GASY_voidMainLoop+0x360>
    1476:	3a cf       	rjmp	.-396    	; 0x12ec <GASY_voidMainLoop+0x1d4>
    1478:	92 c0       	rjmp	.+292    	; 0x159e <GASY_voidMainLoop+0x486>
					_delay_ms(50);
				}
				// waiting for car to leave
				while (Gloable_GASY->GA_LDR_OutPoint.LightLevel < GASY_CUTON_LIGHT_LEVE)
				{
					ADC_u8StartConverstionAsync(Gloabl_ADC_Chain_devicses[1].ConversionChannel,
    147a:	80 91 e5 01 	lds	r24, 0x01E5
    147e:	20 91 e6 01 	lds	r18, 0x01E6
    1482:	30 91 e7 01 	lds	r19, 0x01E7
    1486:	40 91 e8 01 	lds	r20, 0x01E8
    148a:	50 91 e9 01 	lds	r21, 0x01E9
    148e:	b9 01       	movw	r22, r18
    1490:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <ADC_u8StartConverstionAsync>
    1494:	fe 01       	movw	r30, r28
    1496:	ed 5b       	subi	r30, 0xBD	; 189
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	a8 e4       	ldi	r26, 0x48	; 72
    14a0:	b2 e4       	ldi	r27, 0x42	; 66
    14a2:	80 83       	st	Z, r24
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	a2 83       	std	Z+2, r26	; 0x02
    14a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14aa:	8e 01       	movw	r16, r28
    14ac:	01 5c       	subi	r16, 0xC1	; 193
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	fe 01       	movw	r30, r28
    14b2:	ed 5b       	subi	r30, 0xBD	; 189
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	4a e7       	ldi	r20, 0x7A	; 122
    14c4:	55 e4       	ldi	r21, 0x45	; 69
    14c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	f8 01       	movw	r30, r16
    14d0:	80 83       	st	Z, r24
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	a2 83       	std	Z+2, r26	; 0x02
    14d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d8:	fe 01       	movw	r30, r28
    14da:	ff 96       	adiw	r30, 0x3f	; 63
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	2c f4       	brge	.+10     	; 0x14fe <GASY_voidMainLoop+0x3e6>
		__ticks = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9e af       	std	Y+62, r25	; 0x3e
    14fa:	8d af       	std	Y+61, r24	; 0x3d
    14fc:	46 c0       	rjmp	.+140    	; 0x158a <GASY_voidMainLoop+0x472>
	else if (__tmp > 65535)
    14fe:	fe 01       	movw	r30, r28
    1500:	ff 96       	adiw	r30, 0x3f	; 63
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	93 81       	ldd	r25, Z+3	; 0x03
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	64 f5       	brge	.+88     	; 0x1572 <GASY_voidMainLoop+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	fe 01       	movw	r30, r28
    151c:	ed 5b       	subi	r30, 0xBD	; 189
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	60 81       	ld	r22, Z
    1522:	71 81       	ldd	r23, Z+1	; 0x01
    1524:	82 81       	ldd	r24, Z+2	; 0x02
    1526:	93 81       	ldd	r25, Z+3	; 0x03
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e2       	ldi	r20, 0x20	; 32
    152e:	51 e4       	ldi	r21, 0x41	; 65
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9e af       	std	Y+62, r25	; 0x3e
    1546:	8d af       	std	Y+61, r24	; 0x3d
    1548:	0f c0       	rjmp	.+30     	; 0x1568 <GASY_voidMainLoop+0x450>
    154a:	80 e9       	ldi	r24, 0x90	; 144
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	9c af       	std	Y+60, r25	; 0x3c
    1550:	8b af       	std	Y+59, r24	; 0x3b
    1552:	8b ad       	ldd	r24, Y+59	; 0x3b
    1554:	9c ad       	ldd	r25, Y+60	; 0x3c
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <GASY_voidMainLoop+0x43e>
    155a:	9c af       	std	Y+60, r25	; 0x3c
    155c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1560:	9e ad       	ldd	r25, Y+62	; 0x3e
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	9e af       	std	Y+62, r25	; 0x3e
    1566:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1568:	8d ad       	ldd	r24, Y+61	; 0x3d
    156a:	9e ad       	ldd	r25, Y+62	; 0x3e
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	69 f7       	brne	.-38     	; 0x154a <GASY_voidMainLoop+0x432>
    1570:	16 c0       	rjmp	.+44     	; 0x159e <GASY_voidMainLoop+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1572:	fe 01       	movw	r30, r28
    1574:	ff 96       	adiw	r30, 0x3f	; 63
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9e af       	std	Y+62, r25	; 0x3e
    1588:	8d af       	std	Y+61, r24	; 0x3d
    158a:	8d ad       	ldd	r24, Y+61	; 0x3d
    158c:	9e ad       	ldd	r25, Y+62	; 0x3e
    158e:	9a af       	std	Y+58, r25	; 0x3a
    1590:	89 af       	std	Y+57, r24	; 0x39
    1592:	89 ad       	ldd	r24, Y+57	; 0x39
    1594:	9a ad       	ldd	r25, Y+58	; 0x3a
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <GASY_voidMainLoop+0x47e>
    159a:	9a af       	std	Y+58, r25	; 0x3a
    159c:	89 af       	std	Y+57, r24	; 0x39
					

					_delay_ms(50);
				}
				// waiting for car to leave
				while (Gloable_GASY->GA_LDR_OutPoint.LightLevel < GASY_CUTON_LIGHT_LEVE)
    159e:	e0 91 d0 01 	lds	r30, 0x01D0
    15a2:	f0 91 d1 01 	lds	r31, 0x01D1
    15a6:	82 85       	ldd	r24, Z+10	; 0x0a
    15a8:	93 85       	ldd	r25, Z+11	; 0x0b
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	91 05       	cpc	r25, r1
    15ae:	08 f4       	brcc	.+2      	; 0x15b2 <GASY_voidMainLoop+0x49a>
    15b0:	64 cf       	rjmp	.-312    	; 0x147a <GASY_voidMainLoop+0x362>
					

					_delay_ms(50);
				}
				//increase count of cars inside the garage
				Gloabl_u8CarsCount += 1;
    15b2:	80 91 94 01 	lds	r24, 0x0194
    15b6:	90 91 95 01 	lds	r25, 0x0195
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	90 93 95 01 	sts	0x0195, r25
    15c0:	80 93 94 01 	sts	0x0194, r24
    15c4:	18 c1       	rjmp	.+560    	; 0x17f6 <GASY_voidMainLoop+0x6de>
				//if there is a no parking slot
			}else{
				//reset flag
				Gloabl_u8CarInFlag = 0;
    15c6:	10 92 ce 01 	sts	0x01CE, r1

				CLCD_VoidSendCommand(CLCD_CLEAR_CMD);
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	0e 94 c1 1b 	call	0x3782	; 0x3782 <CLCD_VoidSendCommand>
				CLCD_VoidPrintChars("no parking available");
    15d0:	85 e7       	ldi	r24, 0x75	; 117
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <CLCD_VoidPrintChars>
    15d8:	7f c0       	rjmp	.+254    	; 0x16d8 <GASY_voidMainLoop+0x5c0>
				//wait for car to leave
				while (Gloabl_u8CarInFlag != 1)
				{
					ADC_u8StartConverstionAsync(Gloabl_ADC_Chain_devicses[0].ConversionChannel,
    15da:	80 91 e0 01 	lds	r24, 0x01E0
    15de:	20 91 e1 01 	lds	r18, 0x01E1
    15e2:	30 91 e2 01 	lds	r19, 0x01E2
    15e6:	40 91 e3 01 	lds	r20, 0x01E3
    15ea:	50 91 e4 01 	lds	r21, 0x01E4
    15ee:	b9 01       	movw	r22, r18
    15f0:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <ADC_u8StartConverstionAsync>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a8 e4       	ldi	r26, 0x48	; 72
    15fa:	b2 e4       	ldi	r27, 0x42	; 66
    15fc:	8d ab       	std	Y+53, r24	; 0x35
    15fe:	9e ab       	std	Y+54, r25	; 0x36
    1600:	af ab       	std	Y+55, r26	; 0x37
    1602:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1604:	6d a9       	ldd	r22, Y+53	; 0x35
    1606:	7e a9       	ldd	r23, Y+54	; 0x36
    1608:	8f a9       	ldd	r24, Y+55	; 0x37
    160a:	98 ad       	ldd	r25, Y+56	; 0x38
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	4a e7       	ldi	r20, 0x7A	; 122
    1612:	55 e4       	ldi	r21, 0x45	; 69
    1614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	89 ab       	std	Y+49, r24	; 0x31
    161e:	9a ab       	std	Y+50, r25	; 0x32
    1620:	ab ab       	std	Y+51, r26	; 0x33
    1622:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1624:	69 a9       	ldd	r22, Y+49	; 0x31
    1626:	7a a9       	ldd	r23, Y+50	; 0x32
    1628:	8b a9       	ldd	r24, Y+51	; 0x33
    162a:	9c a9       	ldd	r25, Y+52	; 0x34
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e8       	ldi	r20, 0x80	; 128
    1632:	5f e3       	ldi	r21, 0x3F	; 63
    1634:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1638:	88 23       	and	r24, r24
    163a:	2c f4       	brge	.+10     	; 0x1646 <GASY_voidMainLoop+0x52e>
		__ticks = 1;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	98 ab       	std	Y+48, r25	; 0x30
    1642:	8f a7       	std	Y+47, r24	; 0x2f
    1644:	3f c0       	rjmp	.+126    	; 0x16c4 <GASY_voidMainLoop+0x5ac>
	else if (__tmp > 65535)
    1646:	69 a9       	ldd	r22, Y+49	; 0x31
    1648:	7a a9       	ldd	r23, Y+50	; 0x32
    164a:	8b a9       	ldd	r24, Y+51	; 0x33
    164c:	9c a9       	ldd	r25, Y+52	; 0x34
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	3f ef       	ldi	r19, 0xFF	; 255
    1652:	4f e7       	ldi	r20, 0x7F	; 127
    1654:	57 e4       	ldi	r21, 0x47	; 71
    1656:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    165a:	18 16       	cp	r1, r24
    165c:	4c f5       	brge	.+82     	; 0x16b0 <GASY_voidMainLoop+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165e:	6d a9       	ldd	r22, Y+53	; 0x35
    1660:	7e a9       	ldd	r23, Y+54	; 0x36
    1662:	8f a9       	ldd	r24, Y+55	; 0x37
    1664:	98 ad       	ldd	r25, Y+56	; 0x38
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e2       	ldi	r20, 0x20	; 32
    166c:	51 e4       	ldi	r21, 0x41	; 65
    166e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	98 ab       	std	Y+48, r25	; 0x30
    1684:	8f a7       	std	Y+47, r24	; 0x2f
    1686:	0f c0       	rjmp	.+30     	; 0x16a6 <GASY_voidMainLoop+0x58e>
    1688:	80 e9       	ldi	r24, 0x90	; 144
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	9e a7       	std	Y+46, r25	; 0x2e
    168e:	8d a7       	std	Y+45, r24	; 0x2d
    1690:	8d a5       	ldd	r24, Y+45	; 0x2d
    1692:	9e a5       	ldd	r25, Y+46	; 0x2e
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <GASY_voidMainLoop+0x57c>
    1698:	9e a7       	std	Y+46, r25	; 0x2e
    169a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169c:	8f a5       	ldd	r24, Y+47	; 0x2f
    169e:	98 a9       	ldd	r25, Y+48	; 0x30
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	98 ab       	std	Y+48, r25	; 0x30
    16a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a8:	98 a9       	ldd	r25, Y+48	; 0x30
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	69 f7       	brne	.-38     	; 0x1688 <GASY_voidMainLoop+0x570>
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <GASY_voidMainLoop+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b0:	69 a9       	ldd	r22, Y+49	; 0x31
    16b2:	7a a9       	ldd	r23, Y+50	; 0x32
    16b4:	8b a9       	ldd	r24, Y+51	; 0x33
    16b6:	9c a9       	ldd	r25, Y+52	; 0x34
    16b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	98 ab       	std	Y+48, r25	; 0x30
    16c2:	8f a7       	std	Y+47, r24	; 0x2f
    16c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16c6:	98 a9       	ldd	r25, Y+48	; 0x30
    16c8:	9c a7       	std	Y+44, r25	; 0x2c
    16ca:	8b a7       	std	Y+43, r24	; 0x2b
    16cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <GASY_voidMainLoop+0x5b8>
    16d4:	9c a7       	std	Y+44, r25	; 0x2c
    16d6:	8b a7       	std	Y+43, r24	; 0x2b
				Gloabl_u8CarInFlag = 0;

				CLCD_VoidSendCommand(CLCD_CLEAR_CMD);
				CLCD_VoidPrintChars("no parking available");
				//wait for car to leave
				while (Gloabl_u8CarInFlag != 1)
    16d8:	80 91 ce 01 	lds	r24, 0x01CE
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	09 f0       	breq	.+2      	; 0x16e2 <GASY_voidMainLoop+0x5ca>
    16e0:	7c cf       	rjmp	.-264    	; 0x15da <GASY_voidMainLoop+0x4c2>
    16e2:	7f c0       	rjmp	.+254    	; 0x17e2 <GASY_voidMainLoop+0x6ca>
					_delay_ms(50);
				}

				while (Gloable_GASY->GA_LDR_INPoint.LightLevel < GASY_CUTON_LIGHT_LEVE)
				{
					ADC_u8StartConverstionAsync(Gloabl_ADC_Chain_devicses[0].ConversionChannel,
    16e4:	80 91 e0 01 	lds	r24, 0x01E0
    16e8:	20 91 e1 01 	lds	r18, 0x01E1
    16ec:	30 91 e2 01 	lds	r19, 0x01E2
    16f0:	40 91 e3 01 	lds	r20, 0x01E3
    16f4:	50 91 e4 01 	lds	r21, 0x01E4
    16f8:	b9 01       	movw	r22, r18
    16fa:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <ADC_u8StartConverstionAsync>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a8 e4       	ldi	r26, 0x48	; 72
    1704:	b2 e4       	ldi	r27, 0x42	; 66
    1706:	8f a3       	std	Y+39, r24	; 0x27
    1708:	98 a7       	std	Y+40, r25	; 0x28
    170a:	a9 a7       	std	Y+41, r26	; 0x29
    170c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170e:	6f a1       	ldd	r22, Y+39	; 0x27
    1710:	78 a5       	ldd	r23, Y+40	; 0x28
    1712:	89 a5       	ldd	r24, Y+41	; 0x29
    1714:	9a a5       	ldd	r25, Y+42	; 0x2a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4a e7       	ldi	r20, 0x7A	; 122
    171c:	55 e4       	ldi	r21, 0x45	; 69
    171e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	8b a3       	std	Y+35, r24	; 0x23
    1728:	9c a3       	std	Y+36, r25	; 0x24
    172a:	ad a3       	std	Y+37, r26	; 0x25
    172c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    172e:	6b a1       	ldd	r22, Y+35	; 0x23
    1730:	7c a1       	ldd	r23, Y+36	; 0x24
    1732:	8d a1       	ldd	r24, Y+37	; 0x25
    1734:	9e a1       	ldd	r25, Y+38	; 0x26
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	5f e3       	ldi	r21, 0x3F	; 63
    173e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1742:	88 23       	and	r24, r24
    1744:	2c f4       	brge	.+10     	; 0x1750 <GASY_voidMainLoop+0x638>
		__ticks = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9a a3       	std	Y+34, r25	; 0x22
    174c:	89 a3       	std	Y+33, r24	; 0x21
    174e:	3f c0       	rjmp	.+126    	; 0x17ce <GASY_voidMainLoop+0x6b6>
	else if (__tmp > 65535)
    1750:	6b a1       	ldd	r22, Y+35	; 0x23
    1752:	7c a1       	ldd	r23, Y+36	; 0x24
    1754:	8d a1       	ldd	r24, Y+37	; 0x25
    1756:	9e a1       	ldd	r25, Y+38	; 0x26
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	3f ef       	ldi	r19, 0xFF	; 255
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	57 e4       	ldi	r21, 0x47	; 71
    1760:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1764:	18 16       	cp	r1, r24
    1766:	4c f5       	brge	.+82     	; 0x17ba <GASY_voidMainLoop+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1768:	6f a1       	ldd	r22, Y+39	; 0x27
    176a:	78 a5       	ldd	r23, Y+40	; 0x28
    176c:	89 a5       	ldd	r24, Y+41	; 0x29
    176e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	51 e4       	ldi	r21, 0x41	; 65
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9a a3       	std	Y+34, r25	; 0x22
    178e:	89 a3       	std	Y+33, r24	; 0x21
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <GASY_voidMainLoop+0x698>
    1792:	80 e9       	ldi	r24, 0x90	; 144
    1794:	91 e0       	ldi	r25, 0x01	; 1
    1796:	98 a3       	std	Y+32, r25	; 0x20
    1798:	8f 8f       	std	Y+31, r24	; 0x1f
    179a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    179c:	98 a1       	ldd	r25, Y+32	; 0x20
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <GASY_voidMainLoop+0x686>
    17a2:	98 a3       	std	Y+32, r25	; 0x20
    17a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a6:	89 a1       	ldd	r24, Y+33	; 0x21
    17a8:	9a a1       	ldd	r25, Y+34	; 0x22
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	9a a3       	std	Y+34, r25	; 0x22
    17ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b0:	89 a1       	ldd	r24, Y+33	; 0x21
    17b2:	9a a1       	ldd	r25, Y+34	; 0x22
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	69 f7       	brne	.-38     	; 0x1792 <GASY_voidMainLoop+0x67a>
    17b8:	14 c0       	rjmp	.+40     	; 0x17e2 <GASY_voidMainLoop+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ba:	6b a1       	ldd	r22, Y+35	; 0x23
    17bc:	7c a1       	ldd	r23, Y+36	; 0x24
    17be:	8d a1       	ldd	r24, Y+37	; 0x25
    17c0:	9e a1       	ldd	r25, Y+38	; 0x26
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9a a3       	std	Y+34, r25	; 0x22
    17cc:	89 a3       	std	Y+33, r24	; 0x21
    17ce:	89 a1       	ldd	r24, Y+33	; 0x21
    17d0:	9a a1       	ldd	r25, Y+34	; 0x22
    17d2:	9e 8f       	std	Y+30, r25	; 0x1e
    17d4:	8d 8f       	std	Y+29, r24	; 0x1d
    17d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <GASY_voidMainLoop+0x6c2>
    17de:	9e 8f       	std	Y+30, r25	; 0x1e
    17e0:	8d 8f       	std	Y+29, r24	; 0x1d
					

					_delay_ms(50);
				}

				while (Gloable_GASY->GA_LDR_INPoint.LightLevel < GASY_CUTON_LIGHT_LEVE)
    17e2:	e0 91 d0 01 	lds	r30, 0x01D0
    17e6:	f0 91 d1 01 	lds	r31, 0x01D1
    17ea:	84 81       	ldd	r24, Z+4	; 0x04
    17ec:	95 81       	ldd	r25, Z+5	; 0x05
    17ee:	83 30       	cpi	r24, 0x03	; 3
    17f0:	91 05       	cpc	r25, r1
    17f2:	08 f4       	brcc	.+2      	; 0x17f6 <GASY_voidMainLoop+0x6de>
    17f4:	77 cf       	rjmp	.-274    	; 0x16e4 <GASY_voidMainLoop+0x5cc>
					

					_delay_ms(50);
				}
			}
			GASY_voidUpdateAfterLeave();
    17f6:	0e 94 44 08 	call	0x1088	; 0x1088 <GASY_voidUpdateAfterLeave>
    17fa:	9b cc       	rjmp	.-1738   	; 0x1132 <GASY_voidMainLoop+0x1a>
		} // car out of  the garage
		else if (Gloabl_u8CarOutFlag == 1)
    17fc:	80 91 cf 01 	lds	r24, 0x01CF
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	09 f0       	breq	.+2      	; 0x1806 <GASY_voidMainLoop+0x6ee>
    1804:	96 cc       	rjmp	.-1748   	; 0x1132 <GASY_voidMainLoop+0x1a>
		{

			// led notification for stop car while the other one out
			LED_u8SetOFF(&Gloable_GASY->GA_LED_cont);
    1806:	80 91 d0 01 	lds	r24, 0x01D0
    180a:	90 91 d1 01 	lds	r25, 0x01D1
    180e:	0f 96       	adiw	r24, 0x0f	; 15
    1810:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LED_u8SetOFF>
			LED_u8SetON(&Gloable_GASY->GA_LED_STOP);
    1814:	80 91 d0 01 	lds	r24, 0x01D0
    1818:	90 91 d1 01 	lds	r25, 0x01D1
    181c:	0c 96       	adiw	r24, 0x0c	; 12
    181e:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LED_u8SetON>
    1822:	7f c0       	rjmp	.+254    	; 0x1922 <GASY_voidMainLoop+0x80a>
			//wait for second flag
			while (Gloabl_u8CarInFlag != 1)
			{
				ADC_u8StartConverstionAsync(Gloabl_ADC_Chain_devicses[0].ConversionChannel,
    1824:	80 91 e0 01 	lds	r24, 0x01E0
    1828:	20 91 e1 01 	lds	r18, 0x01E1
    182c:	30 91 e2 01 	lds	r19, 0x01E2
    1830:	40 91 e3 01 	lds	r20, 0x01E3
    1834:	50 91 e4 01 	lds	r21, 0x01E4
    1838:	b9 01       	movw	r22, r18
    183a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <ADC_u8StartConverstionAsync>
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	a8 e4       	ldi	r26, 0x48	; 72
    1844:	b2 e4       	ldi	r27, 0x42	; 66
    1846:	89 8f       	std	Y+25, r24	; 0x19
    1848:	9a 8f       	std	Y+26, r25	; 0x1a
    184a:	ab 8f       	std	Y+27, r26	; 0x1b
    184c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184e:	69 8d       	ldd	r22, Y+25	; 0x19
    1850:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1852:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1854:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	4a e7       	ldi	r20, 0x7A	; 122
    185c:	55 e4       	ldi	r21, 0x45	; 69
    185e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	8d 8b       	std	Y+21, r24	; 0x15
    1868:	9e 8b       	std	Y+22, r25	; 0x16
    186a:	af 8b       	std	Y+23, r26	; 0x17
    186c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    186e:	6d 89       	ldd	r22, Y+21	; 0x15
    1870:	7e 89       	ldd	r23, Y+22	; 0x16
    1872:	8f 89       	ldd	r24, Y+23	; 0x17
    1874:	98 8d       	ldd	r25, Y+24	; 0x18
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e8       	ldi	r20, 0x80	; 128
    187c:	5f e3       	ldi	r21, 0x3F	; 63
    187e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1882:	88 23       	and	r24, r24
    1884:	2c f4       	brge	.+10     	; 0x1890 <GASY_voidMainLoop+0x778>
		__ticks = 1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9c 8b       	std	Y+20, r25	; 0x14
    188c:	8b 8b       	std	Y+19, r24	; 0x13
    188e:	3f c0       	rjmp	.+126    	; 0x190e <GASY_voidMainLoop+0x7f6>
	else if (__tmp > 65535)
    1890:	6d 89       	ldd	r22, Y+21	; 0x15
    1892:	7e 89       	ldd	r23, Y+22	; 0x16
    1894:	8f 89       	ldd	r24, Y+23	; 0x17
    1896:	98 8d       	ldd	r25, Y+24	; 0x18
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	3f ef       	ldi	r19, 0xFF	; 255
    189c:	4f e7       	ldi	r20, 0x7F	; 127
    189e:	57 e4       	ldi	r21, 0x47	; 71
    18a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18a4:	18 16       	cp	r1, r24
    18a6:	4c f5       	brge	.+82     	; 0x18fa <GASY_voidMainLoop+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a8:	69 8d       	ldd	r22, Y+25	; 0x19
    18aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e2       	ldi	r20, 0x20	; 32
    18b6:	51 e4       	ldi	r21, 0x41	; 65
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9c 8b       	std	Y+20, r25	; 0x14
    18ce:	8b 8b       	std	Y+19, r24	; 0x13
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <GASY_voidMainLoop+0x7d8>
    18d2:	80 e9       	ldi	r24, 0x90	; 144
    18d4:	91 e0       	ldi	r25, 0x01	; 1
    18d6:	9a 8b       	std	Y+18, r25	; 0x12
    18d8:	89 8b       	std	Y+17, r24	; 0x11
    18da:	89 89       	ldd	r24, Y+17	; 0x11
    18dc:	9a 89       	ldd	r25, Y+18	; 0x12
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <GASY_voidMainLoop+0x7c6>
    18e2:	9a 8b       	std	Y+18, r25	; 0x12
    18e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e6:	8b 89       	ldd	r24, Y+19	; 0x13
    18e8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	9c 8b       	std	Y+20, r25	; 0x14
    18ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f0:	8b 89       	ldd	r24, Y+19	; 0x13
    18f2:	9c 89       	ldd	r25, Y+20	; 0x14
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	69 f7       	brne	.-38     	; 0x18d2 <GASY_voidMainLoop+0x7ba>
    18f8:	14 c0       	rjmp	.+40     	; 0x1922 <GASY_voidMainLoop+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fa:	6d 89       	ldd	r22, Y+21	; 0x15
    18fc:	7e 89       	ldd	r23, Y+22	; 0x16
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	9c 8b       	std	Y+20, r25	; 0x14
    190c:	8b 8b       	std	Y+19, r24	; 0x13
    190e:	8b 89       	ldd	r24, Y+19	; 0x13
    1910:	9c 89       	ldd	r25, Y+20	; 0x14
    1912:	98 8b       	std	Y+16, r25	; 0x10
    1914:	8f 87       	std	Y+15, r24	; 0x0f
    1916:	8f 85       	ldd	r24, Y+15	; 0x0f
    1918:	98 89       	ldd	r25, Y+16	; 0x10
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <GASY_voidMainLoop+0x802>
    191e:	98 8b       	std	Y+16, r25	; 0x10
    1920:	8f 87       	std	Y+15, r24	; 0x0f

			// led notification for stop car while the other one out
			LED_u8SetOFF(&Gloable_GASY->GA_LED_cont);
			LED_u8SetON(&Gloable_GASY->GA_LED_STOP);
			//wait for second flag
			while (Gloabl_u8CarInFlag != 1)
    1922:	80 91 ce 01 	lds	r24, 0x01CE
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	09 f0       	breq	.+2      	; 0x192c <GASY_voidMainLoop+0x814>
    192a:	7c cf       	rjmp	.-264    	; 0x1824 <GASY_voidMainLoop+0x70c>
    192c:	7f c0       	rjmp	.+254    	; 0x1a2c <GASY_voidMainLoop+0x914>
				_delay_ms(50);
			}
			// waiting for car to leave
			while (Gloable_GASY->GA_LDR_INPoint.LightLevel < GASY_CUTON_LIGHT_LEVE)
			{
				ADC_u8StartConverstionAsync(Gloabl_ADC_Chain_devicses[0].ConversionChannel,
    192e:	80 91 e0 01 	lds	r24, 0x01E0
    1932:	20 91 e1 01 	lds	r18, 0x01E1
    1936:	30 91 e2 01 	lds	r19, 0x01E2
    193a:	40 91 e3 01 	lds	r20, 0x01E3
    193e:	50 91 e4 01 	lds	r21, 0x01E4
    1942:	b9 01       	movw	r22, r18
    1944:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <ADC_u8StartConverstionAsync>
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	a8 e4       	ldi	r26, 0x48	; 72
    194e:	b2 e4       	ldi	r27, 0x42	; 66
    1950:	8b 87       	std	Y+11, r24	; 0x0b
    1952:	9c 87       	std	Y+12, r25	; 0x0c
    1954:	ad 87       	std	Y+13, r26	; 0x0d
    1956:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1958:	6b 85       	ldd	r22, Y+11	; 0x0b
    195a:	7c 85       	ldd	r23, Y+12	; 0x0c
    195c:	8d 85       	ldd	r24, Y+13	; 0x0d
    195e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	4a e7       	ldi	r20, 0x7A	; 122
    1966:	55 e4       	ldi	r21, 0x45	; 69
    1968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	8f 83       	std	Y+7, r24	; 0x07
    1972:	98 87       	std	Y+8, r25	; 0x08
    1974:	a9 87       	std	Y+9, r26	; 0x09
    1976:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1978:	6f 81       	ldd	r22, Y+7	; 0x07
    197a:	78 85       	ldd	r23, Y+8	; 0x08
    197c:	89 85       	ldd	r24, Y+9	; 0x09
    197e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e8       	ldi	r20, 0x80	; 128
    1986:	5f e3       	ldi	r21, 0x3F	; 63
    1988:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    198c:	88 23       	and	r24, r24
    198e:	2c f4       	brge	.+10     	; 0x199a <GASY_voidMainLoop+0x882>
		__ticks = 1;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
    1998:	3f c0       	rjmp	.+126    	; 0x1a18 <GASY_voidMainLoop+0x900>
	else if (__tmp > 65535)
    199a:	6f 81       	ldd	r22, Y+7	; 0x07
    199c:	78 85       	ldd	r23, Y+8	; 0x08
    199e:	89 85       	ldd	r24, Y+9	; 0x09
    19a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	3f ef       	ldi	r19, 0xFF	; 255
    19a6:	4f e7       	ldi	r20, 0x7F	; 127
    19a8:	57 e4       	ldi	r21, 0x47	; 71
    19aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ae:	18 16       	cp	r1, r24
    19b0:	4c f5       	brge	.+82     	; 0x1a04 <GASY_voidMainLoop+0x8ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e2       	ldi	r20, 0x20	; 32
    19c0:	51 e4       	ldi	r21, 0x41	; 65
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	bc 01       	movw	r22, r24
    19cc:	cd 01       	movw	r24, r26
    19ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	9e 83       	std	Y+6, r25	; 0x06
    19d8:	8d 83       	std	Y+5, r24	; 0x05
    19da:	0f c0       	rjmp	.+30     	; 0x19fa <GASY_voidMainLoop+0x8e2>
    19dc:	80 e9       	ldi	r24, 0x90	; 144
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	9c 83       	std	Y+4, r25	; 0x04
    19e2:	8b 83       	std	Y+3, r24	; 0x03
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <GASY_voidMainLoop+0x8d0>
    19ec:	9c 83       	std	Y+4, r25	; 0x04
    19ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f0:	8d 81       	ldd	r24, Y+5	; 0x05
    19f2:	9e 81       	ldd	r25, Y+6	; 0x06
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	9e 83       	std	Y+6, r25	; 0x06
    19f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
    19fc:	9e 81       	ldd	r25, Y+6	; 0x06
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	69 f7       	brne	.-38     	; 0x19dc <GASY_voidMainLoop+0x8c4>
    1a02:	14 c0       	rjmp	.+40     	; 0x1a2c <GASY_voidMainLoop+0x914>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a04:	6f 81       	ldd	r22, Y+7	; 0x07
    1a06:	78 85       	ldd	r23, Y+8	; 0x08
    1a08:	89 85       	ldd	r24, Y+9	; 0x09
    1a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	9a 83       	std	Y+2, r25	; 0x02
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <GASY_voidMainLoop+0x90c>
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	89 83       	std	Y+1, r24	; 0x01
				

				_delay_ms(50);
			}
			// waiting for car to leave
			while (Gloable_GASY->GA_LDR_INPoint.LightLevel < GASY_CUTON_LIGHT_LEVE)
    1a2c:	e0 91 d0 01 	lds	r30, 0x01D0
    1a30:	f0 91 d1 01 	lds	r31, 0x01D1
    1a34:	84 81       	ldd	r24, Z+4	; 0x04
    1a36:	95 81       	ldd	r25, Z+5	; 0x05
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	08 f4       	brcc	.+2      	; 0x1a40 <GASY_voidMainLoop+0x928>
    1a3e:	77 cf       	rjmp	.-274    	; 0x192e <GASY_voidMainLoop+0x816>
						Gloabl_ADC_Chain_devicses[0].result, Gloabl_ADC_Chain_devicses[0].pvnotificationFunction);
				

				_delay_ms(50);
			}
			Gloabl_u8CarsCount -= 1;
    1a40:	80 91 94 01 	lds	r24, 0x0194
    1a44:	90 91 95 01 	lds	r25, 0x0195
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	90 93 95 01 	sts	0x0195, r25
    1a4e:	80 93 94 01 	sts	0x0194, r24
			GASY_voidUpdateAfterLeave();
    1a52:	0e 94 44 08 	call	0x1088	; 0x1088 <GASY_voidUpdateAfterLeave>
    1a56:	6d cb       	rjmp	.-2342   	; 0x1132 <GASY_voidMainLoop+0x1a>

00001a58 <AVO_u16MesaureVoltage>:
#include "../../0-MCAL/1-DIO/DIO_interface.h"
#include "../../0-MCAL/5-ADC/ADC_interface.h"
#include "../../1-HAL/CLCD/CLCD_interface.h"
#include "AVO_interface.h"

uint16 AVO_u16MesaureVoltage(ADC_channel_t copy_Channel){
    1a58:	af 92       	push	r10
    1a5a:	bf 92       	push	r11
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <AVO_u16MesaureVoltage+0x16>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <AVO_u16MesaureVoltage+0x18>
    1a70:	0f 92       	push	r0
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    uint16 Local_u16Reading ;
    ADC_u8StartConverstionSync(copy_Channel,&Local_u16Reading);
    1a78:	9e 01       	movw	r18, r28
    1a7a:	2d 5f       	subi	r18, 0xFD	; 253
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	b9 01       	movw	r22, r18
    1a82:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <ADC_u8StartConverstionSync>
    uint16 Local_u16AnalogReading = (uint16)MAP(0,1023,0,5000,(sint32)Local_u16Reading);
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	cc 01       	movw	r24, r24
    1a8c:	a0 e0       	ldi	r26, 0x00	; 0
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <AVO_u16MesaureVoltage+0x3a>
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <AVO_u16MesaureVoltage+0x3c>
    1a94:	ed b7       	in	r30, 0x3d	; 61
    1a96:	fe b7       	in	r31, 0x3e	; 62
    1a98:	31 96       	adiw	r30, 0x01	; 1
    1a9a:	80 83       	st	Z, r24
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	a2 83       	std	Z+2, r26	; 0x02
    1aa0:	b3 83       	std	Z+3, r27	; 0x03
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	2f ef       	ldi	r18, 0xFF	; 255
    1aac:	33 e0       	ldi	r19, 0x03	; 3
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	ee 24       	eor	r14, r14
    1ab4:	ff 24       	eor	r15, r15
    1ab6:	87 01       	movw	r16, r14
    1ab8:	0f 2e       	mov	r0, r31
    1aba:	f8 e8       	ldi	r31, 0x88	; 136
    1abc:	af 2e       	mov	r10, r31
    1abe:	f3 e1       	ldi	r31, 0x13	; 19
    1ac0:	bf 2e       	mov	r11, r31
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	cf 2e       	mov	r12, r31
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	df 2e       	mov	r13, r31
    1aca:	f0 2d       	mov	r31, r0
    1acc:	0e 94 17 07 	call	0xe2e	; 0xe2e <MAP>
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
    return Local_u16AnalogReading;
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	ff 90       	pop	r15
    1af8:	ef 90       	pop	r14
    1afa:	df 90       	pop	r13
    1afc:	cf 90       	pop	r12
    1afe:	bf 90       	pop	r11
    1b00:	af 90       	pop	r10
    1b02:	08 95       	ret

00001b04 <AVO_u16MesaureOhm>:

uint16 AVO_u16MesaureOhm(ADC_channel_t copy_Channel,uint16 copy_u16R2){
    1b04:	ef 92       	push	r14
    1b06:	ff 92       	push	r15
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <AVO_u16MesaureOhm+0xe>
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <AVO_u16MesaureOhm+0x10>
    1b14:	0f 92       	push	r0
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
    1b1c:	7d 83       	std	Y+5, r23	; 0x05
    1b1e:	6c 83       	std	Y+4, r22	; 0x04
    uint16 Local_u16VoltReading = AVO_u16MesaureVoltage(copy_Channel);
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <AVO_u16MesaureVoltage>
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
    // using voltage divider low R1= ((vin*r2)/vout)-r2	  r2=220
    return (uint16)(((MAX_VOLT*(uint32)copy_u16R2)/(uint32)Local_u16VoltReading)-copy_u16R2);
    1b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2e:	cc 01       	movw	r24, r24
    1b30:	a0 e0       	ldi	r26, 0x00	; 0
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	28 e8       	ldi	r18, 0x88	; 136
    1b36:	33 e1       	ldi	r19, 0x13	; 19
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <__mulsi3>
    1b44:	7b 01       	movw	r14, r22
    1b46:	8c 01       	movw	r16, r24
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4c:	9c 01       	movw	r18, r24
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	c8 01       	movw	r24, r16
    1b54:	b7 01       	movw	r22, r14
    1b56:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <__udivmodsi4>
    1b5a:	da 01       	movw	r26, r20
    1b5c:	c9 01       	movw	r24, r18
    1b5e:	9c 01       	movw	r18, r24
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	9d 81       	ldd	r25, Y+5	; 0x05
    1b64:	a9 01       	movw	r20, r18
    1b66:	48 1b       	sub	r20, r24
    1b68:	59 0b       	sbc	r21, r25
    1b6a:	ca 01       	movw	r24, r20

}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	08 95       	ret

00001b84 <STM_u8Rotate>:
#include "../../libraries/ErrType.h"
#include "../../0-MCAL/1-DIO/DIO_interface.h"
#include "STM_interface.h"

uint8 STM_u8Rotate(const STM_CONFIG_t *referance_stepper, uint16 copy_u16Angle, STM_DIRECTION_t copy_STMdirection)
{
    1b84:	0f 93       	push	r16
    1b86:	1f 93       	push	r17
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	ca 57       	subi	r28, 0x7A	; 122
    1b92:	d0 40       	sbci	r29, 0x00	; 0
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	ea 58       	subi	r30, 0x8A	; 138
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e8 58       	subi	r30, 0x88	; 136
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	71 83       	std	Z+1, r23	; 0x01
    1bb0:	60 83       	st	Z, r22
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e6 58       	subi	r30, 0x86	; 134
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	40 83       	st	Z, r20
    uint8 Local_u8ErrorType = OK;
    1bba:	fe 01       	movw	r30, r28
    1bbc:	eb 58       	subi	r30, 0x8B	; 139
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	80 83       	st	Z, r24
    if (referance_stepper != NULL)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ea 58       	subi	r30, 0x8A	; 138
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 81       	ld	r24, Z
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <STM_u8Rotate+0x50>
    1bd2:	4f c6       	rjmp	.+3230   	; 0x2872 <STM_u8Rotate+0xcee>
    {


        /*360(full roatate)/0.1758(full step degree) ) = 2048 (full step counts)*/
        uint16 local_u16steps = ((uint32)copy_u16Angle * 2048UL) / 360UL; // convert degree to number of full step
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e8 58       	subi	r30, 0x88	; 136
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	cc 01       	movw	r24, r24
    1be0:	a0 e0       	ldi	r26, 0x00	; 0
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	07 2e       	mov	r0, r23
    1be6:	7b e0       	ldi	r23, 0x0B	; 11
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	aa 1f       	adc	r26, r26
    1bee:	bb 1f       	adc	r27, r27
    1bf0:	7a 95       	dec	r23
    1bf2:	d1 f7       	brne	.-12     	; 0x1be8 <STM_u8Rotate+0x64>
    1bf4:	70 2d       	mov	r23, r0
    1bf6:	28 e6       	ldi	r18, 0x68	; 104
    1bf8:	31 e0       	ldi	r19, 0x01	; 1
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <__udivmodsi4>
    1c06:	da 01       	movw	r26, r20
    1c08:	c9 01       	movw	r24, r18
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	ed 58       	subi	r30, 0x8D	; 141
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	80 83       	st	Z, r24
        uint16 local_u16Iter = 0;
    1c14:	fe 01       	movw	r30, r28
    1c16:	ef 58       	subi	r30, 0x8F	; 143
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	11 82       	std	Z+1, r1	; 0x01
    1c1c:	10 82       	st	Z, r1
        if (copy_STMdirection == STM_COUNTER_CLOCK_WISE)
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e6 58       	subi	r30, 0x86	; 134
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <STM_u8Rotate+0xa8>
    1c2a:	74 c3       	rjmp	.+1768   	; 0x2314 <STM_u8Rotate+0x790>
    1c2c:	63 c3       	rjmp	.+1734   	; 0x22f4 <STM_u8Rotate+0x770>
        {
        	for (; local_u16Iter < local_u16steps; local_u16Iter++)
			{
				if (local_u16Iter % 4 == 0)
    1c2e:	fe 01       	movw	r30, r28
    1c30:	ef 58       	subi	r30, 0x8F	; 143
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	83 70       	andi	r24, 0x03	; 3
    1c3a:	90 70       	andi	r25, 0x00	; 0
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	91 f4       	brne	.+36     	; 0x1c64 <STM_u8Rotate+0xe0>
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->yellowPin, DIO_PIN_HIGH);
    1c40:	fe 01       	movw	r30, r28
    1c42:	ea 58       	subi	r30, 0x8A	; 138
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	01 90       	ld	r0, Z+
    1c48:	f0 81       	ld	r31, Z
    1c4a:	e0 2d       	mov	r30, r0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ea 58       	subi	r30, 0x8A	; 138
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	01 90       	ld	r0, Z+
    1c56:	f0 81       	ld	r31, Z
    1c58:	e0 2d       	mov	r30, r0
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	69 2f       	mov	r22, r25
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
				DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_LOW); // activate this pin in uln2003a
    1c64:	fe 01       	movw	r30, r28
    1c66:	ea 58       	subi	r30, 0x8A	; 138
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	01 90       	ld	r0, Z+
    1c6c:	f0 81       	ld	r31, Z
    1c6e:	e0 2d       	mov	r30, r0
    1c70:	80 81       	ld	r24, Z
    1c72:	fe 01       	movw	r30, r28
    1c74:	ea 58       	subi	r30, 0x8A	; 138
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	01 90       	ld	r0, Z+
    1c7a:	f0 81       	ld	r31, Z
    1c7c:	e0 2d       	mov	r30, r0
    1c7e:	94 81       	ldd	r25, Z+4	; 0x04
    1c80:	69 2f       	mov	r22, r25
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e3 59       	subi	r30, 0x93	; 147
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e4       	ldi	r26, 0x40	; 64
    1c94:	b0 e4       	ldi	r27, 0x40	; 64
    1c96:	80 83       	st	Z, r24
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	a2 83       	std	Z+2, r26	; 0x02
    1c9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	8e 01       	movw	r16, r28
    1ca0:	07 59       	subi	r16, 0x97	; 151
    1ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e3 59       	subi	r30, 0x93	; 147
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	60 81       	ld	r22, Z
    1cac:	71 81       	ldd	r23, Z+1	; 0x01
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	4a e7       	ldi	r20, 0x7A	; 122
    1cb8:	55 e4       	ldi	r21, 0x45	; 69
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	80 83       	st	Z, r24
    1cc6:	91 83       	std	Z+1, r25	; 0x01
    1cc8:	a2 83       	std	Z+2, r26	; 0x02
    1cca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e7 59       	subi	r30, 0x97	; 151
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	60 81       	ld	r22, Z
    1cd4:	71 81       	ldd	r23, Z+1	; 0x01
    1cd6:	82 81       	ldd	r24, Z+2	; 0x02
    1cd8:	93 81       	ldd	r25, Z+3	; 0x03
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	44 f4       	brge	.+16     	; 0x1cfa <STM_u8Rotate+0x176>
		__ticks = 1;
    1cea:	fe 01       	movw	r30, r28
    1cec:	e9 59       	subi	r30, 0x99	; 153
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
    1cf8:	64 c0       	rjmp	.+200    	; 0x1dc2 <STM_u8Rotate+0x23e>
	else if (__tmp > 65535)
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e7 59       	subi	r30, 0x97	; 151
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	3f ef       	ldi	r19, 0xFF	; 255
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	57 e4       	ldi	r21, 0x47	; 71
    1d10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	0c f0       	brlt	.+2      	; 0x1d1a <STM_u8Rotate+0x196>
    1d18:	43 c0       	rjmp	.+134    	; 0x1da0 <STM_u8Rotate+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e3 59       	subi	r30, 0x93	; 147
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	60 81       	ld	r22, Z
    1d22:	71 81       	ldd	r23, Z+1	; 0x01
    1d24:	82 81       	ldd	r24, Z+2	; 0x02
    1d26:	93 81       	ldd	r25, Z+3	; 0x03
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	8e 01       	movw	r16, r28
    1d3a:	09 59       	subi	r16, 0x99	; 153
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3e:	bc 01       	movw	r22, r24
    1d40:	cd 01       	movw	r24, r26
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	91 83       	std	Z+1, r25	; 0x01
    1d4e:	80 83       	st	Z, r24
    1d50:	1f c0       	rjmp	.+62     	; 0x1d90 <STM_u8Rotate+0x20c>
    1d52:	fe 01       	movw	r30, r28
    1d54:	eb 59       	subi	r30, 0x9B	; 155
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 e9       	ldi	r24, 0x90	; 144
    1d5a:	91 e0       	ldi	r25, 0x01	; 1
    1d5c:	91 83       	std	Z+1, r25	; 0x01
    1d5e:	80 83       	st	Z, r24
    1d60:	fe 01       	movw	r30, r28
    1d62:	eb 59       	subi	r30, 0x9B	; 155
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	91 81       	ldd	r25, Z+1	; 0x01
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <STM_u8Rotate+0x1e6>
    1d6e:	fe 01       	movw	r30, r28
    1d70:	eb 59       	subi	r30, 0x9B	; 155
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	91 83       	std	Z+1, r25	; 0x01
    1d76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d78:	de 01       	movw	r26, r28
    1d7a:	a9 59       	subi	r26, 0x99	; 153
    1d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e9 59       	subi	r30, 0x99	; 153
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 81       	ld	r24, Z
    1d86:	91 81       	ldd	r25, Z+1	; 0x01
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	11 96       	adiw	r26, 0x01	; 1
    1d8c:	9c 93       	st	X, r25
    1d8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	fe 01       	movw	r30, r28
    1d92:	e9 59       	subi	r30, 0x99	; 153
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	80 81       	ld	r24, Z
    1d98:	91 81       	ldd	r25, Z+1	; 0x01
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	d1 f6       	brne	.-76     	; 0x1d52 <STM_u8Rotate+0x1ce>
    1d9e:	28 c0       	rjmp	.+80     	; 0x1df0 <STM_u8Rotate+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	8e 01       	movw	r16, r28
    1da2:	09 59       	subi	r16, 0x99	; 153
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
    1da6:	fe 01       	movw	r30, r28
    1da8:	e7 59       	subi	r30, 0x97	; 151
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
    1dc2:	de 01       	movw	r26, r28
    1dc4:	ad 59       	subi	r26, 0x9D	; 157
    1dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e9 59       	subi	r30, 0x99	; 153
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	11 96       	adiw	r26, 0x01	; 1
    1dd4:	9c 93       	st	X, r25
    1dd6:	8e 93       	st	-X, r24
    1dd8:	fe 01       	movw	r30, r28
    1dda:	ed 59       	subi	r30, 0x9D	; 157
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <STM_u8Rotate+0x25e>
    1de6:	fe 01       	movw	r30, r28
    1de8:	ed 59       	subi	r30, 0x9D	; 157
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	91 83       	std	Z+1, r25	; 0x01
    1dee:	80 83       	st	Z, r24
				_delay_ms(3);
				if (local_u16Iter % 4 == 1)
    1df0:	fe 01       	movw	r30, r28
    1df2:	ef 58       	subi	r30, 0x8F	; 143
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	83 70       	andi	r24, 0x03	; 3
    1dfc:	90 70       	andi	r25, 0x00	; 0
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	91 05       	cpc	r25, r1
    1e02:	91 f4       	brne	.+36     	; 0x1e28 <STM_u8Rotate+0x2a4>
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->pinkPin, DIO_PIN_HIGH);
    1e04:	fe 01       	movw	r30, r28
    1e06:	ea 58       	subi	r30, 0x8A	; 138
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	01 90       	ld	r0, Z+
    1e0c:	f0 81       	ld	r31, Z
    1e0e:	e0 2d       	mov	r30, r0
    1e10:	80 81       	ld	r24, Z
    1e12:	fe 01       	movw	r30, r28
    1e14:	ea 58       	subi	r30, 0x8A	; 138
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	01 90       	ld	r0, Z+
    1e1a:	f0 81       	ld	r31, Z
    1e1c:	e0 2d       	mov	r30, r0
    1e1e:	92 81       	ldd	r25, Z+2	; 0x02
    1e20:	69 2f       	mov	r22, r25
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
				DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->yellowPin, DIO_PIN_LOW); // activate this pin in uln2003a
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ea 58       	subi	r30, 0x8A	; 138
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	01 90       	ld	r0, Z+
    1e30:	f0 81       	ld	r31, Z
    1e32:	e0 2d       	mov	r30, r0
    1e34:	80 81       	ld	r24, Z
    1e36:	fe 01       	movw	r30, r28
    1e38:	ea 58       	subi	r30, 0x8A	; 138
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	01 90       	ld	r0, Z+
    1e3e:	f0 81       	ld	r31, Z
    1e40:	e0 2d       	mov	r30, r0
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	69 2f       	mov	r22, r25
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e1 5a       	subi	r30, 0xA1	; 161
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a0 e4       	ldi	r26, 0x40	; 64
    1e58:	b0 e4       	ldi	r27, 0x40	; 64
    1e5a:	80 83       	st	Z, r24
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	a2 83       	std	Z+2, r26	; 0x02
    1e60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e62:	8e 01       	movw	r16, r28
    1e64:	05 5a       	subi	r16, 0xA5	; 165
    1e66:	1f 4f       	sbci	r17, 0xFF	; 255
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e1 5a       	subi	r30, 0xA1	; 161
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4a e7       	ldi	r20, 0x7A	; 122
    1e7c:	55 e4       	ldi	r21, 0x45	; 69
    1e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	f8 01       	movw	r30, r16
    1e88:	80 83       	st	Z, r24
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	a2 83       	std	Z+2, r26	; 0x02
    1e8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e90:	fe 01       	movw	r30, r28
    1e92:	e5 5a       	subi	r30, 0xA5	; 165
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	60 81       	ld	r22, Z
    1e98:	71 81       	ldd	r23, Z+1	; 0x01
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	44 f4       	brge	.+16     	; 0x1ebe <STM_u8Rotate+0x33a>
		__ticks = 1;
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e7 5a       	subi	r30, 0xA7	; 167
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	80 83       	st	Z, r24
    1ebc:	64 c0       	rjmp	.+200    	; 0x1f86 <STM_u8Rotate+0x402>
	else if (__tmp > 65535)
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e5 5a       	subi	r30, 0xA5	; 165
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f e7       	ldi	r20, 0x7F	; 127
    1ed2:	57 e4       	ldi	r21, 0x47	; 71
    1ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed8:	18 16       	cp	r1, r24
    1eda:	0c f0       	brlt	.+2      	; 0x1ede <STM_u8Rotate+0x35a>
    1edc:	43 c0       	rjmp	.+134    	; 0x1f64 <STM_u8Rotate+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e1 5a       	subi	r30, 0xA1	; 161
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	60 81       	ld	r22, Z
    1ee6:	71 81       	ldd	r23, Z+1	; 0x01
    1ee8:	82 81       	ldd	r24, Z+2	; 0x02
    1eea:	93 81       	ldd	r25, Z+3	; 0x03
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	8e 01       	movw	r16, r28
    1efe:	07 5a       	subi	r16, 0xA7	; 167
    1f00:	1f 4f       	sbci	r17, 0xFF	; 255
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	f8 01       	movw	r30, r16
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	80 83       	st	Z, r24
    1f14:	1f c0       	rjmp	.+62     	; 0x1f54 <STM_u8Rotate+0x3d0>
    1f16:	fe 01       	movw	r30, r28
    1f18:	e9 5a       	subi	r30, 0xA9	; 169
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 e9       	ldi	r24, 0x90	; 144
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	80 83       	st	Z, r24
    1f24:	fe 01       	movw	r30, r28
    1f26:	e9 5a       	subi	r30, 0xA9	; 169
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	80 81       	ld	r24, Z
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <STM_u8Rotate+0x3aa>
    1f32:	fe 01       	movw	r30, r28
    1f34:	e9 5a       	subi	r30, 0xA9	; 169
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	de 01       	movw	r26, r28
    1f3e:	a7 5a       	subi	r26, 0xA7	; 167
    1f40:	bf 4f       	sbci	r27, 0xFF	; 255
    1f42:	fe 01       	movw	r30, r28
    1f44:	e7 5a       	subi	r30, 0xA7	; 167
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	80 81       	ld	r24, Z
    1f4a:	91 81       	ldd	r25, Z+1	; 0x01
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	11 96       	adiw	r26, 0x01	; 1
    1f50:	9c 93       	st	X, r25
    1f52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f54:	fe 01       	movw	r30, r28
    1f56:	e7 5a       	subi	r30, 0xA7	; 167
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 81       	ld	r24, Z
    1f5c:	91 81       	ldd	r25, Z+1	; 0x01
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	d1 f6       	brne	.-76     	; 0x1f16 <STM_u8Rotate+0x392>
    1f62:	28 c0       	rjmp	.+80     	; 0x1fb4 <STM_u8Rotate+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	8e 01       	movw	r16, r28
    1f66:	07 5a       	subi	r16, 0xA7	; 167
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e5 5a       	subi	r30, 0xA5	; 165
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	f8 01       	movw	r30, r16
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	80 83       	st	Z, r24
    1f86:	de 01       	movw	r26, r28
    1f88:	ab 5a       	subi	r26, 0xAB	; 171
    1f8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e7 5a       	subi	r30, 0xA7	; 167
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	80 81       	ld	r24, Z
    1f94:	91 81       	ldd	r25, Z+1	; 0x01
    1f96:	11 96       	adiw	r26, 0x01	; 1
    1f98:	9c 93       	st	X, r25
    1f9a:	8e 93       	st	-X, r24
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	eb 5a       	subi	r30, 0xAB	; 171
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <STM_u8Rotate+0x422>
    1faa:	fe 01       	movw	r30, r28
    1fac:	eb 5a       	subi	r30, 0xAB	; 171
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
				_delay_ms(3);
				if (local_u16Iter % 4 == 2)
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ef 58       	subi	r30, 0x8F	; 143
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	83 70       	andi	r24, 0x03	; 3
    1fc0:	90 70       	andi	r25, 0x00	; 0
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	91 f4       	brne	.+36     	; 0x1fec <STM_u8Rotate+0x468>
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_HIGH);
    1fc8:	fe 01       	movw	r30, r28
    1fca:	ea 58       	subi	r30, 0x8A	; 138
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	01 90       	ld	r0, Z+
    1fd0:	f0 81       	ld	r31, Z
    1fd2:	e0 2d       	mov	r30, r0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	ea 58       	subi	r30, 0x8A	; 138
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	01 90       	ld	r0, Z+
    1fde:	f0 81       	ld	r31, Z
    1fe0:	e0 2d       	mov	r30, r0
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	69 2f       	mov	r22, r25
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
				DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->pinkPin, DIO_PIN_LOW); // activate this pin in uln2003a
    1fec:	fe 01       	movw	r30, r28
    1fee:	ea 58       	subi	r30, 0x8A	; 138
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	01 90       	ld	r0, Z+
    1ff4:	f0 81       	ld	r31, Z
    1ff6:	e0 2d       	mov	r30, r0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ea 58       	subi	r30, 0x8A	; 138
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	01 90       	ld	r0, Z+
    2002:	f0 81       	ld	r31, Z
    2004:	e0 2d       	mov	r30, r0
    2006:	92 81       	ldd	r25, Z+2	; 0x02
    2008:	69 2f       	mov	r22, r25
    200a:	40 e0       	ldi	r20, 0x00	; 0
    200c:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2010:	fe 01       	movw	r30, r28
    2012:	ef 5a       	subi	r30, 0xAF	; 175
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	a0 e4       	ldi	r26, 0x40	; 64
    201c:	b0 e4       	ldi	r27, 0x40	; 64
    201e:	80 83       	st	Z, r24
    2020:	91 83       	std	Z+1, r25	; 0x01
    2022:	a2 83       	std	Z+2, r26	; 0x02
    2024:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2026:	8e 01       	movw	r16, r28
    2028:	03 5b       	subi	r16, 0xB3	; 179
    202a:	1f 4f       	sbci	r17, 0xFF	; 255
    202c:	fe 01       	movw	r30, r28
    202e:	ef 5a       	subi	r30, 0xAF	; 175
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a e7       	ldi	r20, 0x7A	; 122
    2040:	55 e4       	ldi	r21, 0x45	; 69
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	f8 01       	movw	r30, r16
    204c:	80 83       	st	Z, r24
    204e:	91 83       	std	Z+1, r25	; 0x01
    2050:	a2 83       	std	Z+2, r26	; 0x02
    2052:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2054:	fe 01       	movw	r30, r28
    2056:	e3 5b       	subi	r30, 0xB3	; 179
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	44 f4       	brge	.+16     	; 0x2082 <STM_u8Rotate+0x4fe>
		__ticks = 1;
    2072:	fe 01       	movw	r30, r28
    2074:	e5 5b       	subi	r30, 0xB5	; 181
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	80 83       	st	Z, r24
    2080:	64 c0       	rjmp	.+200    	; 0x214a <STM_u8Rotate+0x5c6>
	else if (__tmp > 65535)
    2082:	fe 01       	movw	r30, r28
    2084:	e3 5b       	subi	r30, 0xB3	; 179
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	3f ef       	ldi	r19, 0xFF	; 255
    2094:	4f e7       	ldi	r20, 0x7F	; 127
    2096:	57 e4       	ldi	r21, 0x47	; 71
    2098:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209c:	18 16       	cp	r1, r24
    209e:	0c f0       	brlt	.+2      	; 0x20a2 <STM_u8Rotate+0x51e>
    20a0:	43 c0       	rjmp	.+134    	; 0x2128 <STM_u8Rotate+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	fe 01       	movw	r30, r28
    20a4:	ef 5a       	subi	r30, 0xAF	; 175
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e2       	ldi	r20, 0x20	; 32
    20b6:	51 e4       	ldi	r21, 0x41	; 65
    20b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	8e 01       	movw	r16, r28
    20c2:	05 5b       	subi	r16, 0xB5	; 181
    20c4:	1f 4f       	sbci	r17, 0xFF	; 255
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	f8 01       	movw	r30, r16
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
    20d8:	1f c0       	rjmp	.+62     	; 0x2118 <STM_u8Rotate+0x594>
    20da:	fe 01       	movw	r30, r28
    20dc:	e7 5b       	subi	r30, 0xB7	; 183
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 e9       	ldi	r24, 0x90	; 144
    20e2:	91 e0       	ldi	r25, 0x01	; 1
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
    20e8:	fe 01       	movw	r30, r28
    20ea:	e7 5b       	subi	r30, 0xB7	; 183
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 81       	ld	r24, Z
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <STM_u8Rotate+0x56e>
    20f6:	fe 01       	movw	r30, r28
    20f8:	e7 5b       	subi	r30, 0xB7	; 183
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	de 01       	movw	r26, r28
    2102:	a5 5b       	subi	r26, 0xB5	; 181
    2104:	bf 4f       	sbci	r27, 0xFF	; 255
    2106:	fe 01       	movw	r30, r28
    2108:	e5 5b       	subi	r30, 0xB5	; 181
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 81       	ld	r24, Z
    210e:	91 81       	ldd	r25, Z+1	; 0x01
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	11 96       	adiw	r26, 0x01	; 1
    2114:	9c 93       	st	X, r25
    2116:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2118:	fe 01       	movw	r30, r28
    211a:	e5 5b       	subi	r30, 0xB5	; 181
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	91 81       	ldd	r25, Z+1	; 0x01
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	d1 f6       	brne	.-76     	; 0x20da <STM_u8Rotate+0x556>
    2126:	28 c0       	rjmp	.+80     	; 0x2178 <STM_u8Rotate+0x5f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	8e 01       	movw	r16, r28
    212a:	05 5b       	subi	r16, 0xB5	; 181
    212c:	1f 4f       	sbci	r17, 0xFF	; 255
    212e:	fe 01       	movw	r30, r28
    2130:	e3 5b       	subi	r30, 0xB3	; 179
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	60 81       	ld	r22, Z
    2136:	71 81       	ldd	r23, Z+1	; 0x01
    2138:	82 81       	ldd	r24, Z+2	; 0x02
    213a:	93 81       	ldd	r25, Z+3	; 0x03
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	f8 01       	movw	r30, r16
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
    214a:	de 01       	movw	r26, r28
    214c:	a9 5b       	subi	r26, 0xB9	; 185
    214e:	bf 4f       	sbci	r27, 0xFF	; 255
    2150:	fe 01       	movw	r30, r28
    2152:	e5 5b       	subi	r30, 0xB5	; 181
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	11 96       	adiw	r26, 0x01	; 1
    215c:	9c 93       	st	X, r25
    215e:	8e 93       	st	-X, r24
    2160:	fe 01       	movw	r30, r28
    2162:	e9 5b       	subi	r30, 0xB9	; 185
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <STM_u8Rotate+0x5e6>
    216e:	fe 01       	movw	r30, r28
    2170:	e9 5b       	subi	r30, 0xB9	; 185
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	80 83       	st	Z, r24
				_delay_ms(3);
				if (local_u16Iter % 4 == 3)
    2178:	fe 01       	movw	r30, r28
    217a:	ef 58       	subi	r30, 0x8F	; 143
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	83 70       	andi	r24, 0x03	; 3
    2184:	90 70       	andi	r25, 0x00	; 0
    2186:	83 30       	cpi	r24, 0x03	; 3
    2188:	91 05       	cpc	r25, r1
    218a:	91 f4       	brne	.+36     	; 0x21b0 <STM_u8Rotate+0x62c>
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_HIGH);
    218c:	fe 01       	movw	r30, r28
    218e:	ea 58       	subi	r30, 0x8A	; 138
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	01 90       	ld	r0, Z+
    2194:	f0 81       	ld	r31, Z
    2196:	e0 2d       	mov	r30, r0
    2198:	80 81       	ld	r24, Z
    219a:	fe 01       	movw	r30, r28
    219c:	ea 58       	subi	r30, 0x8A	; 138
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	01 90       	ld	r0, Z+
    21a2:	f0 81       	ld	r31, Z
    21a4:	e0 2d       	mov	r30, r0
    21a6:	94 81       	ldd	r25, Z+4	; 0x04
    21a8:	69 2f       	mov	r22, r25
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
				DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_LOW); // activate this pin in uln2003a
    21b0:	fe 01       	movw	r30, r28
    21b2:	ea 58       	subi	r30, 0x8A	; 138
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	01 90       	ld	r0, Z+
    21b8:	f0 81       	ld	r31, Z
    21ba:	e0 2d       	mov	r30, r0
    21bc:	80 81       	ld	r24, Z
    21be:	fe 01       	movw	r30, r28
    21c0:	ea 58       	subi	r30, 0x8A	; 138
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	01 90       	ld	r0, Z+
    21c6:	f0 81       	ld	r31, Z
    21c8:	e0 2d       	mov	r30, r0
    21ca:	91 81       	ldd	r25, Z+1	; 0x01
    21cc:	69 2f       	mov	r22, r25
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    21d4:	fe 01       	movw	r30, r28
    21d6:	ed 5b       	subi	r30, 0xBD	; 189
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e4       	ldi	r26, 0x40	; 64
    21e0:	b0 e4       	ldi	r27, 0x40	; 64
    21e2:	80 83       	st	Z, r24
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	a2 83       	std	Z+2, r26	; 0x02
    21e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	8e 01       	movw	r16, r28
    21ec:	01 5c       	subi	r16, 0xC1	; 193
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	fe 01       	movw	r30, r28
    21f2:	ed 5b       	subi	r30, 0xBD	; 189
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	4a e7       	ldi	r20, 0x7A	; 122
    2204:	55 e4       	ldi	r21, 0x45	; 69
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	f8 01       	movw	r30, r16
    2210:	80 83       	st	Z, r24
    2212:	91 83       	std	Z+1, r25	; 0x01
    2214:	a2 83       	std	Z+2, r26	; 0x02
    2216:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2218:	fe 01       	movw	r30, r28
    221a:	ff 96       	adiw	r30, 0x3f	; 63
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e8       	ldi	r20, 0x80	; 128
    222a:	5f e3       	ldi	r21, 0x3F	; 63
    222c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2230:	88 23       	and	r24, r24
    2232:	2c f4       	brge	.+10     	; 0x223e <STM_u8Rotate+0x6ba>
		__ticks = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	9e af       	std	Y+62, r25	; 0x3e
    223a:	8d af       	std	Y+61, r24	; 0x3d
    223c:	46 c0       	rjmp	.+140    	; 0x22ca <STM_u8Rotate+0x746>
	else if (__tmp > 65535)
    223e:	fe 01       	movw	r30, r28
    2240:	ff 96       	adiw	r30, 0x3f	; 63
    2242:	60 81       	ld	r22, Z
    2244:	71 81       	ldd	r23, Z+1	; 0x01
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	3f ef       	ldi	r19, 0xFF	; 255
    224e:	4f e7       	ldi	r20, 0x7F	; 127
    2250:	57 e4       	ldi	r21, 0x47	; 71
    2252:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2256:	18 16       	cp	r1, r24
    2258:	64 f5       	brge	.+88     	; 0x22b2 <STM_u8Rotate+0x72e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225a:	fe 01       	movw	r30, r28
    225c:	ed 5b       	subi	r30, 0xBD	; 189
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	60 81       	ld	r22, Z
    2262:	71 81       	ldd	r23, Z+1	; 0x01
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e2       	ldi	r20, 0x20	; 32
    226e:	51 e4       	ldi	r21, 0x41	; 65
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9e af       	std	Y+62, r25	; 0x3e
    2286:	8d af       	std	Y+61, r24	; 0x3d
    2288:	0f c0       	rjmp	.+30     	; 0x22a8 <STM_u8Rotate+0x724>
    228a:	80 e9       	ldi	r24, 0x90	; 144
    228c:	91 e0       	ldi	r25, 0x01	; 1
    228e:	9c af       	std	Y+60, r25	; 0x3c
    2290:	8b af       	std	Y+59, r24	; 0x3b
    2292:	8b ad       	ldd	r24, Y+59	; 0x3b
    2294:	9c ad       	ldd	r25, Y+60	; 0x3c
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <STM_u8Rotate+0x712>
    229a:	9c af       	std	Y+60, r25	; 0x3c
    229c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229e:	8d ad       	ldd	r24, Y+61	; 0x3d
    22a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	9e af       	std	Y+62, r25	; 0x3e
    22a6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    22aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	69 f7       	brne	.-38     	; 0x228a <STM_u8Rotate+0x706>
    22b0:	16 c0       	rjmp	.+44     	; 0x22de <STM_u8Rotate+0x75a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b2:	fe 01       	movw	r30, r28
    22b4:	ff 96       	adiw	r30, 0x3f	; 63
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9e af       	std	Y+62, r25	; 0x3e
    22c8:	8d af       	std	Y+61, r24	; 0x3d
    22ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    22cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    22ce:	9a af       	std	Y+58, r25	; 0x3a
    22d0:	89 af       	std	Y+57, r24	; 0x39
    22d2:	89 ad       	ldd	r24, Y+57	; 0x39
    22d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <STM_u8Rotate+0x752>
    22da:	9a af       	std	Y+58, r25	; 0x3a
    22dc:	89 af       	std	Y+57, r24	; 0x39
        /*360(full roatate)/0.1758(full step degree) ) = 2048 (full step counts)*/
        uint16 local_u16steps = ((uint32)copy_u16Angle * 2048UL) / 360UL; // convert degree to number of full step
        uint16 local_u16Iter = 0;
        if (copy_STMdirection == STM_COUNTER_CLOCK_WISE)
        {
        	for (; local_u16Iter < local_u16steps; local_u16Iter++)
    22de:	de 01       	movw	r26, r28
    22e0:	af 58       	subi	r26, 0x8F	; 143
    22e2:	bf 4f       	sbci	r27, 0xFF	; 255
    22e4:	fe 01       	movw	r30, r28
    22e6:	ef 58       	subi	r30, 0x8F	; 143
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	01 96       	adiw	r24, 0x01	; 1
    22f0:	8d 93       	st	X+, r24
    22f2:	9c 93       	st	X, r25
    22f4:	fe 01       	movw	r30, r28
    22f6:	ef 58       	subi	r30, 0x8F	; 143
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	de 01       	movw	r26, r28
    22fc:	ad 58       	subi	r26, 0x8D	; 141
    22fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2300:	20 81       	ld	r18, Z
    2302:	31 81       	ldd	r19, Z+1	; 0x01
    2304:	8d 91       	ld	r24, X+
    2306:	9c 91       	ld	r25, X
    2308:	11 97       	sbiw	r26, 0x01	; 1
    230a:	28 17       	cp	r18, r24
    230c:	39 07       	cpc	r19, r25
    230e:	08 f4       	brcc	.+2      	; 0x2312 <STM_u8Rotate+0x78e>
    2310:	8e cc       	rjmp	.-1764   	; 0x1c2e <STM_u8Rotate+0xaa>
    2312:	b4 c2       	rjmp	.+1384   	; 0x287c <STM_u8Rotate+0xcf8>
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_HIGH);
				DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_LOW); // activate this pin in uln2003a
				_delay_ms(3);
			}
        }
        else if (copy_STMdirection == STM_CLOCK_WISE)
    2314:	fe 01       	movw	r30, r28
    2316:	e6 58       	subi	r30, 0x86	; 134
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	88 23       	and	r24, r24
    231e:	09 f0       	breq	.+2      	; 0x2322 <STM_u8Rotate+0x79e>
    2320:	a2 c2       	rjmp	.+1348   	; 0x2866 <STM_u8Rotate+0xce2>
    2322:	91 c2       	rjmp	.+1314   	; 0x2846 <STM_u8Rotate+0xcc2>
        {
        	for (; local_u16Iter < local_u16steps; local_u16Iter++)
			{
				if (local_u16Iter % 4 == 0)
    2324:	fe 01       	movw	r30, r28
    2326:	ef 58       	subi	r30, 0x8F	; 143
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	83 70       	andi	r24, 0x03	; 3
    2330:	90 70       	andi	r25, 0x00	; 0
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	09 f0       	breq	.+2      	; 0x2338 <STM_u8Rotate+0x7b4>
    2336:	97 c0       	rjmp	.+302    	; 0x2466 <STM_u8Rotate+0x8e2>
				{
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_HIGH);
    2338:	fe 01       	movw	r30, r28
    233a:	ea 58       	subi	r30, 0x8A	; 138
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	01 90       	ld	r0, Z+
    2340:	f0 81       	ld	r31, Z
    2342:	e0 2d       	mov	r30, r0
    2344:	80 81       	ld	r24, Z
    2346:	fe 01       	movw	r30, r28
    2348:	ea 58       	subi	r30, 0x8A	; 138
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	01 90       	ld	r0, Z+
    234e:	f0 81       	ld	r31, Z
    2350:	e0 2d       	mov	r30, r0
    2352:	94 81       	ldd	r25, Z+4	; 0x04
    2354:	69 2f       	mov	r22, r25
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
					// _delay_ms(10);
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_LOW); // activate this pin in uln2003a
    235c:	fe 01       	movw	r30, r28
    235e:	ea 58       	subi	r30, 0x8A	; 138
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	01 90       	ld	r0, Z+
    2364:	f0 81       	ld	r31, Z
    2366:	e0 2d       	mov	r30, r0
    2368:	80 81       	ld	r24, Z
    236a:	fe 01       	movw	r30, r28
    236c:	ea 58       	subi	r30, 0x8A	; 138
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	01 90       	ld	r0, Z+
    2372:	f0 81       	ld	r31, Z
    2374:	e0 2d       	mov	r30, r0
    2376:	91 81       	ldd	r25, Z+1	; 0x01
    2378:	69 2f       	mov	r22, r25
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a0 e4       	ldi	r26, 0x40	; 64
    2386:	b0 e4       	ldi	r27, 0x40	; 64
    2388:	8d ab       	std	Y+53, r24	; 0x35
    238a:	9e ab       	std	Y+54, r25	; 0x36
    238c:	af ab       	std	Y+55, r26	; 0x37
    238e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2390:	6d a9       	ldd	r22, Y+53	; 0x35
    2392:	7e a9       	ldd	r23, Y+54	; 0x36
    2394:	8f a9       	ldd	r24, Y+55	; 0x37
    2396:	98 ad       	ldd	r25, Y+56	; 0x38
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	4a e7       	ldi	r20, 0x7A	; 122
    239e:	55 e4       	ldi	r21, 0x45	; 69
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	89 ab       	std	Y+49, r24	; 0x31
    23aa:	9a ab       	std	Y+50, r25	; 0x32
    23ac:	ab ab       	std	Y+51, r26	; 0x33
    23ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23b0:	69 a9       	ldd	r22, Y+49	; 0x31
    23b2:	7a a9       	ldd	r23, Y+50	; 0x32
    23b4:	8b a9       	ldd	r24, Y+51	; 0x33
    23b6:	9c a9       	ldd	r25, Y+52	; 0x34
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	2c f4       	brge	.+10     	; 0x23d2 <STM_u8Rotate+0x84e>
		__ticks = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	98 ab       	std	Y+48, r25	; 0x30
    23ce:	8f a7       	std	Y+47, r24	; 0x2f
    23d0:	3f c0       	rjmp	.+126    	; 0x2450 <STM_u8Rotate+0x8cc>
	else if (__tmp > 65535)
    23d2:	69 a9       	ldd	r22, Y+49	; 0x31
    23d4:	7a a9       	ldd	r23, Y+50	; 0x32
    23d6:	8b a9       	ldd	r24, Y+51	; 0x33
    23d8:	9c a9       	ldd	r25, Y+52	; 0x34
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	3f ef       	ldi	r19, 0xFF	; 255
    23de:	4f e7       	ldi	r20, 0x7F	; 127
    23e0:	57 e4       	ldi	r21, 0x47	; 71
    23e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	4c f5       	brge	.+82     	; 0x243c <STM_u8Rotate+0x8b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ea:	6d a9       	ldd	r22, Y+53	; 0x35
    23ec:	7e a9       	ldd	r23, Y+54	; 0x36
    23ee:	8f a9       	ldd	r24, Y+55	; 0x37
    23f0:	98 ad       	ldd	r25, Y+56	; 0x38
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e2       	ldi	r20, 0x20	; 32
    23f8:	51 e4       	ldi	r21, 0x41	; 65
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	98 ab       	std	Y+48, r25	; 0x30
    2410:	8f a7       	std	Y+47, r24	; 0x2f
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <STM_u8Rotate+0x8ae>
    2414:	80 e9       	ldi	r24, 0x90	; 144
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	9e a7       	std	Y+46, r25	; 0x2e
    241a:	8d a7       	std	Y+45, r24	; 0x2d
    241c:	8d a5       	ldd	r24, Y+45	; 0x2d
    241e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <STM_u8Rotate+0x89c>
    2424:	9e a7       	std	Y+46, r25	; 0x2e
    2426:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2428:	8f a5       	ldd	r24, Y+47	; 0x2f
    242a:	98 a9       	ldd	r25, Y+48	; 0x30
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	98 ab       	std	Y+48, r25	; 0x30
    2430:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2432:	8f a5       	ldd	r24, Y+47	; 0x2f
    2434:	98 a9       	ldd	r25, Y+48	; 0x30
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	69 f7       	brne	.-38     	; 0x2414 <STM_u8Rotate+0x890>
    243a:	fa c1       	rjmp	.+1012   	; 0x2830 <STM_u8Rotate+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243c:	69 a9       	ldd	r22, Y+49	; 0x31
    243e:	7a a9       	ldd	r23, Y+50	; 0x32
    2440:	8b a9       	ldd	r24, Y+51	; 0x33
    2442:	9c a9       	ldd	r25, Y+52	; 0x34
    2444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	98 ab       	std	Y+48, r25	; 0x30
    244e:	8f a7       	std	Y+47, r24	; 0x2f
    2450:	8f a5       	ldd	r24, Y+47	; 0x2f
    2452:	98 a9       	ldd	r25, Y+48	; 0x30
    2454:	9c a7       	std	Y+44, r25	; 0x2c
    2456:	8b a7       	std	Y+43, r24	; 0x2b
    2458:	8b a5       	ldd	r24, Y+43	; 0x2b
    245a:	9c a5       	ldd	r25, Y+44	; 0x2c
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <STM_u8Rotate+0x8d8>
    2460:	9c a7       	std	Y+44, r25	; 0x2c
    2462:	8b a7       	std	Y+43, r24	; 0x2b
    2464:	e5 c1       	rjmp	.+970    	; 0x2830 <STM_u8Rotate+0xcac>
					_delay_ms(3);
				}
				else if (local_u16Iter % 4 == 1)
    2466:	fe 01       	movw	r30, r28
    2468:	ef 58       	subi	r30, 0x8F	; 143
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	83 70       	andi	r24, 0x03	; 3
    2472:	90 70       	andi	r25, 0x00	; 0
    2474:	81 30       	cpi	r24, 0x01	; 1
    2476:	91 05       	cpc	r25, r1
    2478:	09 f0       	breq	.+2      	; 0x247c <STM_u8Rotate+0x8f8>
    247a:	97 c0       	rjmp	.+302    	; 0x25aa <STM_u8Rotate+0xa26>
				{
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_HIGH);
    247c:	fe 01       	movw	r30, r28
    247e:	ea 58       	subi	r30, 0x8A	; 138
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	01 90       	ld	r0, Z+
    2484:	f0 81       	ld	r31, Z
    2486:	e0 2d       	mov	r30, r0
    2488:	80 81       	ld	r24, Z
    248a:	fe 01       	movw	r30, r28
    248c:	ea 58       	subi	r30, 0x8A	; 138
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	01 90       	ld	r0, Z+
    2492:	f0 81       	ld	r31, Z
    2494:	e0 2d       	mov	r30, r0
    2496:	91 81       	ldd	r25, Z+1	; 0x01
    2498:	69 2f       	mov	r22, r25
    249a:	41 e0       	ldi	r20, 0x01	; 1
    249c:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
					// _delay_ms(10);
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->pinkPin, DIO_PIN_LOW); // activate this pin in uln2003a
    24a0:	fe 01       	movw	r30, r28
    24a2:	ea 58       	subi	r30, 0x8A	; 138
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	01 90       	ld	r0, Z+
    24a8:	f0 81       	ld	r31, Z
    24aa:	e0 2d       	mov	r30, r0
    24ac:	80 81       	ld	r24, Z
    24ae:	fe 01       	movw	r30, r28
    24b0:	ea 58       	subi	r30, 0x8A	; 138
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	01 90       	ld	r0, Z+
    24b6:	f0 81       	ld	r31, Z
    24b8:	e0 2d       	mov	r30, r0
    24ba:	92 81       	ldd	r25, Z+2	; 0x02
    24bc:	69 2f       	mov	r22, r25
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 e4       	ldi	r26, 0x40	; 64
    24ca:	b0 e4       	ldi	r27, 0x40	; 64
    24cc:	8f a3       	std	Y+39, r24	; 0x27
    24ce:	98 a7       	std	Y+40, r25	; 0x28
    24d0:	a9 a7       	std	Y+41, r26	; 0x29
    24d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	6f a1       	ldd	r22, Y+39	; 0x27
    24d6:	78 a5       	ldd	r23, Y+40	; 0x28
    24d8:	89 a5       	ldd	r24, Y+41	; 0x29
    24da:	9a a5       	ldd	r25, Y+42	; 0x2a
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a e7       	ldi	r20, 0x7A	; 122
    24e2:	55 e4       	ldi	r21, 0x45	; 69
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8b a3       	std	Y+35, r24	; 0x23
    24ee:	9c a3       	std	Y+36, r25	; 0x24
    24f0:	ad a3       	std	Y+37, r26	; 0x25
    24f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24f4:	6b a1       	ldd	r22, Y+35	; 0x23
    24f6:	7c a1       	ldd	r23, Y+36	; 0x24
    24f8:	8d a1       	ldd	r24, Y+37	; 0x25
    24fa:	9e a1       	ldd	r25, Y+38	; 0x26
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <STM_u8Rotate+0x992>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9a a3       	std	Y+34, r25	; 0x22
    2512:	89 a3       	std	Y+33, r24	; 0x21
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <STM_u8Rotate+0xa10>
	else if (__tmp > 65535)
    2516:	6b a1       	ldd	r22, Y+35	; 0x23
    2518:	7c a1       	ldd	r23, Y+36	; 0x24
    251a:	8d a1       	ldd	r24, Y+37	; 0x25
    251c:	9e a1       	ldd	r25, Y+38	; 0x26
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <STM_u8Rotate+0x9fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	6f a1       	ldd	r22, Y+39	; 0x27
    2530:	78 a5       	ldd	r23, Y+40	; 0x28
    2532:	89 a5       	ldd	r24, Y+41	; 0x29
    2534:	9a a5       	ldd	r25, Y+42	; 0x2a
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9a a3       	std	Y+34, r25	; 0x22
    2554:	89 a3       	std	Y+33, r24	; 0x21
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <STM_u8Rotate+0x9f2>
    2558:	80 e9       	ldi	r24, 0x90	; 144
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	98 a3       	std	Y+32, r25	; 0x20
    255e:	8f 8f       	std	Y+31, r24	; 0x1f
    2560:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2562:	98 a1       	ldd	r25, Y+32	; 0x20
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <STM_u8Rotate+0x9e0>
    2568:	98 a3       	std	Y+32, r25	; 0x20
    256a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	89 a1       	ldd	r24, Y+33	; 0x21
    256e:	9a a1       	ldd	r25, Y+34	; 0x22
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9a a3       	std	Y+34, r25	; 0x22
    2574:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	89 a1       	ldd	r24, Y+33	; 0x21
    2578:	9a a1       	ldd	r25, Y+34	; 0x22
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <STM_u8Rotate+0x9d4>
    257e:	58 c1       	rjmp	.+688    	; 0x2830 <STM_u8Rotate+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	6b a1       	ldd	r22, Y+35	; 0x23
    2582:	7c a1       	ldd	r23, Y+36	; 0x24
    2584:	8d a1       	ldd	r24, Y+37	; 0x25
    2586:	9e a1       	ldd	r25, Y+38	; 0x26
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9a a3       	std	Y+34, r25	; 0x22
    2592:	89 a3       	std	Y+33, r24	; 0x21
    2594:	89 a1       	ldd	r24, Y+33	; 0x21
    2596:	9a a1       	ldd	r25, Y+34	; 0x22
    2598:	9e 8f       	std	Y+30, r25	; 0x1e
    259a:	8d 8f       	std	Y+29, r24	; 0x1d
    259c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    259e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <STM_u8Rotate+0xa1c>
    25a4:	9e 8f       	std	Y+30, r25	; 0x1e
    25a6:	8d 8f       	std	Y+29, r24	; 0x1d
    25a8:	43 c1       	rjmp	.+646    	; 0x2830 <STM_u8Rotate+0xcac>
					_delay_ms(3);
				}
				else if (local_u16Iter % 4 == 2)
    25aa:	fe 01       	movw	r30, r28
    25ac:	ef 58       	subi	r30, 0x8F	; 143
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	83 70       	andi	r24, 0x03	; 3
    25b6:	90 70       	andi	r25, 0x00	; 0
    25b8:	82 30       	cpi	r24, 0x02	; 2
    25ba:	91 05       	cpc	r25, r1
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <STM_u8Rotate+0xa3c>
    25be:	97 c0       	rjmp	.+302    	; 0x26ee <STM_u8Rotate+0xb6a>
				{
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->pinkPin, DIO_PIN_HIGH);
    25c0:	fe 01       	movw	r30, r28
    25c2:	ea 58       	subi	r30, 0x8A	; 138
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	01 90       	ld	r0, Z+
    25c8:	f0 81       	ld	r31, Z
    25ca:	e0 2d       	mov	r30, r0
    25cc:	80 81       	ld	r24, Z
    25ce:	fe 01       	movw	r30, r28
    25d0:	ea 58       	subi	r30, 0x8A	; 138
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	01 90       	ld	r0, Z+
    25d6:	f0 81       	ld	r31, Z
    25d8:	e0 2d       	mov	r30, r0
    25da:	92 81       	ldd	r25, Z+2	; 0x02
    25dc:	69 2f       	mov	r22, r25
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
					// _delay_ms(10);
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->yellowPin, DIO_PIN_LOW); // activate this pin in uln2003a
    25e4:	fe 01       	movw	r30, r28
    25e6:	ea 58       	subi	r30, 0x8A	; 138
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	01 90       	ld	r0, Z+
    25ec:	f0 81       	ld	r31, Z
    25ee:	e0 2d       	mov	r30, r0
    25f0:	80 81       	ld	r24, Z
    25f2:	fe 01       	movw	r30, r28
    25f4:	ea 58       	subi	r30, 0x8A	; 138
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	01 90       	ld	r0, Z+
    25fa:	f0 81       	ld	r31, Z
    25fc:	e0 2d       	mov	r30, r0
    25fe:	93 81       	ldd	r25, Z+3	; 0x03
    2600:	69 2f       	mov	r22, r25
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e4       	ldi	r26, 0x40	; 64
    260e:	b0 e4       	ldi	r27, 0x40	; 64
    2610:	89 8f       	std	Y+25, r24	; 0x19
    2612:	9a 8f       	std	Y+26, r25	; 0x1a
    2614:	ab 8f       	std	Y+27, r26	; 0x1b
    2616:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2618:	69 8d       	ldd	r22, Y+25	; 0x19
    261a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    261c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    261e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	4a e7       	ldi	r20, 0x7A	; 122
    2626:	55 e4       	ldi	r21, 0x45	; 69
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	8d 8b       	std	Y+21, r24	; 0x15
    2632:	9e 8b       	std	Y+22, r25	; 0x16
    2634:	af 8b       	std	Y+23, r26	; 0x17
    2636:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2638:	6d 89       	ldd	r22, Y+21	; 0x15
    263a:	7e 89       	ldd	r23, Y+22	; 0x16
    263c:	8f 89       	ldd	r24, Y+23	; 0x17
    263e:	98 8d       	ldd	r25, Y+24	; 0x18
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e8       	ldi	r20, 0x80	; 128
    2646:	5f e3       	ldi	r21, 0x3F	; 63
    2648:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    264c:	88 23       	and	r24, r24
    264e:	2c f4       	brge	.+10     	; 0x265a <STM_u8Rotate+0xad6>
		__ticks = 1;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9c 8b       	std	Y+20, r25	; 0x14
    2656:	8b 8b       	std	Y+19, r24	; 0x13
    2658:	3f c0       	rjmp	.+126    	; 0x26d8 <STM_u8Rotate+0xb54>
	else if (__tmp > 65535)
    265a:	6d 89       	ldd	r22, Y+21	; 0x15
    265c:	7e 89       	ldd	r23, Y+22	; 0x16
    265e:	8f 89       	ldd	r24, Y+23	; 0x17
    2660:	98 8d       	ldd	r25, Y+24	; 0x18
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	3f ef       	ldi	r19, 0xFF	; 255
    2666:	4f e7       	ldi	r20, 0x7F	; 127
    2668:	57 e4       	ldi	r21, 0x47	; 71
    266a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266e:	18 16       	cp	r1, r24
    2670:	4c f5       	brge	.+82     	; 0x26c4 <STM_u8Rotate+0xb40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2672:	69 8d       	ldd	r22, Y+25	; 0x19
    2674:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e2       	ldi	r20, 0x20	; 32
    2680:	51 e4       	ldi	r21, 0x41	; 65
    2682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	9c 8b       	std	Y+20, r25	; 0x14
    2698:	8b 8b       	std	Y+19, r24	; 0x13
    269a:	0f c0       	rjmp	.+30     	; 0x26ba <STM_u8Rotate+0xb36>
    269c:	80 e9       	ldi	r24, 0x90	; 144
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	9a 8b       	std	Y+18, r25	; 0x12
    26a2:	89 8b       	std	Y+17, r24	; 0x11
    26a4:	89 89       	ldd	r24, Y+17	; 0x11
    26a6:	9a 89       	ldd	r25, Y+18	; 0x12
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <STM_u8Rotate+0xb24>
    26ac:	9a 8b       	std	Y+18, r25	; 0x12
    26ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b0:	8b 89       	ldd	r24, Y+19	; 0x13
    26b2:	9c 89       	ldd	r25, Y+20	; 0x14
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	9c 8b       	std	Y+20, r25	; 0x14
    26b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ba:	8b 89       	ldd	r24, Y+19	; 0x13
    26bc:	9c 89       	ldd	r25, Y+20	; 0x14
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	69 f7       	brne	.-38     	; 0x269c <STM_u8Rotate+0xb18>
    26c2:	b6 c0       	rjmp	.+364    	; 0x2830 <STM_u8Rotate+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c4:	6d 89       	ldd	r22, Y+21	; 0x15
    26c6:	7e 89       	ldd	r23, Y+22	; 0x16
    26c8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ca:	98 8d       	ldd	r25, Y+24	; 0x18
    26cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9c 8b       	std	Y+20, r25	; 0x14
    26d6:	8b 8b       	std	Y+19, r24	; 0x13
    26d8:	8b 89       	ldd	r24, Y+19	; 0x13
    26da:	9c 89       	ldd	r25, Y+20	; 0x14
    26dc:	98 8b       	std	Y+16, r25	; 0x10
    26de:	8f 87       	std	Y+15, r24	; 0x0f
    26e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e2:	98 89       	ldd	r25, Y+16	; 0x10
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <STM_u8Rotate+0xb60>
    26e8:	98 8b       	std	Y+16, r25	; 0x10
    26ea:	8f 87       	std	Y+15, r24	; 0x0f
    26ec:	a1 c0       	rjmp	.+322    	; 0x2830 <STM_u8Rotate+0xcac>
					_delay_ms(3);
				}
				else if (local_u16Iter % 4 == 3)
    26ee:	fe 01       	movw	r30, r28
    26f0:	ef 58       	subi	r30, 0x8F	; 143
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	83 70       	andi	r24, 0x03	; 3
    26fa:	90 70       	andi	r25, 0x00	; 0
    26fc:	83 30       	cpi	r24, 0x03	; 3
    26fe:	91 05       	cpc	r25, r1
    2700:	09 f0       	breq	.+2      	; 0x2704 <STM_u8Rotate+0xb80>
    2702:	96 c0       	rjmp	.+300    	; 0x2830 <STM_u8Rotate+0xcac>
				{
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->yellowPin, DIO_PIN_HIGH);
    2704:	fe 01       	movw	r30, r28
    2706:	ea 58       	subi	r30, 0x8A	; 138
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	01 90       	ld	r0, Z+
    270c:	f0 81       	ld	r31, Z
    270e:	e0 2d       	mov	r30, r0
    2710:	80 81       	ld	r24, Z
    2712:	fe 01       	movw	r30, r28
    2714:	ea 58       	subi	r30, 0x8A	; 138
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	01 90       	ld	r0, Z+
    271a:	f0 81       	ld	r31, Z
    271c:	e0 2d       	mov	r30, r0
    271e:	93 81       	ldd	r25, Z+3	; 0x03
    2720:	69 2f       	mov	r22, r25
    2722:	41 e0       	ldi	r20, 0x01	; 1
    2724:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
					// _delay_ms(10);
					DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_LOW); // activate this pin in uln2003a
    2728:	fe 01       	movw	r30, r28
    272a:	ea 58       	subi	r30, 0x8A	; 138
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	01 90       	ld	r0, Z+
    2730:	f0 81       	ld	r31, Z
    2732:	e0 2d       	mov	r30, r0
    2734:	80 81       	ld	r24, Z
    2736:	fe 01       	movw	r30, r28
    2738:	ea 58       	subi	r30, 0x8A	; 138
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	01 90       	ld	r0, Z+
    273e:	f0 81       	ld	r31, Z
    2740:	e0 2d       	mov	r30, r0
    2742:	94 81       	ldd	r25, Z+4	; 0x04
    2744:	69 2f       	mov	r22, r25
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	a0 e4       	ldi	r26, 0x40	; 64
    2752:	b0 e4       	ldi	r27, 0x40	; 64
    2754:	8b 87       	std	Y+11, r24	; 0x0b
    2756:	9c 87       	std	Y+12, r25	; 0x0c
    2758:	ad 87       	std	Y+13, r26	; 0x0d
    275a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275c:	6b 85       	ldd	r22, Y+11	; 0x0b
    275e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2760:	8d 85       	ldd	r24, Y+13	; 0x0d
    2762:	9e 85       	ldd	r25, Y+14	; 0x0e
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	4a e7       	ldi	r20, 0x7A	; 122
    276a:	55 e4       	ldi	r21, 0x45	; 69
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	8f 83       	std	Y+7, r24	; 0x07
    2776:	98 87       	std	Y+8, r25	; 0x08
    2778:	a9 87       	std	Y+9, r26	; 0x09
    277a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    277c:	6f 81       	ldd	r22, Y+7	; 0x07
    277e:	78 85       	ldd	r23, Y+8	; 0x08
    2780:	89 85       	ldd	r24, Y+9	; 0x09
    2782:	9a 85       	ldd	r25, Y+10	; 0x0a
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2790:	88 23       	and	r24, r24
    2792:	2c f4       	brge	.+10     	; 0x279e <STM_u8Rotate+0xc1a>
		__ticks = 1;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	9e 83       	std	Y+6, r25	; 0x06
    279a:	8d 83       	std	Y+5, r24	; 0x05
    279c:	3f c0       	rjmp	.+126    	; 0x281c <STM_u8Rotate+0xc98>
	else if (__tmp > 65535)
    279e:	6f 81       	ldd	r22, Y+7	; 0x07
    27a0:	78 85       	ldd	r23, Y+8	; 0x08
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	3f ef       	ldi	r19, 0xFF	; 255
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	57 e4       	ldi	r21, 0x47	; 71
    27ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	4c f5       	brge	.+82     	; 0x2808 <STM_u8Rotate+0xc84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    27bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	9e 83       	std	Y+6, r25	; 0x06
    27dc:	8d 83       	std	Y+5, r24	; 0x05
    27de:	0f c0       	rjmp	.+30     	; 0x27fe <STM_u8Rotate+0xc7a>
    27e0:	80 e9       	ldi	r24, 0x90	; 144
    27e2:	91 e0       	ldi	r25, 0x01	; 1
    27e4:	9c 83       	std	Y+4, r25	; 0x04
    27e6:	8b 83       	std	Y+3, r24	; 0x03
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	9c 81       	ldd	r25, Y+4	; 0x04
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <STM_u8Rotate+0xc68>
    27f0:	9c 83       	std	Y+4, r25	; 0x04
    27f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f4:	8d 81       	ldd	r24, Y+5	; 0x05
    27f6:	9e 81       	ldd	r25, Y+6	; 0x06
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	69 f7       	brne	.-38     	; 0x27e0 <STM_u8Rotate+0xc5c>
    2806:	14 c0       	rjmp	.+40     	; 0x2830 <STM_u8Rotate+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2808:	6f 81       	ldd	r22, Y+7	; 0x07
    280a:	78 85       	ldd	r23, Y+8	; 0x08
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9e 83       	std	Y+6, r25	; 0x06
    281a:	8d 83       	std	Y+5, r24	; 0x05
    281c:	8d 81       	ldd	r24, Y+5	; 0x05
    281e:	9e 81       	ldd	r25, Y+6	; 0x06
    2820:	9a 83       	std	Y+2, r25	; 0x02
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <STM_u8Rotate+0xca4>
    282c:	9a 83       	std	Y+2, r25	; 0x02
    282e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(3);
			}
        }
        else if (copy_STMdirection == STM_CLOCK_WISE)
        {
        	for (; local_u16Iter < local_u16steps; local_u16Iter++)
    2830:	de 01       	movw	r26, r28
    2832:	af 58       	subi	r26, 0x8F	; 143
    2834:	bf 4f       	sbci	r27, 0xFF	; 255
    2836:	fe 01       	movw	r30, r28
    2838:	ef 58       	subi	r30, 0x8F	; 143
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	80 81       	ld	r24, Z
    283e:	91 81       	ldd	r25, Z+1	; 0x01
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	8d 93       	st	X+, r24
    2844:	9c 93       	st	X, r25
    2846:	fe 01       	movw	r30, r28
    2848:	ef 58       	subi	r30, 0x8F	; 143
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	de 01       	movw	r26, r28
    284e:	ad 58       	subi	r26, 0x8D	; 141
    2850:	bf 4f       	sbci	r27, 0xFF	; 255
    2852:	20 81       	ld	r18, Z
    2854:	31 81       	ldd	r19, Z+1	; 0x01
    2856:	8d 91       	ld	r24, X+
    2858:	9c 91       	ld	r25, X
    285a:	11 97       	sbiw	r26, 0x01	; 1
    285c:	28 17       	cp	r18, r24
    285e:	39 07       	cpc	r19, r25
    2860:	08 f4       	brcc	.+2      	; 0x2864 <STM_u8Rotate+0xce0>
    2862:	60 cd       	rjmp	.-1344   	; 0x2324 <STM_u8Rotate+0x7a0>
    2864:	0b c0       	rjmp	.+22     	; 0x287c <STM_u8Rotate+0xcf8>
				}
			}

        }
        else
            Local_u8ErrorType = NOK;
    2866:	fe 01       	movw	r30, r28
    2868:	eb 58       	subi	r30, 0x8B	; 139
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	80 83       	st	Z, r24
    2870:	05 c0       	rjmp	.+10     	; 0x287c <STM_u8Rotate+0xcf8>
    }
    else
        Local_u8ErrorType = NULL_PTR;
    2872:	fe 01       	movw	r30, r28
    2874:	eb 58       	subi	r30, 0x8B	; 139
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	83 e0       	ldi	r24, 0x03	; 3
    287a:	80 83       	st	Z, r24
    if (Local_u8ErrorType == OK){
    287c:	fe 01       	movw	r30, r28
    287e:	eb 58       	subi	r30, 0x8B	; 139
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	81 30       	cpi	r24, 0x01	; 1
    2886:	09 f0       	breq	.+2      	; 0x288a <STM_u8Rotate+0xd06>
    2888:	48 c0       	rjmp	.+144    	; 0x291a <STM_u8Rotate+0xd96>
    	//
//    	_delay_ms(10);
		DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->bluePin, DIO_PIN_HIGH);
    288a:	fe 01       	movw	r30, r28
    288c:	ea 58       	subi	r30, 0x8A	; 138
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	01 90       	ld	r0, Z+
    2892:	f0 81       	ld	r31, Z
    2894:	e0 2d       	mov	r30, r0
    2896:	80 81       	ld	r24, Z
    2898:	fe 01       	movw	r30, r28
    289a:	ea 58       	subi	r30, 0x8A	; 138
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	01 90       	ld	r0, Z+
    28a0:	f0 81       	ld	r31, Z
    28a2:	e0 2d       	mov	r30, r0
    28a4:	91 81       	ldd	r25, Z+1	; 0x01
    28a6:	69 2f       	mov	r22, r25
    28a8:	41 e0       	ldi	r20, 0x01	; 1
    28aa:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
		DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->pinkPin, DIO_PIN_HIGH);
    28ae:	fe 01       	movw	r30, r28
    28b0:	ea 58       	subi	r30, 0x8A	; 138
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	01 90       	ld	r0, Z+
    28b6:	f0 81       	ld	r31, Z
    28b8:	e0 2d       	mov	r30, r0
    28ba:	80 81       	ld	r24, Z
    28bc:	fe 01       	movw	r30, r28
    28be:	ea 58       	subi	r30, 0x8A	; 138
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	01 90       	ld	r0, Z+
    28c4:	f0 81       	ld	r31, Z
    28c6:	e0 2d       	mov	r30, r0
    28c8:	92 81       	ldd	r25, Z+2	; 0x02
    28ca:	69 2f       	mov	r22, r25
    28cc:	41 e0       	ldi	r20, 0x01	; 1
    28ce:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
		DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->yellowPin, DIO_PIN_HIGH);
    28d2:	fe 01       	movw	r30, r28
    28d4:	ea 58       	subi	r30, 0x8A	; 138
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	01 90       	ld	r0, Z+
    28da:	f0 81       	ld	r31, Z
    28dc:	e0 2d       	mov	r30, r0
    28de:	80 81       	ld	r24, Z
    28e0:	fe 01       	movw	r30, r28
    28e2:	ea 58       	subi	r30, 0x8A	; 138
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	01 90       	ld	r0, Z+
    28e8:	f0 81       	ld	r31, Z
    28ea:	e0 2d       	mov	r30, r0
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	69 2f       	mov	r22, r25
    28f0:	41 e0       	ldi	r20, 0x01	; 1
    28f2:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
		DIO_u8_SetPinVal(referance_stepper->port, referance_stepper->orangePin, DIO_PIN_HIGH);
    28f6:	fe 01       	movw	r30, r28
    28f8:	ea 58       	subi	r30, 0x8A	; 138
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	01 90       	ld	r0, Z+
    28fe:	f0 81       	ld	r31, Z
    2900:	e0 2d       	mov	r30, r0
    2902:	80 81       	ld	r24, Z
    2904:	fe 01       	movw	r30, r28
    2906:	ea 58       	subi	r30, 0x8A	; 138
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	01 90       	ld	r0, Z+
    290c:	f0 81       	ld	r31, Z
    290e:	e0 2d       	mov	r30, r0
    2910:	94 81       	ldd	r25, Z+4	; 0x04
    2912:	69 2f       	mov	r22, r25
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>

    }
    return Local_u8ErrorType;
    291a:	fe 01       	movw	r30, r28
    291c:	eb 58       	subi	r30, 0x8B	; 139
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	80 81       	ld	r24, Z
}
    2922:	c6 58       	subi	r28, 0x86	; 134
    2924:	df 4f       	sbci	r29, 0xFF	; 255
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	1f 91       	pop	r17
    2936:	0f 91       	pop	r16
    2938:	08 95       	ret

0000293a <SWITCH_u8GetState>:
#include "../../libraries/ErrType.h"
#include "../../0-MCAL/1-DIO/DIO_interface.h"

#include "SWITCH_interface.h"

uint8 SWITCH_u8GetState(SWITCH_Config_t* copy_Switch_Object){
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	00 d0       	rcall	.+0      	; 0x2940 <SWITCH_u8GetState+0x6>
    2940:	00 d0       	rcall	.+0      	; 0x2942 <SWITCH_u8GetState+0x8>
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	9c 83       	std	Y+4, r25	; 0x04
    2948:	8b 83       	std	Y+3, r24	; 0x03
    uint8 Local_u8ErrorState = OK;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	89 83       	std	Y+1, r24	; 0x01
    uint8 Local_u8SwitchState=1;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	8a 83       	std	Y+2, r24	; 0x02
//    uint8 Local_u8SwitchStatePrev=0;
    if(copy_Switch_Object != NULL){
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	9c 81       	ldd	r25, Y+4	; 0x04
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	09 f4       	brne	.+2      	; 0x295c <SWITCH_u8GetState+0x22>
    295a:	3f c0       	rjmp	.+126    	; 0x29da <SWITCH_u8GetState+0xa0>
        if(copy_Switch_Object->PullType== SWITCH_PULL_UP){
    295c:	eb 81       	ldd	r30, Y+3	; 0x03
    295e:	fc 81       	ldd	r31, Y+4	; 0x04
    2960:	80 81       	ld	r24, Z
    2962:	88 23       	and	r24, r24
    2964:	c9 f4       	brne	.+50     	; 0x2998 <SWITCH_u8GetState+0x5e>
        	DIO_u8_GetPinVal(copy_Switch_Object->port,copy_Switch_Object->Pin,&Local_u8SwitchState);
    2966:	eb 81       	ldd	r30, Y+3	; 0x03
    2968:	fc 81       	ldd	r31, Y+4	; 0x04
    296a:	81 81       	ldd	r24, Z+1	; 0x01
    296c:	eb 81       	ldd	r30, Y+3	; 0x03
    296e:	fc 81       	ldd	r31, Y+4	; 0x04
    2970:	92 81       	ldd	r25, Z+2	; 0x02
    2972:	9e 01       	movw	r18, r28
    2974:	2e 5f       	subi	r18, 0xFE	; 254
    2976:	3f 4f       	sbci	r19, 0xFF	; 255
    2978:	69 2f       	mov	r22, r25
    297a:	a9 01       	movw	r20, r18
    297c:	0e 94 92 25 	call	0x4b24	; 0x4b24 <DIO_u8_GetPinVal>
            if(Local_u8SwitchState == 0)
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	88 23       	and	r24, r24
    2984:	29 f4       	brne	.+10     	; 0x2990 <SWITCH_u8GetState+0x56>
            	copy_Switch_Object->state =SWITCH_PRESSED;
    2986:	eb 81       	ldd	r30, Y+3	; 0x03
    2988:	fc 81       	ldd	r31, Y+4	; 0x04
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	83 83       	std	Z+3, r24	; 0x03
    298e:	27 c0       	rjmp	.+78     	; 0x29de <SWITCH_u8GetState+0xa4>
            else
            	copy_Switch_Object->state =SWITCH_RELEASED;
    2990:	eb 81       	ldd	r30, Y+3	; 0x03
    2992:	fc 81       	ldd	r31, Y+4	; 0x04
    2994:	13 82       	std	Z+3, r1	; 0x03
    2996:	23 c0       	rjmp	.+70     	; 0x29de <SWITCH_u8GetState+0xa4>

        }else if(copy_Switch_Object->PullType== SWITCH_PULL_UP){
    2998:	eb 81       	ldd	r30, Y+3	; 0x03
    299a:	fc 81       	ldd	r31, Y+4	; 0x04
    299c:	80 81       	ld	r24, Z
    299e:	88 23       	and	r24, r24
    29a0:	c9 f4       	brne	.+50     	; 0x29d4 <SWITCH_u8GetState+0x9a>
            DIO_u8_GetPinVal(copy_Switch_Object->port,copy_Switch_Object->Pin,&Local_u8SwitchState);
    29a2:	eb 81       	ldd	r30, Y+3	; 0x03
    29a4:	fc 81       	ldd	r31, Y+4	; 0x04
    29a6:	81 81       	ldd	r24, Z+1	; 0x01
    29a8:	eb 81       	ldd	r30, Y+3	; 0x03
    29aa:	fc 81       	ldd	r31, Y+4	; 0x04
    29ac:	92 81       	ldd	r25, Z+2	; 0x02
    29ae:	9e 01       	movw	r18, r28
    29b0:	2e 5f       	subi	r18, 0xFE	; 254
    29b2:	3f 4f       	sbci	r19, 0xFF	; 255
    29b4:	69 2f       	mov	r22, r25
    29b6:	a9 01       	movw	r20, r18
    29b8:	0e 94 92 25 	call	0x4b24	; 0x4b24 <DIO_u8_GetPinVal>
            if(Local_u8SwitchState == 1)
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	29 f4       	brne	.+10     	; 0x29cc <SWITCH_u8GetState+0x92>
            	copy_Switch_Object->state =SWITCH_PRESSED;
    29c2:	eb 81       	ldd	r30, Y+3	; 0x03
    29c4:	fc 81       	ldd	r31, Y+4	; 0x04
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	83 83       	std	Z+3, r24	; 0x03
    29ca:	09 c0       	rjmp	.+18     	; 0x29de <SWITCH_u8GetState+0xa4>
            else
            	copy_Switch_Object->state =SWITCH_RELEASED;
    29cc:	eb 81       	ldd	r30, Y+3	; 0x03
    29ce:	fc 81       	ldd	r31, Y+4	; 0x04
    29d0:	13 82       	std	Z+3, r1	; 0x03
    29d2:	05 c0       	rjmp	.+10     	; 0x29de <SWITCH_u8GetState+0xa4>
        }else{
          Local_u8ErrorState = NOK;
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <SWITCH_u8GetState+0xa4>

        }


    }else
        Local_u8ErrorState = NULL_PTR;
    29da:	83 e0       	ldi	r24, 0x03	; 3
    29dc:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    29de:	89 81       	ldd	r24, Y+1	; 0x01
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <_SSD_VoidcustomPortValue>:

#include "SSD_interface.h"
#include "SSD_prv.h"

void _SSD_VoidcustomPortValue(DIO_port_t copy_Port, DIO_pin_t copy_Pin, uint8 copy_u8PortVal)
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <_SSD_VoidcustomPortValue+0x6>
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <_SSD_VoidcustomPortValue+0x8>
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	8a 83       	std	Y+2, r24	; 0x02
    29fc:	6b 83       	std	Y+3, r22	; 0x03
    29fe:	4c 83       	std	Y+4, r20	; 0x04
    uint8 Local_u8PortValue;
    DIO_u8_GetPinVal(copy_Port, copy_Pin, &Local_u8PortValue);
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	6b 81       	ldd	r22, Y+3	; 0x03
    2a04:	9e 01       	movw	r18, r28
    2a06:	2f 5f       	subi	r18, 0xFF	; 255
    2a08:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0a:	a9 01       	movw	r20, r18
    2a0c:	0e 94 92 25 	call	0x4b24	; 0x4b24 <DIO_u8_GetPinVal>
    Local_u8PortValue |= copy_u8PortVal;
    2a10:	99 81       	ldd	r25, Y+1	; 0x01
    2a12:	8c 81       	ldd	r24, Y+4	; 0x04
    2a14:	89 2b       	or	r24, r25
    2a16:	89 83       	std	Y+1, r24	; 0x01

    DIO_u8_SetPortVal(copy_Port, Local_u8PortValue);
    2a18:	99 81       	ldd	r25, Y+1	; 0x01
    2a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1c:	69 2f       	mov	r22, r25
    2a1e:	0e 94 49 25 	call	0x4a92	; 0x4a92 <DIO_u8_SetPortVal>
}
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <SSD_u8SetNumber>:

uint8 SSD_u8SetNumber(const SSD_Config_t *copy_SSD_Object, uint8 copy_u8Number)
{
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <SSD_u8SetNumber+0x6>
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <SSD_u8SetNumber+0x8>
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	9b 83       	std	Y+3, r25	; 0x03
    2a3e:	8a 83       	std	Y+2, r24	; 0x02
    2a40:	6c 83       	std	Y+4, r22	; 0x04
    uint8 Local_u8ErrorState = OK;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	89 83       	std	Y+1, r24	; 0x01
    const static uint8 SSD_u8p_NumArr[10] = {0x7E, 0x0C, 0xB6, 0x9E, 0xCC, 0xDA, 0xFA, 0x0E, 0xFE, 0xDE};

    if (copy_SSD_Object != NULL)
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <SSD_u8SetNumber+0x20>
    2a4e:	6e c0       	rjmp	.+220    	; 0x2b2c <SSD_u8SetNumber+0xfc>
    {

        if (copy_SSD_Object->type == SSD_ComCathod)
    2a50:	ea 81       	ldd	r30, Y+2	; 0x02
    2a52:	fb 81       	ldd	r31, Y+3	; 0x03
    2a54:	80 81       	ld	r24, Z
    2a56:	88 23       	and	r24, r24
    2a58:	79 f5       	brne	.+94     	; 0x2ab8 <SSD_u8SetNumber+0x88>
        {

            if (copy_SSD_Object->LEDAPin == 0)
    2a5a:	ea 81       	ldd	r30, Y+2	; 0x02
    2a5c:	fb 81       	ldd	r31, Y+3	; 0x03
    2a5e:	82 81       	ldd	r24, Z+2	; 0x02
    2a60:	88 23       	and	r24, r24
    2a62:	91 f4       	brne	.+36     	; 0x2a88 <SSD_u8SetNumber+0x58>
            {
                // set pins from bin0->bin6 value to high depends on the given number
                _SSD_VoidcustomPortValue(copy_SSD_Object->port, 7, (SSD_u8p_NumArr[copy_u8Number]) >> 1);
    2a64:	ea 81       	ldd	r30, Y+2	; 0x02
    2a66:	fb 81       	ldd	r31, Y+3	; 0x03
    2a68:	21 81       	ldd	r18, Z+1	; 0x01
    2a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6c:	88 2f       	mov	r24, r24
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	fc 01       	movw	r30, r24
    2a72:	ef 54       	subi	r30, 0x4F	; 79
    2a74:	fe 4f       	sbci	r31, 0xFE	; 254
    2a76:	80 81       	ld	r24, Z
    2a78:	98 2f       	mov	r25, r24
    2a7a:	96 95       	lsr	r25
    2a7c:	82 2f       	mov	r24, r18
    2a7e:	67 e0       	ldi	r22, 0x07	; 7
    2a80:	49 2f       	mov	r20, r25
    2a82:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_SSD_VoidcustomPortValue>
    2a86:	54 c0       	rjmp	.+168    	; 0x2b30 <SSD_u8SetNumber+0x100>
            }
            else if (copy_SSD_Object->LEDAPin == 1)
    2a88:	ea 81       	ldd	r30, Y+2	; 0x02
    2a8a:	fb 81       	ldd	r31, Y+3	; 0x03
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	81 30       	cpi	r24, 0x01	; 1
    2a90:	81 f4       	brne	.+32     	; 0x2ab2 <SSD_u8SetNumber+0x82>
            {
                // set pins from bin1->bin7 value to high depends on the given number
                _SSD_VoidcustomPortValue(copy_SSD_Object->port, 0, SSD_u8p_NumArr[copy_u8Number]);
    2a92:	ea 81       	ldd	r30, Y+2	; 0x02
    2a94:	fb 81       	ldd	r31, Y+3	; 0x03
    2a96:	21 81       	ldd	r18, Z+1	; 0x01
    2a98:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	ef 54       	subi	r30, 0x4F	; 79
    2aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa4:	90 81       	ld	r25, Z
    2aa6:	82 2f       	mov	r24, r18
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	49 2f       	mov	r20, r25
    2aac:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_SSD_VoidcustomPortValue>
    2ab0:	3f c0       	rjmp	.+126    	; 0x2b30 <SSD_u8SetNumber+0x100>
            }
            else
                Local_u8ErrorState = NOK;
    2ab2:	82 e0       	ldi	r24, 0x02	; 2
    2ab4:	89 83       	std	Y+1, r24	; 0x01
    2ab6:	3c c0       	rjmp	.+120    	; 0x2b30 <SSD_u8SetNumber+0x100>
        }
        else if (copy_SSD_Object->type == SSD_ComAnod)
    2ab8:	ea 81       	ldd	r30, Y+2	; 0x02
    2aba:	fb 81       	ldd	r31, Y+3	; 0x03
    2abc:	80 81       	ld	r24, Z
    2abe:	81 30       	cpi	r24, 0x01	; 1
    2ac0:	91 f5       	brne	.+100    	; 0x2b26 <SSD_u8SetNumber+0xf6>
        {
            if (copy_SSD_Object->LEDAPin == 0)
    2ac2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ac4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	88 23       	and	r24, r24
    2aca:	99 f4       	brne	.+38     	; 0x2af2 <SSD_u8SetNumber+0xc2>
            {
                // set pins from bin0->bin6 value to high depends on the given number
                _SSD_VoidcustomPortValue(copy_SSD_Object->port, 7, ~((SSD_u8p_NumArr[copy_u8Number]) >> 1));
    2acc:	ea 81       	ldd	r30, Y+2	; 0x02
    2ace:	fb 81       	ldd	r31, Y+3	; 0x03
    2ad0:	21 81       	ldd	r18, Z+1	; 0x01
    2ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad4:	88 2f       	mov	r24, r24
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	fc 01       	movw	r30, r24
    2ada:	ef 54       	subi	r30, 0x4F	; 79
    2adc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ade:	80 81       	ld	r24, Z
    2ae0:	86 95       	lsr	r24
    2ae2:	98 2f       	mov	r25, r24
    2ae4:	90 95       	com	r25
    2ae6:	82 2f       	mov	r24, r18
    2ae8:	67 e0       	ldi	r22, 0x07	; 7
    2aea:	49 2f       	mov	r20, r25
    2aec:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_SSD_VoidcustomPortValue>
    2af0:	1f c0       	rjmp	.+62     	; 0x2b30 <SSD_u8SetNumber+0x100>
            }
            else if (copy_SSD_Object->LEDAPin == 1)
    2af2:	ea 81       	ldd	r30, Y+2	; 0x02
    2af4:	fb 81       	ldd	r31, Y+3	; 0x03
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	81 30       	cpi	r24, 0x01	; 1
    2afa:	91 f4       	brne	.+36     	; 0x2b20 <SSD_u8SetNumber+0xf0>
            {
                // set pins from bin1->bin7 value to high depends on the given number
                _SSD_VoidcustomPortValue(copy_SSD_Object->port, 7, ~(SSD_u8p_NumArr[copy_u8Number]));
    2afc:	ea 81       	ldd	r30, Y+2	; 0x02
    2afe:	fb 81       	ldd	r31, Y+3	; 0x03
    2b00:	21 81       	ldd	r18, Z+1	; 0x01
    2b02:	8c 81       	ldd	r24, Y+4	; 0x04
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	fc 01       	movw	r30, r24
    2b0a:	ef 54       	subi	r30, 0x4F	; 79
    2b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0e:	80 81       	ld	r24, Z
    2b10:	98 2f       	mov	r25, r24
    2b12:	90 95       	com	r25
    2b14:	82 2f       	mov	r24, r18
    2b16:	67 e0       	ldi	r22, 0x07	; 7
    2b18:	49 2f       	mov	r20, r25
    2b1a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_SSD_VoidcustomPortValue>
    2b1e:	08 c0       	rjmp	.+16     	; 0x2b30 <SSD_u8SetNumber+0x100>
            }
            else
                Local_u8ErrorState = NOK;
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	05 c0       	rjmp	.+10     	; 0x2b30 <SSD_u8SetNumber+0x100>
        }
        else
            Local_u8ErrorState = NOK;
    2b26:	82 e0       	ldi	r24, 0x02	; 2
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <SSD_u8SetNumber+0x100>
    }
    else
        Local_u8ErrorState = NULL_PTR;
    2b2c:	83 e0       	ldi	r24, 0x03	; 3
    2b2e:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8ErrorState;
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <SSD_u8Enable>:
uint8 SSD_u8Enable(const SSD_Config_t *copy_SSD_Object)
{
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	00 d0       	rcall	.+0      	; 0x2b46 <SSD_u8Enable+0x6>
    2b46:	0f 92       	push	r0
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
    2b4c:	9b 83       	std	Y+3, r25	; 0x03
    2b4e:	8a 83       	std	Y+2, r24	; 0x02

    uint8 Local_u8ErrorState = OK;
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	89 83       	std	Y+1, r24	; 0x01

    if (copy_SSD_Object != NULL)
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	9b 81       	ldd	r25, Y+3	; 0x03
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	99 f1       	breq	.+102    	; 0x2bc2 <SSD_u8Enable+0x82>
    {
        if (copy_SSD_Object->type == SSD_ETA_KIT)
    2b5c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b5e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b60:	80 81       	ld	r24, Z
    2b62:	82 30       	cpi	r24, 0x02	; 2
    2b64:	59 f4       	brne	.+22     	; 0x2b7c <SSD_u8Enable+0x3c>
        {
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_HIGH);
    2b66:	ea 81       	ldd	r30, Y+2	; 0x02
    2b68:	fb 81       	ldd	r31, Y+3	; 0x03
    2b6a:	83 81       	ldd	r24, Z+3	; 0x03
    2b6c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b6e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b70:	94 81       	ldd	r25, Z+4	; 0x04
    2b72:	69 2f       	mov	r22, r25
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2b7a:	25 c0       	rjmp	.+74     	; 0x2bc6 <SSD_u8Enable+0x86>
        }
        else if(copy_SSD_Object->type == SSD_ComCathod){
    2b7c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b80:	80 81       	ld	r24, Z
    2b82:	88 23       	and	r24, r24
    2b84:	59 f4       	brne	.+22     	; 0x2b9c <SSD_u8Enable+0x5c>
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_LOW);
    2b86:	ea 81       	ldd	r30, Y+2	; 0x02
    2b88:	fb 81       	ldd	r31, Y+3	; 0x03
    2b8a:	83 81       	ldd	r24, Z+3	; 0x03
    2b8c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b8e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b90:	94 81       	ldd	r25, Z+4	; 0x04
    2b92:	69 2f       	mov	r22, r25
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2b9a:	15 c0       	rjmp	.+42     	; 0x2bc6 <SSD_u8Enable+0x86>
        }else if(copy_SSD_Object->type == SSD_ComAnod){
    2b9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2ba0:	80 81       	ld	r24, Z
    2ba2:	81 30       	cpi	r24, 0x01	; 1
    2ba4:	59 f4       	brne	.+22     	; 0x2bbc <SSD_u8Enable+0x7c>
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_HIGH);
    2ba6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ba8:	fb 81       	ldd	r31, Y+3	; 0x03
    2baa:	83 81       	ldd	r24, Z+3	; 0x03
    2bac:	ea 81       	ldd	r30, Y+2	; 0x02
    2bae:	fb 81       	ldd	r31, Y+3	; 0x03
    2bb0:	94 81       	ldd	r25, Z+4	; 0x04
    2bb2:	69 2f       	mov	r22, r25
    2bb4:	41 e0       	ldi	r20, 0x01	; 1
    2bb6:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2bba:	05 c0       	rjmp	.+10     	; 0x2bc6 <SSD_u8Enable+0x86>
        }else
            Local_u8ErrorState = NOK;
    2bbc:	82 e0       	ldi	r24, 0x02	; 2
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <SSD_u8Enable+0x86>
    }
    else
        Local_u8ErrorState = NULL_PTR;
    2bc2:	83 e0       	ldi	r24, 0x03	; 3
    2bc4:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8ErrorState;
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <SSD_u8Disable>:
uint8 SSD_u8Disable(const SSD_Config_t *copy_SSD_Object)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <SSD_u8Disable+0x6>
    2bda:	0f 92       	push	r0
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	9b 83       	std	Y+3, r25	; 0x03
    2be2:	8a 83       	std	Y+2, r24	; 0x02
    uint8 Local_u8ErrorState = OK;
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	89 83       	std	Y+1, r24	; 0x01

    if (copy_SSD_Object != NULL)
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	9b 81       	ldd	r25, Y+3	; 0x03
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	99 f1       	breq	.+102    	; 0x2c56 <SSD_u8Disable+0x82>
    {
        if (copy_SSD_Object->type == SSD_ETA_KIT)
    2bf0:	ea 81       	ldd	r30, Y+2	; 0x02
    2bf2:	fb 81       	ldd	r31, Y+3	; 0x03
    2bf4:	80 81       	ld	r24, Z
    2bf6:	82 30       	cpi	r24, 0x02	; 2
    2bf8:	59 f4       	brne	.+22     	; 0x2c10 <SSD_u8Disable+0x3c>
        {
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_LOW);
    2bfa:	ea 81       	ldd	r30, Y+2	; 0x02
    2bfc:	fb 81       	ldd	r31, Y+3	; 0x03
    2bfe:	83 81       	ldd	r24, Z+3	; 0x03
    2c00:	ea 81       	ldd	r30, Y+2	; 0x02
    2c02:	fb 81       	ldd	r31, Y+3	; 0x03
    2c04:	94 81       	ldd	r25, Z+4	; 0x04
    2c06:	69 2f       	mov	r22, r25
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2c0e:	25 c0       	rjmp	.+74     	; 0x2c5a <SSD_u8Disable+0x86>
        }
        else if(copy_SSD_Object->type == SSD_ComCathod){
    2c10:	ea 81       	ldd	r30, Y+2	; 0x02
    2c12:	fb 81       	ldd	r31, Y+3	; 0x03
    2c14:	80 81       	ld	r24, Z
    2c16:	88 23       	and	r24, r24
    2c18:	59 f4       	brne	.+22     	; 0x2c30 <SSD_u8Disable+0x5c>
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_HIGH);
    2c1a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c1c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c1e:	83 81       	ldd	r24, Z+3	; 0x03
    2c20:	ea 81       	ldd	r30, Y+2	; 0x02
    2c22:	fb 81       	ldd	r31, Y+3	; 0x03
    2c24:	94 81       	ldd	r25, Z+4	; 0x04
    2c26:	69 2f       	mov	r22, r25
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2c2e:	15 c0       	rjmp	.+42     	; 0x2c5a <SSD_u8Disable+0x86>
        }else if(copy_SSD_Object->type == SSD_ComAnod){
    2c30:	ea 81       	ldd	r30, Y+2	; 0x02
    2c32:	fb 81       	ldd	r31, Y+3	; 0x03
    2c34:	80 81       	ld	r24, Z
    2c36:	81 30       	cpi	r24, 0x01	; 1
    2c38:	59 f4       	brne	.+22     	; 0x2c50 <SSD_u8Disable+0x7c>
            DIO_u8_SetPinVal(copy_SSD_Object->enable_port, copy_SSD_Object->enable_Pin, DIO_PIN_LOW);
    2c3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c3e:	83 81       	ldd	r24, Z+3	; 0x03
    2c40:	ea 81       	ldd	r30, Y+2	; 0x02
    2c42:	fb 81       	ldd	r31, Y+3	; 0x03
    2c44:	94 81       	ldd	r25, Z+4	; 0x04
    2c46:	69 2f       	mov	r22, r25
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2c4e:	05 c0       	rjmp	.+10     	; 0x2c5a <SSD_u8Disable+0x86>
        }else
            Local_u8ErrorState = NOK;
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	89 83       	std	Y+1, r24	; 0x01
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <SSD_u8Disable+0x86>
    }
    else
        Local_u8ErrorState = NULL_PTR;
    2c56:	83 e0       	ldi	r24, 0x03	; 3
    2c58:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8ErrorState;
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <LM_u8GetTemp>:
#include "../../libraries/MAP.h"
#include "../../0-MCAL/1-DIO/DIO_interface.h"
#include "../../0-MCAL/5-ADC/ADC_interface.h"
#include "LM_interface.h"

uint8 LM_u8GetTemp(LM_Config_t* refrance_LM){
    2c68:	af 92       	push	r10
    2c6a:	bf 92       	push	r11
    2c6c:	cf 92       	push	r12
    2c6e:	df 92       	push	r13
    2c70:	ef 92       	push	r14
    2c72:	ff 92       	push	r15
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	27 97       	sbiw	r28, 0x07	; 7
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	9f 83       	std	Y+7, r25	; 0x07
    2c8e:	8e 83       	std	Y+6, r24	; 0x06
    uint8 Local_u8ErrorState = OK;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	8b 83       	std	Y+3, r24	; 0x03

    if(refrance_LM != NULL ){
    2c94:	8e 81       	ldd	r24, Y+6	; 0x06
    2c96:	9f 81       	ldd	r25, Y+7	; 0x07
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <LM_u8GetTemp+0x36>
    2c9c:	40 c0       	rjmp	.+128    	; 0x2d1e <LM_u8GetTemp+0xb6>
    	uint16 Local_u16Reading ;
		ADC_u8StartConverstionSync(refrance_LM->AnalogChannel_DigitalSignal,&Local_u16Reading);
    2c9e:	ee 81       	ldd	r30, Y+6	; 0x06
    2ca0:	ff 81       	ldd	r31, Y+7	; 0x07
    2ca2:	80 81       	ld	r24, Z
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	9e 01       	movw	r18, r28
    2ca8:	2c 5f       	subi	r18, 0xFC	; 252
    2caa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cac:	b9 01       	movw	r22, r18
    2cae:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <ADC_u8StartConverstionSync>
		uint16 Local_u16VoltageReading = (uint16)MAP(0u,1023ul,0u,refrance_LM->max_volt,(sint32)Local_u16Reading);
    2cb2:	ee 81       	ldd	r30, Y+6	; 0x06
    2cb4:	ff 81       	ldd	r31, Y+7	; 0x07
    2cb6:	82 81       	ldd	r24, Z+2	; 0x02
    2cb8:	93 81       	ldd	r25, Z+3	; 0x03
    2cba:	5c 01       	movw	r10, r24
    2cbc:	cc 24       	eor	r12, r12
    2cbe:	dd 24       	eor	r13, r13
    2cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc4:	cc 01       	movw	r24, r24
    2cc6:	a0 e0       	ldi	r26, 0x00	; 0
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	00 d0       	rcall	.+0      	; 0x2ccc <LM_u8GetTemp+0x64>
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <LM_u8GetTemp+0x66>
    2cce:	ed b7       	in	r30, 0x3d	; 61
    2cd0:	fe b7       	in	r31, 0x3e	; 62
    2cd2:	31 96       	adiw	r30, 0x01	; 1
    2cd4:	80 83       	st	Z, r24
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	a2 83       	std	Z+2, r26	; 0x02
    2cda:	b3 83       	std	Z+3, r27	; 0x03
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	2f ef       	ldi	r18, 0xFF	; 255
    2ce6:	33 e0       	ldi	r19, 0x03	; 3
    2ce8:	40 e0       	ldi	r20, 0x00	; 0
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	ee 24       	eor	r14, r14
    2cee:	ff 24       	eor	r15, r15
    2cf0:	87 01       	movw	r16, r14
    2cf2:	0e 94 17 07 	call	0xe2e	; 0xe2e <MAP>
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01

        //return temperature in Celsius
        refrance_LM->Temprature =  Local_u16VoltageReading/10 ;
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	2a e0       	ldi	r18, 0x0A	; 10
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	b9 01       	movw	r22, r18
    2d10:	0e 94 d6 27 	call	0x4fac	; 0x4fac <__udivmodhi4>
    2d14:	cb 01       	movw	r24, r22
    2d16:	ee 81       	ldd	r30, Y+6	; 0x06
    2d18:	ff 81       	ldd	r31, Y+7	; 0x07
    2d1a:	84 83       	std	Z+4, r24	; 0x04
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <LM_u8GetTemp+0xba>
    }else{
        Local_u8ErrorState = NULL_PTR;
    2d1e:	83 e0       	ldi	r24, 0x03	; 3
    2d20:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local_u8ErrorState;
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2d24:	27 96       	adiw	r28, 0x07	; 7
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	1f 91       	pop	r17
    2d36:	0f 91       	pop	r16
    2d38:	ff 90       	pop	r15
    2d3a:	ef 90       	pop	r14
    2d3c:	df 90       	pop	r13
    2d3e:	cf 90       	pop	r12
    2d40:	bf 90       	pop	r11
    2d42:	af 90       	pop	r10
    2d44:	08 95       	ret

00002d46 <LM_u8GetTempFromDigSignal>:

uint8 LM_u8GetTempFromDigSignal(LM_Config_t* refrance_LM){
    2d46:	af 92       	push	r10
    2d48:	bf 92       	push	r11
    2d4a:	cf 92       	push	r12
    2d4c:	df 92       	push	r13
    2d4e:	ef 92       	push	r14
    2d50:	ff 92       	push	r15
    2d52:	0f 93       	push	r16
    2d54:	1f 93       	push	r17
    2d56:	df 93       	push	r29
    2d58:	cf 93       	push	r28
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <LM_u8GetTempFromDigSignal+0x16>
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <LM_u8GetTempFromDigSignal+0x18>
    2d5e:	0f 92       	push	r0
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	9d 83       	std	Y+5, r25	; 0x05
    2d66:	8c 83       	std	Y+4, r24	; 0x04
    uint8 Local_u8ErrorState = OK;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	8b 83       	std	Y+3, r24	; 0x03

    if(refrance_LM != NULL ){
    2d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	c1 f1       	breq	.+112    	; 0x2de4 <LM_u8GetTempFromDigSignal+0x9e>
		uint16 Local_u16VoltageReading = (uint16)MAP(0u,1023ul,0u,refrance_LM->max_volt,(sint32)refrance_LM->AnalogChannel_DigitalSignal);
    2d74:	ec 81       	ldd	r30, Y+4	; 0x04
    2d76:	fd 81       	ldd	r31, Y+5	; 0x05
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	5c 01       	movw	r10, r24
    2d7e:	cc 24       	eor	r12, r12
    2d80:	dd 24       	eor	r13, r13
    2d82:	ec 81       	ldd	r30, Y+4	; 0x04
    2d84:	fd 81       	ldd	r31, Y+5	; 0x05
    2d86:	80 81       	ld	r24, Z
    2d88:	91 81       	ldd	r25, Z+1	; 0x01
    2d8a:	cc 01       	movw	r24, r24
    2d8c:	a0 e0       	ldi	r26, 0x00	; 0
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <LM_u8GetTempFromDigSignal+0x4c>
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <LM_u8GetTempFromDigSignal+0x4e>
    2d94:	ed b7       	in	r30, 0x3d	; 61
    2d96:	fe b7       	in	r31, 0x3e	; 62
    2d98:	31 96       	adiw	r30, 0x01	; 1
    2d9a:	80 83       	st	Z, r24
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	a2 83       	std	Z+2, r26	; 0x02
    2da0:	b3 83       	std	Z+3, r27	; 0x03
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	2f ef       	ldi	r18, 0xFF	; 255
    2dac:	33 e0       	ldi	r19, 0x03	; 3
    2dae:	40 e0       	ldi	r20, 0x00	; 0
    2db0:	50 e0       	ldi	r21, 0x00	; 0
    2db2:	ee 24       	eor	r14, r14
    2db4:	ff 24       	eor	r15, r15
    2db6:	87 01       	movw	r16, r14
    2db8:	0e 94 17 07 	call	0xe2e	; 0xe2e <MAP>
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9a 83       	std	Y+2, r25	; 0x02
    2dca:	89 83       	std	Y+1, r24	; 0x01

        //return temperature in Celsius
        refrance_LM->Temprature =  Local_u16VoltageReading/10 ;
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd0:	2a e0       	ldi	r18, 0x0A	; 10
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	b9 01       	movw	r22, r18
    2dd6:	0e 94 d6 27 	call	0x4fac	; 0x4fac <__udivmodhi4>
    2dda:	cb 01       	movw	r24, r22
    2ddc:	ec 81       	ldd	r30, Y+4	; 0x04
    2dde:	fd 81       	ldd	r31, Y+5	; 0x05
    2de0:	84 83       	std	Z+4, r24	; 0x04
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <LM_u8GetTempFromDigSignal+0xa2>
    }else{
        Local_u8ErrorState = NULL_PTR;
    2de4:	83 e0       	ldi	r24, 0x03	; 3
    2de6:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local_u8ErrorState;
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	ff 90       	pop	r15
    2dfe:	ef 90       	pop	r14
    2e00:	df 90       	pop	r13
    2e02:	cf 90       	pop	r12
    2e04:	bf 90       	pop	r11
    2e06:	af 90       	pop	r10
    2e08:	08 95       	ret

00002e0a <LM_u16convertToFahrenheit>:


//convert Celsius to Fahrenheit
uint16 LM_u16convertToFahrenheit(uint8 copy_u8CelsiusDeggree){
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	0f 92       	push	r0
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	89 83       	std	Y+1, r24	; 0x01

    return ((((uint16)copy_u8CelsiusDeggree*9)/5)+32);
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	c9 01       	movw	r24, r18
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	88 0f       	add	r24, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	82 0f       	add	r24, r18
    2e2c:	93 1f       	adc	r25, r19
    2e2e:	25 e0       	ldi	r18, 0x05	; 5
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	b9 01       	movw	r22, r18
    2e34:	0e 94 d6 27 	call	0x4fac	; 0x4fac <__udivmodhi4>
    2e38:	cb 01       	movw	r24, r22
    2e3a:	80 96       	adiw	r24, 0x20	; 32

}
    2e3c:	0f 90       	pop	r0
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	08 95       	ret

00002e44 <LED_u8SetON>:
#include "../../libraries/ErrType.h"
#include "../../0-MCAL/1-DIO/DIO_interface.h"

#include "LED_interface.h"

uint8 LED_u8SetON(const LED_Config_t* copy_LED_Object){
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <LED_u8SetON+0x6>
    2e4a:	0f 92       	push	r0
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	9b 83       	std	Y+3, r25	; 0x03
    2e52:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	89 83       	std	Y+1, r24	; 0x01
	if(copy_LED_Object != NULL){
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	19 f1       	breq	.+70     	; 0x2ea6 <LED_u8SetON+0x62>
		if(copy_LED_Object->Activitype== LED_ACTIVE_HIGH){
    2e60:	ea 81       	ldd	r30, Y+2	; 0x02
    2e62:	fb 81       	ldd	r31, Y+3	; 0x03
    2e64:	80 81       	ld	r24, Z
    2e66:	88 23       	and	r24, r24
    2e68:	59 f4       	brne	.+22     	; 0x2e80 <LED_u8SetON+0x3c>
			DIO_u8_SetPinVal(copy_LED_Object->port,copy_LED_Object->Pin,DIO_PIN_HIGH);
    2e6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e6e:	81 81       	ldd	r24, Z+1	; 0x01
    2e70:	ea 81       	ldd	r30, Y+2	; 0x02
    2e72:	fb 81       	ldd	r31, Y+3	; 0x03
    2e74:	92 81       	ldd	r25, Z+2	; 0x02
    2e76:	69 2f       	mov	r22, r25
    2e78:	41 e0       	ldi	r20, 0x01	; 1
    2e7a:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2e7e:	15 c0       	rjmp	.+42     	; 0x2eaa <LED_u8SetON+0x66>
		}else if(copy_LED_Object->Activitype== LED_ACTIVE_LOW){
    2e80:	ea 81       	ldd	r30, Y+2	; 0x02
    2e82:	fb 81       	ldd	r31, Y+3	; 0x03
    2e84:	80 81       	ld	r24, Z
    2e86:	81 30       	cpi	r24, 0x01	; 1
    2e88:	59 f4       	brne	.+22     	; 0x2ea0 <LED_u8SetON+0x5c>
			DIO_u8_SetPinVal(copy_LED_Object->port,copy_LED_Object->Pin,DIO_PIN_LOW);
    2e8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e8e:	81 81       	ldd	r24, Z+1	; 0x01
    2e90:	ea 81       	ldd	r30, Y+2	; 0x02
    2e92:	fb 81       	ldd	r31, Y+3	; 0x03
    2e94:	92 81       	ldd	r25, Z+2	; 0x02
    2e96:	69 2f       	mov	r22, r25
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2e9e:	05 c0       	rjmp	.+10     	; 0x2eaa <LED_u8SetON+0x66>
		}else{
			Local_u8ErrorState = NOK;
    2ea0:	82 e0       	ldi	r24, 0x02	; 2
    2ea2:	89 83       	std	Y+1, r24	; 0x01
    2ea4:	02 c0       	rjmp	.+4      	; 0x2eaa <LED_u8SetON+0x66>
		}
	}else
		Local_u8ErrorState = NULL_PTR;
    2ea6:	83 e0       	ldi	r24, 0x03	; 3
    2ea8:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	cf 91       	pop	r28
    2eb4:	df 91       	pop	r29
    2eb6:	08 95       	ret

00002eb8 <LED_u8SetOFF>:


uint8 LED_u8SetOFF(const LED_Config_t* copy_LED_Object){
    2eb8:	df 93       	push	r29
    2eba:	cf 93       	push	r28
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <LED_u8SetOFF+0x6>
    2ebe:	0f 92       	push	r0
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	9b 83       	std	Y+3, r25	; 0x03
    2ec6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	89 83       	std	Y+1, r24	; 0x01
	if(copy_LED_Object != NULL){
    2ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ece:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed0:	00 97       	sbiw	r24, 0x00	; 0
    2ed2:	19 f1       	breq	.+70     	; 0x2f1a <LED_u8SetOFF+0x62>
		if(copy_LED_Object->Activitype== LED_ACTIVE_HIGH){
    2ed4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ed6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ed8:	80 81       	ld	r24, Z
    2eda:	88 23       	and	r24, r24
    2edc:	59 f4       	brne	.+22     	; 0x2ef4 <LED_u8SetOFF+0x3c>
			DIO_u8_SetPinVal(copy_LED_Object->port,copy_LED_Object->Pin,DIO_PIN_LOW);
    2ede:	ea 81       	ldd	r30, Y+2	; 0x02
    2ee0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ee2:	81 81       	ldd	r24, Z+1	; 0x01
    2ee4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ee6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ee8:	92 81       	ldd	r25, Z+2	; 0x02
    2eea:	69 2f       	mov	r22, r25
    2eec:	40 e0       	ldi	r20, 0x00	; 0
    2eee:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2ef2:	15 c0       	rjmp	.+42     	; 0x2f1e <LED_u8SetOFF+0x66>
		}else if(copy_LED_Object->Activitype== LED_ACTIVE_LOW){
    2ef4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ef6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ef8:	80 81       	ld	r24, Z
    2efa:	81 30       	cpi	r24, 0x01	; 1
    2efc:	59 f4       	brne	.+22     	; 0x2f14 <LED_u8SetOFF+0x5c>
			DIO_u8_SetPinVal(copy_LED_Object->port,copy_LED_Object->Pin,DIO_PIN_HIGH);
    2efe:	ea 81       	ldd	r30, Y+2	; 0x02
    2f00:	fb 81       	ldd	r31, Y+3	; 0x03
    2f02:	81 81       	ldd	r24, Z+1	; 0x01
    2f04:	ea 81       	ldd	r30, Y+2	; 0x02
    2f06:	fb 81       	ldd	r31, Y+3	; 0x03
    2f08:	92 81       	ldd	r25, Z+2	; 0x02
    2f0a:	69 2f       	mov	r22, r25
    2f0c:	41 e0       	ldi	r20, 0x01	; 1
    2f0e:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    2f12:	05 c0       	rjmp	.+10     	; 0x2f1e <LED_u8SetOFF+0x66>
		}else{
			Local_u8ErrorState = NOK;
    2f14:	82 e0       	ldi	r24, 0x02	; 2
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <LED_u8SetOFF+0x66>
		}
	}else
		Local_u8ErrorState = NULL_PTR;
    2f1a:	83 e0       	ldi	r24, 0x03	; 3
    2f1c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <LED_u8Toggle>:
uint8 LED_u8Toggle(const LED_Config_t* copy_LED_Object){
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <LED_u8Toggle+0x6>
    2f32:	0f 92       	push	r0
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	9b 83       	std	Y+3, r25	; 0x03
    2f3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_LED_Object != NULL){
    2f40:	8a 81       	ldd	r24, Y+2	; 0x02
    2f42:	9b 81       	ldd	r25, Y+3	; 0x03
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	51 f0       	breq	.+20     	; 0x2f5c <LED_u8Toggle+0x30>
		DIO_u8_TogglePinVal(copy_LED_Object->port,copy_LED_Object->Pin);
    2f48:	ea 81       	ldd	r30, Y+2	; 0x02
    2f4a:	fb 81       	ldd	r31, Y+3	; 0x03
    2f4c:	81 81       	ldd	r24, Z+1	; 0x01
    2f4e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f50:	fb 81       	ldd	r31, Y+3	; 0x03
    2f52:	92 81       	ldd	r25, Z+2	; 0x02
    2f54:	69 2f       	mov	r22, r25
    2f56:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <DIO_u8_TogglePinVal>
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <LED_u8Toggle+0x34>
	}else
		Local_u8ErrorState = NULL_PTR;
    2f5c:	83 e0       	ldi	r24, 0x03	; 3
    2f5e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	cf 91       	pop	r28
    2f6a:	df 91       	pop	r29
    2f6c:	08 95       	ret

00002f6e <LDR_u8GetLighlevel>:
#include "../../libraries/MAP.h"
#include "../../0-MCAL/1-DIO/DIO_interface.h"
#include "../../0-MCAL/5-ADC/ADC_interface.h"
#include "LDR_interface.h"

uint8 LDR_u8GetLighlevel(LDR_Config_t* refrance_LDR){
    2f6e:	af 92       	push	r10
    2f70:	bf 92       	push	r11
    2f72:	cf 92       	push	r12
    2f74:	df 92       	push	r13
    2f76:	ef 92       	push	r14
    2f78:	ff 92       	push	r15
    2f7a:	0f 93       	push	r16
    2f7c:	1f 93       	push	r17
    2f7e:	df 93       	push	r29
    2f80:	cf 93       	push	r28
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	27 97       	sbiw	r28, 0x07	; 7
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	f8 94       	cli
    2f8c:	de bf       	out	0x3e, r29	; 62
    2f8e:	0f be       	out	0x3f, r0	; 63
    2f90:	cd bf       	out	0x3d, r28	; 61
    2f92:	9f 83       	std	Y+7, r25	; 0x07
    2f94:	8e 83       	std	Y+6, r24	; 0x06
	uint8 Local_u8ErrorState = OK;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	8b 83       	std	Y+3, r24	; 0x03
	if(refrance_LDR != NULL ){
    2f9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	09 f4       	brne	.+2      	; 0x2fa4 <LDR_u8GetLighlevel+0x36>
    2fa2:	5e c0       	rjmp	.+188    	; 0x3060 <LDR_u8GetLighlevel+0xf2>
		uint16 Local_u16Reading ;
		ADC_u8StartConverstionSync(refrance_LDR->AnalogChannel_DigitalSignal,&Local_u16Reading);
    2fa4:	ee 81       	ldd	r30, Y+6	; 0x06
    2fa6:	ff 81       	ldd	r31, Y+7	; 0x07
    2fa8:	80 81       	ld	r24, Z
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	9e 01       	movw	r18, r28
    2fae:	2c 5f       	subi	r18, 0xFC	; 252
    2fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb2:	b9 01       	movw	r22, r18
    2fb4:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <ADC_u8StartConverstionSync>
		uint16 Local_u16VoltageReading = (uint16)MAP(0u,1023ul,0u,refrance_LDR->max_volt,(sint32)Local_u16Reading);
    2fb8:	ee 81       	ldd	r30, Y+6	; 0x06
    2fba:	ff 81       	ldd	r31, Y+7	; 0x07
    2fbc:	82 81       	ldd	r24, Z+2	; 0x02
    2fbe:	93 81       	ldd	r25, Z+3	; 0x03
    2fc0:	5c 01       	movw	r10, r24
    2fc2:	cc 24       	eor	r12, r12
    2fc4:	dd 24       	eor	r13, r13
    2fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fca:	cc 01       	movw	r24, r24
    2fcc:	a0 e0       	ldi	r26, 0x00	; 0
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <LDR_u8GetLighlevel+0x64>
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <LDR_u8GetLighlevel+0x66>
    2fd4:	ed b7       	in	r30, 0x3d	; 61
    2fd6:	fe b7       	in	r31, 0x3e	; 62
    2fd8:	31 96       	adiw	r30, 0x01	; 1
    2fda:	80 83       	st	Z, r24
    2fdc:	91 83       	std	Z+1, r25	; 0x01
    2fde:	a2 83       	std	Z+2, r26	; 0x02
    2fe0:	b3 83       	std	Z+3, r27	; 0x03
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	2f ef       	ldi	r18, 0xFF	; 255
    2fec:	33 e0       	ldi	r19, 0x03	; 3
    2fee:	40 e0       	ldi	r20, 0x00	; 0
    2ff0:	50 e0       	ldi	r21, 0x00	; 0
    2ff2:	ee 24       	eor	r14, r14
    2ff4:	ff 24       	eor	r15, r15
    2ff6:	87 01       	movw	r16, r14
    2ff8:	0e 94 17 07 	call	0xe2e	; 0xe2e <MAP>
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	9a 83       	std	Y+2, r25	; 0x02
    300a:	89 83       	std	Y+1, r24	; 0x01

		refrance_LDR->LightLevel = (Local_u16VoltageReading/1850.0)*100;
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	cc 01       	movw	r24, r24
    3012:	a0 e0       	ldi	r26, 0x00	; 0
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	bc 01       	movw	r22, r24
    3018:	cd 01       	movw	r24, r26
    301a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	bc 01       	movw	r22, r24
    3024:	cd 01       	movw	r24, r26
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e4       	ldi	r19, 0x40	; 64
    302a:	47 ee       	ldi	r20, 0xE7	; 231
    302c:	54 e4       	ldi	r21, 0x44	; 68
    302e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	bc 01       	movw	r22, r24
    3038:	cd 01       	movw	r24, r26
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	48 ec       	ldi	r20, 0xC8	; 200
    3040:	52 e4       	ldi	r21, 0x42	; 66
    3042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	bc 01       	movw	r22, r24
    304c:	cd 01       	movw	r24, r26
    304e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	ee 81       	ldd	r30, Y+6	; 0x06
    3058:	ff 81       	ldd	r31, Y+7	; 0x07
    305a:	95 83       	std	Z+5, r25	; 0x05
    305c:	84 83       	std	Z+4, r24	; 0x04
    305e:	02 c0       	rjmp	.+4      	; 0x3064 <LDR_u8GetLighlevel+0xf6>

	}else{
		Local_u8ErrorState = NULL_PTR;
    3060:	83 e0       	ldi	r24, 0x03	; 3
    3062:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3066:	27 96       	adiw	r28, 0x07	; 7
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	de bf       	out	0x3e, r29	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	cd bf       	out	0x3d, r28	; 61
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	1f 91       	pop	r17
    3078:	0f 91       	pop	r16
    307a:	ff 90       	pop	r15
    307c:	ef 90       	pop	r14
    307e:	df 90       	pop	r13
    3080:	cf 90       	pop	r12
    3082:	bf 90       	pop	r11
    3084:	af 90       	pop	r10
    3086:	08 95       	ret

00003088 <LDR_u8GetLLFromDigSignal>:

uint8 LDR_u8GetLLFromDigSignal(LDR_Config_t* refrance_LDR){
    3088:	af 92       	push	r10
    308a:	bf 92       	push	r11
    308c:	cf 92       	push	r12
    308e:	df 92       	push	r13
    3090:	ef 92       	push	r14
    3092:	ff 92       	push	r15
    3094:	0f 93       	push	r16
    3096:	1f 93       	push	r17
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	00 d0       	rcall	.+0      	; 0x309e <LDR_u8GetLLFromDigSignal+0x16>
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <LDR_u8GetLLFromDigSignal+0x18>
    30a0:	0f 92       	push	r0
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	9d 83       	std	Y+5, r25	; 0x05
    30a8:	8c 83       	std	Y+4, r24	; 0x04
	uint8 Local_u8ErrorState = OK;
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	8b 83       	std	Y+3, r24	; 0x03
	if(refrance_LDR != NULL ){
    30ae:	8c 81       	ldd	r24, Y+4	; 0x04
    30b0:	9d 81       	ldd	r25, Y+5	; 0x05
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <LDR_u8GetLLFromDigSignal+0x30>
    30b6:	56 c0       	rjmp	.+172    	; 0x3164 <LDR_u8GetLLFromDigSignal+0xdc>

		uint16 Local_u16VoltageReading = (uint16)MAP(0u,1023ul,0u,refrance_LDR->max_volt,(sint32)refrance_LDR->AnalogChannel_DigitalSignal);
    30b8:	ec 81       	ldd	r30, Y+4	; 0x04
    30ba:	fd 81       	ldd	r31, Y+5	; 0x05
    30bc:	82 81       	ldd	r24, Z+2	; 0x02
    30be:	93 81       	ldd	r25, Z+3	; 0x03
    30c0:	5c 01       	movw	r10, r24
    30c2:	cc 24       	eor	r12, r12
    30c4:	dd 24       	eor	r13, r13
    30c6:	ec 81       	ldd	r30, Y+4	; 0x04
    30c8:	fd 81       	ldd	r31, Y+5	; 0x05
    30ca:	80 81       	ld	r24, Z
    30cc:	91 81       	ldd	r25, Z+1	; 0x01
    30ce:	cc 01       	movw	r24, r24
    30d0:	a0 e0       	ldi	r26, 0x00	; 0
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	00 d0       	rcall	.+0      	; 0x30d6 <LDR_u8GetLLFromDigSignal+0x4e>
    30d6:	00 d0       	rcall	.+0      	; 0x30d8 <LDR_u8GetLLFromDigSignal+0x50>
    30d8:	ed b7       	in	r30, 0x3d	; 61
    30da:	fe b7       	in	r31, 0x3e	; 62
    30dc:	31 96       	adiw	r30, 0x01	; 1
    30de:	80 83       	st	Z, r24
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	a2 83       	std	Z+2, r26	; 0x02
    30e4:	b3 83       	std	Z+3, r27	; 0x03
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	2f ef       	ldi	r18, 0xFF	; 255
    30f0:	33 e0       	ldi	r19, 0x03	; 3
    30f2:	40 e0       	ldi	r20, 0x00	; 0
    30f4:	50 e0       	ldi	r21, 0x00	; 0
    30f6:	ee 24       	eor	r14, r14
    30f8:	ff 24       	eor	r15, r15
    30fa:	87 01       	movw	r16, r14
    30fc:	0e 94 17 07 	call	0xe2e	; 0xe2e <MAP>
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01

		refrance_LDR->LightLevel = (Local_u16VoltageReading/1850.0)*100;
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	cc 01       	movw	r24, r24
    3116:	a0 e0       	ldi	r26, 0x00	; 0
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	bc 01       	movw	r22, r24
    311c:	cd 01       	movw	r24, r26
    311e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	bc 01       	movw	r22, r24
    3128:	cd 01       	movw	r24, r26
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e4       	ldi	r19, 0x40	; 64
    312e:	47 ee       	ldi	r20, 0xE7	; 231
    3130:	54 e4       	ldi	r21, 0x44	; 68
    3132:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	bc 01       	movw	r22, r24
    313c:	cd 01       	movw	r24, r26
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	48 ec       	ldi	r20, 0xC8	; 200
    3144:	52 e4       	ldi	r21, 0x42	; 66
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	ec 81       	ldd	r30, Y+4	; 0x04
    315c:	fd 81       	ldd	r31, Y+5	; 0x05
    315e:	95 83       	std	Z+5, r25	; 0x05
    3160:	84 83       	std	Z+4, r24	; 0x04
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <LDR_u8GetLLFromDigSignal+0xe0>

	}else{
		Local_u8ErrorState = NULL_PTR;
    3164:	83 e0       	ldi	r24, 0x03	; 3
    3166:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
}
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	cf 91       	pop	r28
    3176:	df 91       	pop	r29
    3178:	1f 91       	pop	r17
    317a:	0f 91       	pop	r16
    317c:	ff 90       	pop	r15
    317e:	ef 90       	pop	r14
    3180:	df 90       	pop	r13
    3182:	cf 90       	pop	r12
    3184:	bf 90       	pop	r11
    3186:	af 90       	pop	r10
    3188:	08 95       	ret

0000318a <KPD_u8GetPressedKey>:

#include "KPD_interface.h"
#include "KPD_prv.h"
#include "KPD_cfg.h"

uint8 KPD_u8GetPressedKey(uint8* referance_u8Row,uint8* referance_u8Col){
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	29 97       	sbiw	r28, 0x09	; 9
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	9e 83       	std	Y+6, r25	; 0x06
    31a0:	8d 83       	std	Y+5, r24	; 0x05
    31a2:	78 87       	std	Y+8, r23	; 0x08
    31a4:	6f 83       	std	Y+7, r22	; 0x07
    
    uint8 Local_u8ItrRow,Local_u8ItrCol,Local_u8KeyState, Local_u8PressedKey= KPD_u8NO_PRESSED_KEY_VAL;
    31a6:	8f ef       	ldi	r24, 0xFF	; 255
    31a8:	89 83       	std	Y+1, r24	; 0x01
    static uint8 Local_u8RowArr[ROW_SIZE]={KPD_u8R0_PIN,KPD_u8R1_PIN,KPD_u8R2_PIN,KPD_u8R3_PIN};
    static uint8 Local_u8ColArr[ROW_SIZE]={KPD_u8C0_PIN,KPD_u8C1_PIN,KPD_u8C2_PIN,KPD_u8C3_PIN};
    static uint8 Local_u8KPDArr[ROW_SIZE][COL_SIZE]= KPD_u8BUTTONARR_VAL;
    //activate the column pins
    for(Local_u8ItrCol=0;Local_u8ItrCol<COL_SIZE;Local_u8ItrCol++){
    31aa:	1a 82       	std	Y+2, r1	; 0x02
    31ac:	66 c0       	rjmp	.+204    	; 0x327a <KPD_u8GetPressedKey+0xf0>
    
        //activate the current column
        DIO_u8_SetPinVal(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ItrCol],DIO_PIN_LOW);
    31ae:	8a 81       	ldd	r24, Y+2	; 0x02
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	fc 01       	movw	r30, r24
    31b6:	ea 55       	subi	r30, 0x5A	; 90
    31b8:	fe 4f       	sbci	r31, 0xFE	; 254
    31ba:	90 81       	ld	r25, Z
    31bc:	83 e0       	ldi	r24, 0x03	; 3
    31be:	69 2f       	mov	r22, r25
    31c0:	40 e0       	ldi	r20, 0x00	; 0
    31c2:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>

        //read the row pins
        for(Local_u8ItrRow=0;Local_u8ItrRow<ROW_SIZE;Local_u8ItrRow++){
    31c6:	1b 82       	std	Y+3, r1	; 0x03
    31c8:	45 c0       	rjmp	.+138    	; 0x3254 <KPD_u8GetPressedKey+0xca>
            //read the current row 
            DIO_u8_GetPinVal(KPD_u8ROW_PORT,Local_u8RowArr[Local_u8ItrRow],&Local_u8KeyState);
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	88 2f       	mov	r24, r24
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	fc 01       	movw	r30, r24
    31d2:	e6 55       	subi	r30, 0x56	; 86
    31d4:	fe 4f       	sbci	r31, 0xFE	; 254
    31d6:	90 81       	ld	r25, Z
    31d8:	9e 01       	movw	r18, r28
    31da:	2c 5f       	subi	r18, 0xFC	; 252
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	69 2f       	mov	r22, r25
    31e2:	a9 01       	movw	r20, r18
    31e4:	0e 94 92 25 	call	0x4b24	; 0x4b24 <DIO_u8_GetPinVal>
            if(Local_u8KeyState == DIO_PIN_LOW){
    31e8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ea:	88 23       	and	r24, r24
    31ec:	81 f5       	brne	.+96     	; 0x324e <KPD_u8GetPressedKey+0xc4>
                Local_u8PressedKey = Local_u8KPDArr[Local_u8ItrRow][Local_u8ItrCol];
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	48 2f       	mov	r20, r24
    31f2:	50 e0       	ldi	r21, 0x00	; 0
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	28 2f       	mov	r18, r24
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	ca 01       	movw	r24, r20
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	82 0f       	add	r24, r18
    3206:	93 1f       	adc	r25, r19
    3208:	fc 01       	movw	r30, r24
    320a:	ea 56       	subi	r30, 0x6A	; 106
    320c:	fe 4f       	sbci	r31, 0xFE	; 254
    320e:	80 81       	ld	r24, Z
    3210:	89 83       	std	Y+1, r24	; 0x01
    3212:	0f c0       	rjmp	.+30     	; 0x3232 <KPD_u8GetPressedKey+0xa8>
                //wait until key is released (polling with blocking on pin reading)
                while(Local_u8KeyState == DIO_PIN_LOW){
                    DIO_u8_GetPinVal(KPD_u8ROW_PORT,Local_u8RowArr[Local_u8ItrRow],&Local_u8KeyState);
    3214:	8b 81       	ldd	r24, Y+3	; 0x03
    3216:	88 2f       	mov	r24, r24
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	fc 01       	movw	r30, r24
    321c:	e6 55       	subi	r30, 0x56	; 86
    321e:	fe 4f       	sbci	r31, 0xFE	; 254
    3220:	90 81       	ld	r25, Z
    3222:	9e 01       	movw	r18, r28
    3224:	2c 5f       	subi	r18, 0xFC	; 252
    3226:	3f 4f       	sbci	r19, 0xFF	; 255
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	69 2f       	mov	r22, r25
    322c:	a9 01       	movw	r20, r18
    322e:	0e 94 92 25 	call	0x4b24	; 0x4b24 <DIO_u8_GetPinVal>
            //read the current row 
            DIO_u8_GetPinVal(KPD_u8ROW_PORT,Local_u8RowArr[Local_u8ItrRow],&Local_u8KeyState);
            if(Local_u8KeyState == DIO_PIN_LOW){
                Local_u8PressedKey = Local_u8KPDArr[Local_u8ItrRow][Local_u8ItrCol];
                //wait until key is released (polling with blocking on pin reading)
                while(Local_u8KeyState == DIO_PIN_LOW){
    3232:	8c 81       	ldd	r24, Y+4	; 0x04
    3234:	88 23       	and	r24, r24
    3236:	71 f3       	breq	.-36     	; 0x3214 <KPD_u8GetPressedKey+0x8a>
                    DIO_u8_GetPinVal(KPD_u8ROW_PORT,Local_u8RowArr[Local_u8ItrRow],&Local_u8KeyState);
                }
                *referance_u8Row=Local_u8ItrRow;
    3238:	ed 81       	ldd	r30, Y+5	; 0x05
    323a:	fe 81       	ldd	r31, Y+6	; 0x06
    323c:	8b 81       	ldd	r24, Y+3	; 0x03
    323e:	80 83       	st	Z, r24
                *referance_u8Col=Local_u8ItrCol;
    3240:	ef 81       	ldd	r30, Y+7	; 0x07
    3242:	f8 85       	ldd	r31, Y+8	; 0x08
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	80 83       	st	Z, r24
                return Local_u8PressedKey;
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	89 87       	std	Y+9, r24	; 0x09
    324c:	1c c0       	rjmp	.+56     	; 0x3286 <KPD_u8GetPressedKey+0xfc>
    
        //activate the current column
        DIO_u8_SetPinVal(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ItrCol],DIO_PIN_LOW);

        //read the row pins
        for(Local_u8ItrRow=0;Local_u8ItrRow<ROW_SIZE;Local_u8ItrRow++){
    324e:	8b 81       	ldd	r24, Y+3	; 0x03
    3250:	8f 5f       	subi	r24, 0xFF	; 255
    3252:	8b 83       	std	Y+3, r24	; 0x03
    3254:	8b 81       	ldd	r24, Y+3	; 0x03
    3256:	84 30       	cpi	r24, 0x04	; 4
    3258:	08 f4       	brcc	.+2      	; 0x325c <KPD_u8GetPressedKey+0xd2>
    325a:	b7 cf       	rjmp	.-146    	; 0x31ca <KPD_u8GetPressedKey+0x40>
                return Local_u8PressedKey;
            }

        }
        //deactivate the current column
        DIO_u8_SetPinVal(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ItrCol],DIO_PIN_HIGH);
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	88 2f       	mov	r24, r24
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	fc 01       	movw	r30, r24
    3264:	ea 55       	subi	r30, 0x5A	; 90
    3266:	fe 4f       	sbci	r31, 0xFE	; 254
    3268:	90 81       	ld	r25, Z
    326a:	83 e0       	ldi	r24, 0x03	; 3
    326c:	69 2f       	mov	r22, r25
    326e:	41 e0       	ldi	r20, 0x01	; 1
    3270:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    uint8 Local_u8ItrRow,Local_u8ItrCol,Local_u8KeyState, Local_u8PressedKey= KPD_u8NO_PRESSED_KEY_VAL;
    static uint8 Local_u8RowArr[ROW_SIZE]={KPD_u8R0_PIN,KPD_u8R1_PIN,KPD_u8R2_PIN,KPD_u8R3_PIN};
    static uint8 Local_u8ColArr[ROW_SIZE]={KPD_u8C0_PIN,KPD_u8C1_PIN,KPD_u8C2_PIN,KPD_u8C3_PIN};
    static uint8 Local_u8KPDArr[ROW_SIZE][COL_SIZE]= KPD_u8BUTTONARR_VAL;
    //activate the column pins
    for(Local_u8ItrCol=0;Local_u8ItrCol<COL_SIZE;Local_u8ItrCol++){
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	8f 5f       	subi	r24, 0xFF	; 255
    3278:	8a 83       	std	Y+2, r24	; 0x02
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	84 30       	cpi	r24, 0x04	; 4
    327e:	08 f4       	brcc	.+2      	; 0x3282 <KPD_u8GetPressedKey+0xf8>
    3280:	96 cf       	rjmp	.-212    	; 0x31ae <KPD_u8GetPressedKey+0x24>
        }
        //deactivate the current column
        DIO_u8_SetPinVal(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ItrCol],DIO_PIN_HIGH);
    }

    return Local_u8PressedKey;
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	89 87       	std	Y+9, r24	; 0x09
    3286:	89 85       	ldd	r24, Y+9	; 0x09

}
    3288:	29 96       	adiw	r28, 0x09	; 9
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	f8 94       	cli
    328e:	de bf       	out	0x3e, r29	; 62
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	cd bf       	out	0x3d, r28	; 61
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	08 95       	ret

0000329a <DCM_voidRotateCW>:
#include "../../libraries/STD_TYPES_H.h"
#include "../../libraries/ErrType.h"
#include "../../0-MCAL/1-DIO/DIO_interface.h"
#include "DCM_interface.h"

void DCM_voidRotateCW(DCM_Config_t* referance_motor ){
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	00 d0       	rcall	.+0      	; 0x32a0 <DCM_voidRotateCW+0x6>
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	9a 83       	std	Y+2, r25	; 0x02
    32a6:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin0, DIO_PIN_LOW);
    32a8:	e9 81       	ldd	r30, Y+1	; 0x01
    32aa:	fa 81       	ldd	r31, Y+2	; 0x02
    32ac:	80 81       	ld	r24, Z
    32ae:	e9 81       	ldd	r30, Y+1	; 0x01
    32b0:	fa 81       	ldd	r31, Y+2	; 0x02
    32b2:	91 81       	ldd	r25, Z+1	; 0x01
    32b4:	69 2f       	mov	r22, r25
    32b6:	40 e0       	ldi	r20, 0x00	; 0
    32b8:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin1, DIO_PIN_HIGH);
    32bc:	e9 81       	ldd	r30, Y+1	; 0x01
    32be:	fa 81       	ldd	r31, Y+2	; 0x02
    32c0:	80 81       	ld	r24, Z
    32c2:	e9 81       	ldd	r30, Y+1	; 0x01
    32c4:	fa 81       	ldd	r31, Y+2	; 0x02
    32c6:	92 81       	ldd	r25, Z+2	; 0x02
    32c8:	69 2f       	mov	r22, r25
    32ca:	41 e0       	ldi	r20, 0x01	; 1
    32cc:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
}
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	cf 91       	pop	r28
    32d6:	df 91       	pop	r29
    32d8:	08 95       	ret

000032da <DCM_voidRotateCCW>:
void DCM_voidRotateCCW(DCM_Config_t* referance_motor ){
    32da:	df 93       	push	r29
    32dc:	cf 93       	push	r28
    32de:	00 d0       	rcall	.+0      	; 0x32e0 <DCM_voidRotateCCW+0x6>
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	9a 83       	std	Y+2, r25	; 0x02
    32e6:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin1, DIO_PIN_LOW);
    32e8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ea:	fa 81       	ldd	r31, Y+2	; 0x02
    32ec:	80 81       	ld	r24, Z
    32ee:	e9 81       	ldd	r30, Y+1	; 0x01
    32f0:	fa 81       	ldd	r31, Y+2	; 0x02
    32f2:	92 81       	ldd	r25, Z+2	; 0x02
    32f4:	69 2f       	mov	r22, r25
    32f6:	40 e0       	ldi	r20, 0x00	; 0
    32f8:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin0, DIO_PIN_HIGH);
    32fc:	e9 81       	ldd	r30, Y+1	; 0x01
    32fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3300:	80 81       	ld	r24, Z
    3302:	e9 81       	ldd	r30, Y+1	; 0x01
    3304:	fa 81       	ldd	r31, Y+2	; 0x02
    3306:	91 81       	ldd	r25, Z+1	; 0x01
    3308:	69 2f       	mov	r22, r25
    330a:	41 e0       	ldi	r20, 0x01	; 1
    330c:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
}
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <DCM_voidStop>:
void DCM_voidStop(DCM_Config_t* referance_motor ){
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	00 d0       	rcall	.+0      	; 0x3320 <DCM_voidStop+0x6>
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	9a 83       	std	Y+2, r25	; 0x02
    3326:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin0, DIO_PIN_LOW);
    3328:	e9 81       	ldd	r30, Y+1	; 0x01
    332a:	fa 81       	ldd	r31, Y+2	; 0x02
    332c:	80 81       	ld	r24, Z
    332e:	e9 81       	ldd	r30, Y+1	; 0x01
    3330:	fa 81       	ldd	r31, Y+2	; 0x02
    3332:	91 81       	ldd	r25, Z+1	; 0x01
    3334:	69 2f       	mov	r22, r25
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    DIO_u8_SetPinVal(referance_motor->port, referance_motor->Pin1, DIO_PIN_LOW);
    333c:	e9 81       	ldd	r30, Y+1	; 0x01
    333e:	fa 81       	ldd	r31, Y+2	; 0x02
    3340:	80 81       	ld	r24, Z
    3342:	e9 81       	ldd	r30, Y+1	; 0x01
    3344:	fa 81       	ldd	r31, Y+2	; 0x02
    3346:	92 81       	ldd	r25, Z+2	; 0x02
    3348:	69 2f       	mov	r22, r25
    334a:	40 e0       	ldi	r20, 0x00	; 0
    334c:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
}
    3350:	0f 90       	pop	r0
    3352:	0f 90       	pop	r0
    3354:	cf 91       	pop	r28
    3356:	df 91       	pop	r29
    3358:	08 95       	ret

0000335a <DAC_u8AnalogVolt>:
#include "./DAC_interface.h"




uint8 DAC_u8AnalogVolt( uint16 copy_u16_volt){
    335a:	df 93       	push	r29
    335c:	cf 93       	push	r28
    335e:	00 d0       	rcall	.+0      	; 0x3360 <DAC_u8AnalogVolt+0x6>
    3360:	0f 92       	push	r0
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	9b 83       	std	Y+3, r25	; 0x03
    3368:	8a 83       	std	Y+2, r24	; 0x02
    //step = maxvolt(5000mv)/2^res(256) =19.53125
    //analog = digital *step /// digital = analog/step
    uint8 digital = (uint8)((f32)copy_u16_volt / 19.53125f);
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	9b 81       	ldd	r25, Y+3	; 0x03
    336e:	cc 01       	movw	r24, r24
    3370:	a0 e0       	ldi	r26, 0x00	; 0
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	bc 01       	movw	r22, r24
    3376:	cd 01       	movw	r24, r26
    3378:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	bc 01       	movw	r22, r24
    3382:	cd 01       	movw	r24, r26
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e4       	ldi	r19, 0x40	; 64
    3388:	4c e9       	ldi	r20, 0x9C	; 156
    338a:	51 e4       	ldi	r21, 0x41	; 65
    338c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	bc 01       	movw	r22, r24
    3396:	cd 01       	movw	r24, r26
    3398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	89 83       	std	Y+1, r24	; 0x01
    return digital;
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	cf 91       	pop	r28
    33ac:	df 91       	pop	r29
    33ae:	08 95       	ret

000033b0 <voidSetHalfDataPort>:
#include "CLCD_cfg.h"
#include "CLCD_interface.h"
#include "CLCD_prv.h" 

#if CLCD_u8CONNECTION_MODE ==  FOUR_BIT
static void voidSetHalfDataPort(uint8 copy_u8FourBitData){
    33b0:	df 93       	push	r29
    33b2:	cf 93       	push	r28
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <voidSetHalfDataPort+0x6>
    33b6:	00 d0       	rcall	.+0      	; 0x33b8 <voidSetHalfDataPort+0x8>
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8_SetPinVal(CLCD_u8DATA_PORT,CLCD_u8D4_PIN,GET_BIT(copy_u8FourBitData,0));
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	98 2f       	mov	r25, r24
    33c2:	91 70       	andi	r25, 0x01	; 1
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	63 e0       	ldi	r22, 0x03	; 3
    33c8:	49 2f       	mov	r20, r25
    33ca:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    DIO_u8_SetPinVal(CLCD_u8DATA_PORT,CLCD_u8D5_PIN, GET_BIT(copy_u8FourBitData,1));
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	88 2f       	mov	r24, r24
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	82 70       	andi	r24, 0x02	; 2
    33d6:	90 70       	andi	r25, 0x00	; 0
    33d8:	1c 82       	std	Y+4, r1	; 0x04
    33da:	00 97       	sbiw	r24, 0x00	; 0
    33dc:	11 f0       	breq	.+4      	; 0x33e2 <voidSetHalfDataPort+0x32>
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	8c 83       	std	Y+4, r24	; 0x04
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	64 e0       	ldi	r22, 0x04	; 4
    33e6:	4c 81       	ldd	r20, Y+4	; 0x04
    33e8:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    DIO_u8_SetPinVal(CLCD_u8DATA_PORT,CLCD_u8D6_PIN, GET_BIT(copy_u8FourBitData,2));
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	88 2f       	mov	r24, r24
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	84 70       	andi	r24, 0x04	; 4
    33f4:	90 70       	andi	r25, 0x00	; 0
    33f6:	1b 82       	std	Y+3, r1	; 0x03
    33f8:	00 97       	sbiw	r24, 0x00	; 0
    33fa:	11 f0       	breq	.+4      	; 0x3400 <voidSetHalfDataPort+0x50>
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	8b 83       	std	Y+3, r24	; 0x03
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	65 e0       	ldi	r22, 0x05	; 5
    3404:	4b 81       	ldd	r20, Y+3	; 0x03
    3406:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    DIO_u8_SetPinVal(CLCD_u8DATA_PORT,CLCD_u8D7_PIN, GET_BIT(copy_u8FourBitData,3));
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	88 2f       	mov	r24, r24
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	88 70       	andi	r24, 0x08	; 8
    3412:	90 70       	andi	r25, 0x00	; 0
    3414:	1a 82       	std	Y+2, r1	; 0x02
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	11 f0       	breq	.+4      	; 0x341e <voidSetHalfDataPort+0x6e>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	8a 83       	std	Y+2, r24	; 0x02
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	66 e0       	ldi	r22, 0x06	; 6
    3422:	4a 81       	ldd	r20, Y+2	; 0x02
    3424:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
}
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <voidSendEnablePulse>:
#endif
static void voidSendEnablePulse(){
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	2e 97       	sbiw	r28, 0x0e	; 14
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_HIGH);
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	62 e0       	ldi	r22, 0x02	; 2
    344e:	41 e0       	ldi	r20, 0x01	; 1
    3450:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	a0 e0       	ldi	r26, 0x00	; 0
    345a:	b0 e4       	ldi	r27, 0x40	; 64
    345c:	8b 87       	std	Y+11, r24	; 0x0b
    345e:	9c 87       	std	Y+12, r25	; 0x0c
    3460:	ad 87       	std	Y+13, r26	; 0x0d
    3462:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3464:	6b 85       	ldd	r22, Y+11	; 0x0b
    3466:	7c 85       	ldd	r23, Y+12	; 0x0c
    3468:	8d 85       	ldd	r24, Y+13	; 0x0d
    346a:	9e 85       	ldd	r25, Y+14	; 0x0e
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	4a e7       	ldi	r20, 0x7A	; 122
    3472:	55 e4       	ldi	r21, 0x45	; 69
    3474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	8f 83       	std	Y+7, r24	; 0x07
    347e:	98 87       	std	Y+8, r25	; 0x08
    3480:	a9 87       	std	Y+9, r26	; 0x09
    3482:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3484:	6f 81       	ldd	r22, Y+7	; 0x07
    3486:	78 85       	ldd	r23, Y+8	; 0x08
    3488:	89 85       	ldd	r24, Y+9	; 0x09
    348a:	9a 85       	ldd	r25, Y+10	; 0x0a
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	40 e8       	ldi	r20, 0x80	; 128
    3492:	5f e3       	ldi	r21, 0x3F	; 63
    3494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3498:	88 23       	and	r24, r24
    349a:	2c f4       	brge	.+10     	; 0x34a6 <voidSendEnablePulse+0x70>
		__ticks = 1;
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	9e 83       	std	Y+6, r25	; 0x06
    34a2:	8d 83       	std	Y+5, r24	; 0x05
    34a4:	3f c0       	rjmp	.+126    	; 0x3524 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
    34a6:	6f 81       	ldd	r22, Y+7	; 0x07
    34a8:	78 85       	ldd	r23, Y+8	; 0x08
    34aa:	89 85       	ldd	r24, Y+9	; 0x09
    34ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	3f ef       	ldi	r19, 0xFF	; 255
    34b2:	4f e7       	ldi	r20, 0x7F	; 127
    34b4:	57 e4       	ldi	r21, 0x47	; 71
    34b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ba:	18 16       	cp	r1, r24
    34bc:	4c f5       	brge	.+82     	; 0x3510 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34be:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 e2       	ldi	r20, 0x20	; 32
    34cc:	51 e4       	ldi	r21, 0x41	; 65
    34ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	bc 01       	movw	r22, r24
    34d8:	cd 01       	movw	r24, r26
    34da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	9e 83       	std	Y+6, r25	; 0x06
    34e4:	8d 83       	std	Y+5, r24	; 0x05
    34e6:	0f c0       	rjmp	.+30     	; 0x3506 <voidSendEnablePulse+0xd0>
    34e8:	80 e9       	ldi	r24, 0x90	; 144
    34ea:	91 e0       	ldi	r25, 0x01	; 1
    34ec:	9c 83       	std	Y+4, r25	; 0x04
    34ee:	8b 83       	std	Y+3, r24	; 0x03
    34f0:	8b 81       	ldd	r24, Y+3	; 0x03
    34f2:	9c 81       	ldd	r25, Y+4	; 0x04
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	f1 f7       	brne	.-4      	; 0x34f4 <voidSendEnablePulse+0xbe>
    34f8:	9c 83       	std	Y+4, r25	; 0x04
    34fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fc:	8d 81       	ldd	r24, Y+5	; 0x05
    34fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	9e 83       	std	Y+6, r25	; 0x06
    3504:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3506:	8d 81       	ldd	r24, Y+5	; 0x05
    3508:	9e 81       	ldd	r25, Y+6	; 0x06
    350a:	00 97       	sbiw	r24, 0x00	; 0
    350c:	69 f7       	brne	.-38     	; 0x34e8 <voidSendEnablePulse+0xb2>
    350e:	14 c0       	rjmp	.+40     	; 0x3538 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3510:	6f 81       	ldd	r22, Y+7	; 0x07
    3512:	78 85       	ldd	r23, Y+8	; 0x08
    3514:	89 85       	ldd	r24, Y+9	; 0x09
    3516:	9a 85       	ldd	r25, Y+10	; 0x0a
    3518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	9e 83       	std	Y+6, r25	; 0x06
    3522:	8d 83       	std	Y+5, r24	; 0x05
    3524:	8d 81       	ldd	r24, Y+5	; 0x05
    3526:	9e 81       	ldd	r25, Y+6	; 0x06
    3528:	9a 83       	std	Y+2, r25	; 0x02
    352a:	89 83       	std	Y+1, r24	; 0x01
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	9a 81       	ldd	r25, Y+2	; 0x02
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	f1 f7       	brne	.-4      	; 0x3530 <voidSendEnablePulse+0xfa>
    3534:	9a 83       	std	Y+2, r25	; 0x02
    3536:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_LOW);
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	62 e0       	ldi	r22, 0x02	; 2
    353c:	40 e0       	ldi	r20, 0x00	; 0
    353e:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
}
    3542:	2e 96       	adiw	r28, 0x0e	; 14
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
    354e:	cf 91       	pop	r28
    3550:	df 91       	pop	r29
    3552:	08 95       	ret

00003554 <_helper_VoidReverseBuffer>:

static void _helper_VoidReverseBuffer(uint8* ref_u8Buffer, uint8 copy_u8StartIndex,uint8 copy_u8EndIndex){
    3554:	df 93       	push	r29
    3556:	cf 93       	push	r28
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	28 97       	sbiw	r28, 0x08	; 8
    355e:	0f b6       	in	r0, 0x3f	; 63
    3560:	f8 94       	cli
    3562:	de bf       	out	0x3e, r29	; 62
    3564:	0f be       	out	0x3f, r0	; 63
    3566:	cd bf       	out	0x3d, r28	; 61
    3568:	9e 83       	std	Y+6, r25	; 0x06
    356a:	8d 83       	std	Y+5, r24	; 0x05
    356c:	6f 83       	std	Y+7, r22	; 0x07
    356e:	48 87       	std	Y+8, r20	; 0x08
    uint8 Local_u8LCounter =copy_u8EndIndex;
    3570:	88 85       	ldd	r24, Y+8	; 0x08
    3572:	8c 83       	std	Y+4, r24	; 0x04

    uint8 Local_u8Tmp;
    uint8 Local_u8Mid = (copy_u8EndIndex/2),Local_u8IncPart = copy_u8EndIndex;
    3574:	88 85       	ldd	r24, Y+8	; 0x08
    3576:	86 95       	lsr	r24
    3578:	8a 83       	std	Y+2, r24	; 0x02
    357a:	88 85       	ldd	r24, Y+8	; 0x08
    357c:	89 83       	std	Y+1, r24	; 0x01
    if (copy_u8StartIndex)
    357e:	8f 81       	ldd	r24, Y+7	; 0x07
    3580:	88 23       	and	r24, r24
    3582:	e9 f1       	breq	.+122    	; 0x35fe <_helper_VoidReverseBuffer+0xaa>
        Local_u8IncPart = copy_u8EndIndex+1;
    3584:	88 85       	ldd	r24, Y+8	; 0x08
    3586:	8f 5f       	subi	r24, 0xFF	; 255
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	39 c0       	rjmp	.+114    	; 0x35fe <_helper_VoidReverseBuffer+0xaa>
    while(Local_u8LCounter>Local_u8Mid){
        Local_u8Tmp = ref_u8Buffer[Local_u8LCounter];
    358c:	8c 81       	ldd	r24, Y+4	; 0x04
    358e:	28 2f       	mov	r18, r24
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	8d 81       	ldd	r24, Y+5	; 0x05
    3594:	9e 81       	ldd	r25, Y+6	; 0x06
    3596:	fc 01       	movw	r30, r24
    3598:	e2 0f       	add	r30, r18
    359a:	f3 1f       	adc	r31, r19
    359c:	80 81       	ld	r24, Z
    359e:	8b 83       	std	Y+3, r24	; 0x03
        ref_u8Buffer[Local_u8LCounter]= ref_u8Buffer[Local_u8IncPart-Local_u8LCounter];
    35a0:	8c 81       	ldd	r24, Y+4	; 0x04
    35a2:	28 2f       	mov	r18, r24
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	8d 81       	ldd	r24, Y+5	; 0x05
    35a8:	9e 81       	ldd	r25, Y+6	; 0x06
    35aa:	dc 01       	movw	r26, r24
    35ac:	a2 0f       	add	r26, r18
    35ae:	b3 1f       	adc	r27, r19
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
    35b2:	28 2f       	mov	r18, r24
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	8c 81       	ldd	r24, Y+4	; 0x04
    35b8:	88 2f       	mov	r24, r24
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	a9 01       	movw	r20, r18
    35be:	48 1b       	sub	r20, r24
    35c0:	59 0b       	sbc	r21, r25
    35c2:	ca 01       	movw	r24, r20
    35c4:	9c 01       	movw	r18, r24
    35c6:	8d 81       	ldd	r24, Y+5	; 0x05
    35c8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ca:	fc 01       	movw	r30, r24
    35cc:	e2 0f       	add	r30, r18
    35ce:	f3 1f       	adc	r31, r19
    35d0:	80 81       	ld	r24, Z
    35d2:	8c 93       	st	X, r24
        ref_u8Buffer[Local_u8IncPart-Local_u8LCounter]=Local_u8Tmp;
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	28 2f       	mov	r18, r24
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	8c 81       	ldd	r24, Y+4	; 0x04
    35dc:	88 2f       	mov	r24, r24
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	a9 01       	movw	r20, r18
    35e2:	48 1b       	sub	r20, r24
    35e4:	59 0b       	sbc	r21, r25
    35e6:	ca 01       	movw	r24, r20
    35e8:	9c 01       	movw	r18, r24
    35ea:	8d 81       	ldd	r24, Y+5	; 0x05
    35ec:	9e 81       	ldd	r25, Y+6	; 0x06
    35ee:	fc 01       	movw	r30, r24
    35f0:	e2 0f       	add	r30, r18
    35f2:	f3 1f       	adc	r31, r19
    35f4:	8b 81       	ldd	r24, Y+3	; 0x03
    35f6:	80 83       	st	Z, r24
        Local_u8LCounter--;
    35f8:	8c 81       	ldd	r24, Y+4	; 0x04
    35fa:	81 50       	subi	r24, 0x01	; 1
    35fc:	8c 83       	std	Y+4, r24	; 0x04

    uint8 Local_u8Tmp;
    uint8 Local_u8Mid = (copy_u8EndIndex/2),Local_u8IncPart = copy_u8EndIndex;
    if (copy_u8StartIndex)
        Local_u8IncPart = copy_u8EndIndex+1;
    while(Local_u8LCounter>Local_u8Mid){
    35fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3600:	8a 81       	ldd	r24, Y+2	; 0x02
    3602:	89 17       	cp	r24, r25
    3604:	18 f2       	brcs	.-122    	; 0x358c <_helper_VoidReverseBuffer+0x38>
        ref_u8Buffer[Local_u8LCounter]= ref_u8Buffer[Local_u8IncPart-Local_u8LCounter];
        ref_u8Buffer[Local_u8IncPart-Local_u8LCounter]=Local_u8Tmp;
        Local_u8LCounter--;
    }

}
    3606:	28 96       	adiw	r28, 0x08	; 8
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	cf 91       	pop	r28
    3614:	df 91       	pop	r29
    3616:	08 95       	ret

00003618 <_helper_VoidNumToStr>:
static void _helper_VoidNumToStr(sint32 copy_s32number,uint8* ref_u8Buffer){
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	df 93       	push	r29
    361e:	cf 93       	push	r28
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
    3624:	28 97       	sbiw	r28, 0x08	; 8
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
    3630:	6b 83       	std	Y+3, r22	; 0x03
    3632:	7c 83       	std	Y+4, r23	; 0x04
    3634:	8d 83       	std	Y+5, r24	; 0x05
    3636:	9e 83       	std	Y+6, r25	; 0x06
    3638:	58 87       	std	Y+8, r21	; 0x08
    363a:	4f 83       	std	Y+7, r20	; 0x07



    if (copy_s32number==0){
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	9c 81       	ldd	r25, Y+4	; 0x04
    3640:	ad 81       	ldd	r26, Y+5	; 0x05
    3642:	be 81       	ldd	r27, Y+6	; 0x06
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	a1 05       	cpc	r26, r1
    3648:	b1 05       	cpc	r27, r1
    364a:	51 f4       	brne	.+20     	; 0x3660 <_helper_VoidNumToStr+0x48>
        ref_u8Buffer[0]='0';
    364c:	ef 81       	ldd	r30, Y+7	; 0x07
    364e:	f8 85       	ldd	r31, Y+8	; 0x08
    3650:	80 e3       	ldi	r24, 0x30	; 48
    3652:	80 83       	st	Z, r24
        ref_u8Buffer[1]='\0';
    3654:	8f 81       	ldd	r24, Y+7	; 0x07
    3656:	98 85       	ldd	r25, Y+8	; 0x08
    3658:	fc 01       	movw	r30, r24
    365a:	31 96       	adiw	r30, 0x01	; 1
    365c:	10 82       	st	Z, r1
    365e:	86 c0       	rjmp	.+268    	; 0x376c <_helper_VoidNumToStr+0x154>
        return;
    }

    uint8 Local_u8counter = 0;
    3660:	1a 82       	std	Y+2, r1	; 0x02
    uint8 Local_u8MFlag = 0;
    3662:	19 82       	std	Y+1, r1	; 0x01

    if(copy_s32number<0){
    3664:	8b 81       	ldd	r24, Y+3	; 0x03
    3666:	9c 81       	ldd	r25, Y+4	; 0x04
    3668:	ad 81       	ldd	r26, Y+5	; 0x05
    366a:	be 81       	ldd	r27, Y+6	; 0x06
    366c:	bb 23       	and	r27, r27
    366e:	0c f0       	brlt	.+2      	; 0x3672 <_helper_VoidNumToStr+0x5a>
    3670:	4d c0       	rjmp	.+154    	; 0x370c <_helper_VoidNumToStr+0xf4>
            ref_u8Buffer[Local_u8counter]='-';
    3672:	8a 81       	ldd	r24, Y+2	; 0x02
    3674:	28 2f       	mov	r18, r24
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	8f 81       	ldd	r24, Y+7	; 0x07
    367a:	98 85       	ldd	r25, Y+8	; 0x08
    367c:	fc 01       	movw	r30, r24
    367e:	e2 0f       	add	r30, r18
    3680:	f3 1f       	adc	r31, r19
    3682:	8d e2       	ldi	r24, 0x2D	; 45
    3684:	80 83       	st	Z, r24
            Local_u8counter++;
    3686:	8a 81       	ldd	r24, Y+2	; 0x02
    3688:	8f 5f       	subi	r24, 0xFF	; 255
    368a:	8a 83       	std	Y+2, r24	; 0x02
            copy_s32number *=-1;
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	9c 81       	ldd	r25, Y+4	; 0x04
    3690:	ad 81       	ldd	r26, Y+5	; 0x05
    3692:	be 81       	ldd	r27, Y+6	; 0x06
    3694:	b0 95       	com	r27
    3696:	a0 95       	com	r26
    3698:	90 95       	com	r25
    369a:	81 95       	neg	r24
    369c:	9f 4f       	sbci	r25, 0xFF	; 255
    369e:	af 4f       	sbci	r26, 0xFF	; 255
    36a0:	bf 4f       	sbci	r27, 0xFF	; 255
    36a2:	8b 83       	std	Y+3, r24	; 0x03
    36a4:	9c 83       	std	Y+4, r25	; 0x04
    36a6:	ad 83       	std	Y+5, r26	; 0x05
    36a8:	be 83       	std	Y+6, r27	; 0x06
            Local_u8MFlag = 1;
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	89 83       	std	Y+1, r24	; 0x01
    36ae:	2e c0       	rjmp	.+92     	; 0x370c <_helper_VoidNumToStr+0xf4>
    }
	while(copy_s32number){
        //printf("%d ",copy_s32number);

		ref_u8Buffer[Local_u8counter]=(copy_s32number%10)+48;
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
    36b2:	28 2f       	mov	r18, r24
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	8f 81       	ldd	r24, Y+7	; 0x07
    36b8:	98 85       	ldd	r25, Y+8	; 0x08
    36ba:	8c 01       	movw	r16, r24
    36bc:	02 0f       	add	r16, r18
    36be:	13 1f       	adc	r17, r19
    36c0:	8b 81       	ldd	r24, Y+3	; 0x03
    36c2:	9c 81       	ldd	r25, Y+4	; 0x04
    36c4:	ad 81       	ldd	r26, Y+5	; 0x05
    36c6:	be 81       	ldd	r27, Y+6	; 0x06
    36c8:	2a e0       	ldi	r18, 0x0A	; 10
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e0       	ldi	r20, 0x00	; 0
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	bc 01       	movw	r22, r24
    36d2:	cd 01       	movw	r24, r26
    36d4:	0e 94 0c 28 	call	0x5018	; 0x5018 <__divmodsi4>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	80 5d       	subi	r24, 0xD0	; 208
    36de:	f8 01       	movw	r30, r16
    36e0:	80 83       	st	Z, r24
		//printf("%d ",ref_u8Buffer[Local_u8counter]);
		copy_s32number /=10;
    36e2:	8b 81       	ldd	r24, Y+3	; 0x03
    36e4:	9c 81       	ldd	r25, Y+4	; 0x04
    36e6:	ad 81       	ldd	r26, Y+5	; 0x05
    36e8:	be 81       	ldd	r27, Y+6	; 0x06
    36ea:	2a e0       	ldi	r18, 0x0A	; 10
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	40 e0       	ldi	r20, 0x00	; 0
    36f0:	50 e0       	ldi	r21, 0x00	; 0
    36f2:	bc 01       	movw	r22, r24
    36f4:	cd 01       	movw	r24, r26
    36f6:	0e 94 0c 28 	call	0x5018	; 0x5018 <__divmodsi4>
    36fa:	da 01       	movw	r26, r20
    36fc:	c9 01       	movw	r24, r18
    36fe:	8b 83       	std	Y+3, r24	; 0x03
    3700:	9c 83       	std	Y+4, r25	; 0x04
    3702:	ad 83       	std	Y+5, r26	; 0x05
    3704:	be 83       	std	Y+6, r27	; 0x06
        Local_u8counter++;
    3706:	8a 81       	ldd	r24, Y+2	; 0x02
    3708:	8f 5f       	subi	r24, 0xFF	; 255
    370a:	8a 83       	std	Y+2, r24	; 0x02
            ref_u8Buffer[Local_u8counter]='-';
            Local_u8counter++;
            copy_s32number *=-1;
            Local_u8MFlag = 1;
    }
	while(copy_s32number){
    370c:	8b 81       	ldd	r24, Y+3	; 0x03
    370e:	9c 81       	ldd	r25, Y+4	; 0x04
    3710:	ad 81       	ldd	r26, Y+5	; 0x05
    3712:	be 81       	ldd	r27, Y+6	; 0x06
    3714:	00 97       	sbiw	r24, 0x00	; 0
    3716:	a1 05       	cpc	r26, r1
    3718:	b1 05       	cpc	r27, r1
    371a:	51 f6       	brne	.-108    	; 0x36b0 <_helper_VoidNumToStr+0x98>
		//printf("%d ",ref_u8Buffer[Local_u8counter]);
		copy_s32number /=10;
        Local_u8counter++;

	}
    if (Local_u8counter > CLCD_u8_LINE_SIZE )
    371c:	8a 81       	ldd	r24, Y+2	; 0x02
    371e:	81 31       	cpi	r24, 0x11	; 17
    3720:	30 f0       	brcs	.+12     	; 0x372e <_helper_VoidNumToStr+0x116>
        ref_u8Buffer[CLCD_u8_LINE_SIZE]='\0';
    3722:	8f 81       	ldd	r24, Y+7	; 0x07
    3724:	98 85       	ldd	r25, Y+8	; 0x08
    3726:	fc 01       	movw	r30, r24
    3728:	70 96       	adiw	r30, 0x10	; 16
    372a:	10 82       	st	Z, r1
    372c:	09 c0       	rjmp	.+18     	; 0x3740 <_helper_VoidNumToStr+0x128>
    else
	    ref_u8Buffer[Local_u8counter]='\0';
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	28 2f       	mov	r18, r24
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	8f 81       	ldd	r24, Y+7	; 0x07
    3736:	98 85       	ldd	r25, Y+8	; 0x08
    3738:	fc 01       	movw	r30, r24
    373a:	e2 0f       	add	r30, r18
    373c:	f3 1f       	adc	r31, r19
    373e:	10 82       	st	Z, r1
	if (Local_u8MFlag ==0)
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	88 23       	and	r24, r24
    3744:	51 f4       	brne	.+20     	; 0x375a <_helper_VoidNumToStr+0x142>
		_helper_VoidReverseBuffer(ref_u8Buffer,0,Local_u8counter-1);
    3746:	8a 81       	ldd	r24, Y+2	; 0x02
    3748:	28 2f       	mov	r18, r24
    374a:	21 50       	subi	r18, 0x01	; 1
    374c:	8f 81       	ldd	r24, Y+7	; 0x07
    374e:	98 85       	ldd	r25, Y+8	; 0x08
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	42 2f       	mov	r20, r18
    3754:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_helper_VoidReverseBuffer>
    3758:	09 c0       	rjmp	.+18     	; 0x376c <_helper_VoidNumToStr+0x154>
    else
    	_helper_VoidReverseBuffer(ref_u8Buffer,1,Local_u8counter-1);
    375a:	8a 81       	ldd	r24, Y+2	; 0x02
    375c:	28 2f       	mov	r18, r24
    375e:	21 50       	subi	r18, 0x01	; 1
    3760:	8f 81       	ldd	r24, Y+7	; 0x07
    3762:	98 85       	ldd	r25, Y+8	; 0x08
    3764:	61 e0       	ldi	r22, 0x01	; 1
    3766:	42 2f       	mov	r20, r18
    3768:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_helper_VoidReverseBuffer>
	//return ;
}
    376c:	28 96       	adiw	r28, 0x08	; 8
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	0f be       	out	0x3f, r0	; 63
    3776:	cd bf       	out	0x3d, r28	; 61
    3778:	cf 91       	pop	r28
    377a:	df 91       	pop	r29
    377c:	1f 91       	pop	r17
    377e:	0f 91       	pop	r16
    3780:	08 95       	ret

00003782 <CLCD_VoidSendCommand>:

void CLCD_VoidSendCommand(uint8 copy_u8command){
    3782:	df 93       	push	r29
    3784:	cf 93       	push	r28
    3786:	0f 92       	push	r0
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	89 83       	std	Y+1, r24	; 0x01

    // 1-set RS pin to low for command
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_PIN_LOW);
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	61 e0       	ldi	r22, 0x01	; 1
    3792:	40 e0       	ldi	r20, 0x00	; 0
    3794:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    _delay_ms(2);
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_LOW);

    #elif CLCD_u8CONNECTION_MODE ==  FOUR_BIT
    // 3- send the command
    voidSetHalfDataPort(copy_u8command>>4u);
    3798:	89 81       	ldd	r24, Y+1	; 0x01
    379a:	82 95       	swap	r24
    379c:	8f 70       	andi	r24, 0x0F	; 15
    379e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <voidSetHalfDataPort>
    // 4- send enable pulse
    voidSendEnablePulse();
    37a2:	0e 94 1b 1a 	call	0x3436	; 0x3436 <voidSendEnablePulse>
    // 3- send the command
    voidSetHalfDataPort(copy_u8command);
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <voidSetHalfDataPort>
    // 4- send enable pulse
    voidSendEnablePulse();
    37ac:	0e 94 1b 1a 	call	0x3436	; 0x3436 <voidSendEnablePulse>
    #endif


}
    37b0:	0f 90       	pop	r0
    37b2:	cf 91       	pop	r28
    37b4:	df 91       	pop	r29
    37b6:	08 95       	ret

000037b8 <CLCD_VoidSendData>:
void CLCD_VoidSendData(uint8 copy_u8Data){
    37b8:	df 93       	push	r29
    37ba:	cf 93       	push	r28
    37bc:	0f 92       	push	r0
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
    37c2:	89 83       	std	Y+1, r24	; 0x01
    // 1-set RS pin to low for command
	DIO_u8_SetPinVal(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_PIN_HIGH);
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	61 e0       	ldi	r22, 0x01	; 1
    37c8:	41 e0       	ldi	r20, 0x01	; 1
    37ca:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    _delay_ms(2);
    DIO_u8_SetPinVal(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_LOW);

    #elif CLCD_u8CONNECTION_MODE ==  FOUR_BIT
    // 3- send the most significant part of data
    voidSetHalfDataPort(copy_u8Data>>4u);
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	82 95       	swap	r24
    37d2:	8f 70       	andi	r24, 0x0F	; 15
    37d4:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <voidSetHalfDataPort>
    // 4- send enable pulse
    voidSendEnablePulse();
    37d8:	0e 94 1b 1a 	call	0x3436	; 0x3436 <voidSendEnablePulse>
    // 3- send the least significant part of data
    voidSetHalfDataPort(copy_u8Data);
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <voidSetHalfDataPort>
    // 4- send enable pulse
    voidSendEnablePulse();
    37e2:	0e 94 1b 1a 	call	0x3436	; 0x3436 <voidSendEnablePulse>
    #endif

}
    37e6:	0f 90       	pop	r0
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	08 95       	ret

000037ee <CLCD_VoidInit>:
void CLCD_VoidInit(void){
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	cd b7       	in	r28, 0x3d	; 61
    37f4:	de b7       	in	r29, 0x3e	; 62
    37f6:	2e 97       	sbiw	r28, 0x0e	; 14
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	a0 e2       	ldi	r26, 0x20	; 32
    3808:	b2 e4       	ldi	r27, 0x42	; 66
    380a:	8b 87       	std	Y+11, r24	; 0x0b
    380c:	9c 87       	std	Y+12, r25	; 0x0c
    380e:	ad 87       	std	Y+13, r26	; 0x0d
    3810:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3812:	6b 85       	ldd	r22, Y+11	; 0x0b
    3814:	7c 85       	ldd	r23, Y+12	; 0x0c
    3816:	8d 85       	ldd	r24, Y+13	; 0x0d
    3818:	9e 85       	ldd	r25, Y+14	; 0x0e
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	4a e7       	ldi	r20, 0x7A	; 122
    3820:	55 e4       	ldi	r21, 0x45	; 69
    3822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	8f 83       	std	Y+7, r24	; 0x07
    382c:	98 87       	std	Y+8, r25	; 0x08
    382e:	a9 87       	std	Y+9, r26	; 0x09
    3830:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3832:	6f 81       	ldd	r22, Y+7	; 0x07
    3834:	78 85       	ldd	r23, Y+8	; 0x08
    3836:	89 85       	ldd	r24, Y+9	; 0x09
    3838:	9a 85       	ldd	r25, Y+10	; 0x0a
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	40 e8       	ldi	r20, 0x80	; 128
    3840:	5f e3       	ldi	r21, 0x3F	; 63
    3842:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3846:	88 23       	and	r24, r24
    3848:	2c f4       	brge	.+10     	; 0x3854 <CLCD_VoidInit+0x66>
		__ticks = 1;
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	9e 83       	std	Y+6, r25	; 0x06
    3850:	8d 83       	std	Y+5, r24	; 0x05
    3852:	3f c0       	rjmp	.+126    	; 0x38d2 <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    3854:	6f 81       	ldd	r22, Y+7	; 0x07
    3856:	78 85       	ldd	r23, Y+8	; 0x08
    3858:	89 85       	ldd	r24, Y+9	; 0x09
    385a:	9a 85       	ldd	r25, Y+10	; 0x0a
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	3f ef       	ldi	r19, 0xFF	; 255
    3860:	4f e7       	ldi	r20, 0x7F	; 127
    3862:	57 e4       	ldi	r21, 0x47	; 71
    3864:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3868:	18 16       	cp	r1, r24
    386a:	4c f5       	brge	.+82     	; 0x38be <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386c:	6b 85       	ldd	r22, Y+11	; 0x0b
    386e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3870:	8d 85       	ldd	r24, Y+13	; 0x0d
    3872:	9e 85       	ldd	r25, Y+14	; 0x0e
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	40 e2       	ldi	r20, 0x20	; 32
    387a:	51 e4       	ldi	r21, 0x41	; 65
    387c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	bc 01       	movw	r22, r24
    3886:	cd 01       	movw	r24, r26
    3888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	9e 83       	std	Y+6, r25	; 0x06
    3892:	8d 83       	std	Y+5, r24	; 0x05
    3894:	0f c0       	rjmp	.+30     	; 0x38b4 <CLCD_VoidInit+0xc6>
    3896:	80 e9       	ldi	r24, 0x90	; 144
    3898:	91 e0       	ldi	r25, 0x01	; 1
    389a:	9c 83       	std	Y+4, r25	; 0x04
    389c:	8b 83       	std	Y+3, r24	; 0x03
    389e:	8b 81       	ldd	r24, Y+3	; 0x03
    38a0:	9c 81       	ldd	r25, Y+4	; 0x04
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <CLCD_VoidInit+0xb4>
    38a6:	9c 83       	std	Y+4, r25	; 0x04
    38a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38aa:	8d 81       	ldd	r24, Y+5	; 0x05
    38ac:	9e 81       	ldd	r25, Y+6	; 0x06
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	9e 83       	std	Y+6, r25	; 0x06
    38b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b4:	8d 81       	ldd	r24, Y+5	; 0x05
    38b6:	9e 81       	ldd	r25, Y+6	; 0x06
    38b8:	00 97       	sbiw	r24, 0x00	; 0
    38ba:	69 f7       	brne	.-38     	; 0x3896 <CLCD_VoidInit+0xa8>
    38bc:	14 c0       	rjmp	.+40     	; 0x38e6 <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38be:	6f 81       	ldd	r22, Y+7	; 0x07
    38c0:	78 85       	ldd	r23, Y+8	; 0x08
    38c2:	89 85       	ldd	r24, Y+9	; 0x09
    38c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ca:	dc 01       	movw	r26, r24
    38cc:	cb 01       	movw	r24, r22
    38ce:	9e 83       	std	Y+6, r25	; 0x06
    38d0:	8d 83       	std	Y+5, r24	; 0x05
    38d2:	8d 81       	ldd	r24, Y+5	; 0x05
    38d4:	9e 81       	ldd	r25, Y+6	; 0x06
    38d6:	9a 83       	std	Y+2, r25	; 0x02
    38d8:	89 83       	std	Y+1, r24	; 0x01
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	9a 81       	ldd	r25, Y+2	; 0x02
    38de:	01 97       	sbiw	r24, 0x01	; 1
    38e0:	f1 f7       	brne	.-4      	; 0x38de <CLCD_VoidInit+0xf0>
    38e2:	9a 83       	std	Y+2, r25	; 0x02
    38e4:	89 83       	std	Y+1, r24	; 0x01
    //2- function set command :2 lines, font size 5*7
    #if CLCD_u8CONNECTION_MODE ==  EIGHT_BIT
    CLCD_VoidSendCommand(0b00111000);

    #elif CLCD_u8CONNECTION_MODE ==  FOUR_BIT
    CLCD_VoidSendCommand(0X22);
    38e6:	82 e2       	ldi	r24, 0x22	; 34
    38e8:	0e 94 c1 1b 	call	0x3782	; 0x3782 <CLCD_VoidSendCommand>
    voidSetHalfDataPort(0b1000);
    38ec:	88 e0       	ldi	r24, 0x08	; 8
    38ee:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <voidSetHalfDataPort>
    voidSendEnablePulse();
    38f2:	0e 94 1b 1a 	call	0x3436	; 0x3436 <voidSendEnablePulse>
    #endif
    //3- Display on/off control: display on ,cursor off, blink cursor off
    CLCD_VoidSendCommand(0b00001100);
    38f6:	8c e0       	ldi	r24, 0x0C	; 12
    38f8:	0e 94 c1 1b 	call	0x3782	; 0x3782 <CLCD_VoidSendCommand>
    //4- Display clear
    CLCD_VoidSendCommand(1);
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	0e 94 c1 1b 	call	0x3782	; 0x3782 <CLCD_VoidSendCommand>
}
    3902:	2e 96       	adiw	r28, 0x0e	; 14
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	cf 91       	pop	r28
    3910:	df 91       	pop	r29
    3912:	08 95       	ret

00003914 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 copy_u8xPos,uint8 copy_Ypos){
    3914:	df 93       	push	r29
    3916:	cf 93       	push	r28
    3918:	00 d0       	rcall	.+0      	; 0x391a <CLCD_voidGoToXY+0x6>
    391a:	0f 92       	push	r0
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
    3920:	8a 83       	std	Y+2, r24	; 0x02
    3922:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRamAdd =(copy_Ypos *0x40u)+ copy_u8xPos;
    3924:	8b 81       	ldd	r24, Y+3	; 0x03
    3926:	88 2f       	mov	r24, r24
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	00 24       	eor	r0, r0
    392c:	96 95       	lsr	r25
    392e:	87 95       	ror	r24
    3930:	07 94       	ror	r0
    3932:	96 95       	lsr	r25
    3934:	87 95       	ror	r24
    3936:	07 94       	ror	r0
    3938:	98 2f       	mov	r25, r24
    393a:	80 2d       	mov	r24, r0
    393c:	98 2f       	mov	r25, r24
    393e:	8a 81       	ldd	r24, Y+2	; 0x02
    3940:	89 0f       	add	r24, r25
    3942:	89 83       	std	Y+1, r24	; 0x01

	CLCD_VoidSendCommand(SET_BIT(Local_u8DDRamAdd,7u));
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	80 68       	ori	r24, 0x80	; 128
    3948:	89 83       	std	Y+1, r24	; 0x01
    394a:	89 81       	ldd	r24, Y+1	; 0x01
    394c:	0e 94 c1 1b 	call	0x3782	; 0x3782 <CLCD_VoidSendCommand>
}
    3950:	0f 90       	pop	r0
    3952:	0f 90       	pop	r0
    3954:	0f 90       	pop	r0
    3956:	cf 91       	pop	r28
    3958:	df 91       	pop	r29
    395a:	08 95       	ret

0000395c <CLCD_u8WriteSpecialChar>:

uint8 CLCD_u8WriteSpecialChar(uint8 copy_u8PatternNumber,uint8* copy_pu8PatternArr){
    395c:	df 93       	push	r29
    395e:	cf 93       	push	r28
    3960:	00 d0       	rcall	.+0      	; 0x3962 <CLCD_u8WriteSpecialChar+0x6>
    3962:	00 d0       	rcall	.+0      	; 0x3964 <CLCD_u8WriteSpecialChar+0x8>
    3964:	00 d0       	rcall	.+0      	; 0x3966 <CLCD_u8WriteSpecialChar+0xa>
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	8c 83       	std	Y+4, r24	; 0x04
    396c:	7e 83       	std	Y+6, r23	; 0x06
    396e:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Local_u8ErrorState = OK;
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8Counter=0;
    3974:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8CGRamAdd =copy_u8PatternNumber*8u;
    3976:	8c 81       	ldd	r24, Y+4	; 0x04
    3978:	88 2f       	mov	r24, r24
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	88 0f       	add	r24, r24
    397e:	99 1f       	adc	r25, r25
    3980:	88 0f       	add	r24, r24
    3982:	99 1f       	adc	r25, r25
    3984:	88 0f       	add	r24, r24
    3986:	99 1f       	adc	r25, r25
    3988:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu8PatternArr != NULL){
    398a:	8d 81       	ldd	r24, Y+5	; 0x05
    398c:	9e 81       	ldd	r25, Y+6	; 0x06
    398e:	00 97       	sbiw	r24, 0x00	; 0
    3990:	c9 f0       	breq	.+50     	; 0x39c4 <CLCD_u8WriteSpecialChar+0x68>
		CLCD_VoidSendCommand(SET_BIT(Local_u8CGRamAdd,6u));
    3992:	89 81       	ldd	r24, Y+1	; 0x01
    3994:	80 64       	ori	r24, 0x40	; 64
    3996:	89 83       	std	Y+1, r24	; 0x01
    3998:	89 81       	ldd	r24, Y+1	; 0x01
    399a:	0e 94 c1 1b 	call	0x3782	; 0x3782 <CLCD_VoidSendCommand>
    399e:	0e c0       	rjmp	.+28     	; 0x39bc <CLCD_u8WriteSpecialChar+0x60>
		while(Local_u8Counter<8){
			CLCD_VoidSendData(copy_pu8PatternArr[Local_u8Counter]);
    39a0:	8a 81       	ldd	r24, Y+2	; 0x02
    39a2:	28 2f       	mov	r18, r24
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	8d 81       	ldd	r24, Y+5	; 0x05
    39a8:	9e 81       	ldd	r25, Y+6	; 0x06
    39aa:	fc 01       	movw	r30, r24
    39ac:	e2 0f       	add	r30, r18
    39ae:	f3 1f       	adc	r31, r19
    39b0:	80 81       	ld	r24, Z
    39b2:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <CLCD_VoidSendData>
			Local_u8Counter++;
    39b6:	8a 81       	ldd	r24, Y+2	; 0x02
    39b8:	8f 5f       	subi	r24, 0xFF	; 255
    39ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
	uint8 Local_u8Counter=0;
	uint8 Local_u8CGRamAdd =copy_u8PatternNumber*8u;
	if(copy_pu8PatternArr != NULL){
		CLCD_VoidSendCommand(SET_BIT(Local_u8CGRamAdd,6u));
		while(Local_u8Counter<8){
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	88 30       	cpi	r24, 0x08	; 8
    39c0:	78 f3       	brcs	.-34     	; 0x39a0 <CLCD_u8WriteSpecialChar+0x44>
    39c2:	02 c0       	rjmp	.+4      	; 0x39c8 <CLCD_u8WriteSpecialChar+0x6c>
			CLCD_VoidSendData(copy_pu8PatternArr[Local_u8Counter]);
			Local_u8Counter++;
		}
//		CLCD_voidGoToXY()
	}else{
		Local_u8ErrorState = NOK;
    39c4:	82 e0       	ldi	r24, 0x02	; 2
    39c6:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
    39c8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    39ca:	26 96       	adiw	r28, 0x06	; 6
    39cc:	0f b6       	in	r0, 0x3f	; 63
    39ce:	f8 94       	cli
    39d0:	de bf       	out	0x3e, r29	; 62
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	cd bf       	out	0x3d, r28	; 61
    39d6:	cf 91       	pop	r28
    39d8:	df 91       	pop	r29
    39da:	08 95       	ret

000039dc <CLCD_VoidPrintChars>:


void CLCD_VoidPrintChars(const uint8* copy_u8charArray){
    39dc:	df 93       	push	r29
    39de:	cf 93       	push	r28
    39e0:	00 d0       	rcall	.+0      	; 0x39e2 <CLCD_VoidPrintChars+0x6>
    39e2:	0f 92       	push	r0
    39e4:	cd b7       	in	r28, 0x3d	; 61
    39e6:	de b7       	in	r29, 0x3e	; 62
    39e8:	9b 83       	std	Y+3, r25	; 0x03
    39ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8strCounter=0u;
    39ec:	19 82       	std	Y+1, r1	; 0x01
    39ee:	0e c0       	rjmp	.+28     	; 0x3a0c <CLCD_VoidPrintChars+0x30>
	while(copy_u8charArray[Local_u8strCounter] != '\0'){
		CLCD_VoidSendData(copy_u8charArray[Local_u8strCounter]);
    39f0:	89 81       	ldd	r24, Y+1	; 0x01
    39f2:	28 2f       	mov	r18, r24
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	9b 81       	ldd	r25, Y+3	; 0x03
    39fa:	fc 01       	movw	r30, r24
    39fc:	e2 0f       	add	r30, r18
    39fe:	f3 1f       	adc	r31, r19
    3a00:	80 81       	ld	r24, Z
    3a02:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <CLCD_VoidSendData>
		Local_u8strCounter++;
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	8f 5f       	subi	r24, 0xFF	; 255
    3a0a:	89 83       	std	Y+1, r24	; 0x01
}


void CLCD_VoidPrintChars(const uint8* copy_u8charArray){
	uint8 Local_u8strCounter=0u;
	while(copy_u8charArray[Local_u8strCounter] != '\0'){
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	28 2f       	mov	r18, r24
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	8a 81       	ldd	r24, Y+2	; 0x02
    3a14:	9b 81       	ldd	r25, Y+3	; 0x03
    3a16:	fc 01       	movw	r30, r24
    3a18:	e2 0f       	add	r30, r18
    3a1a:	f3 1f       	adc	r31, r19
    3a1c:	80 81       	ld	r24, Z
    3a1e:	88 23       	and	r24, r24
    3a20:	39 f7       	brne	.-50     	; 0x39f0 <CLCD_VoidPrintChars+0x14>
		CLCD_VoidSendData(copy_u8charArray[Local_u8strCounter]);
		Local_u8strCounter++;
	}
}
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	cf 91       	pop	r28
    3a2a:	df 91       	pop	r29
    3a2c:	08 95       	ret

00003a2e <CLCD_VoidPrintInt>:


void CLCD_VoidPrintInt(sint32 copy_s32number){
    3a2e:	df 93       	push	r29
    3a30:	cf 93       	push	r28
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	64 97       	sbiw	r28, 0x14	; 20
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	de bf       	out	0x3e, r29	; 62
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	cd bf       	out	0x3d, r28	; 61
    3a42:	69 8b       	std	Y+17, r22	; 0x11
    3a44:	7a 8b       	std	Y+18, r23	; 0x12
    3a46:	8b 8b       	std	Y+19, r24	; 0x13
    3a48:	9c 8b       	std	Y+20, r25	; 0x14
    uint8 Local_u8Buffer[16];
    _helper_VoidNumToStr(copy_s32number,Local_u8Buffer);
    3a4a:	89 89       	ldd	r24, Y+17	; 0x11
    3a4c:	9a 89       	ldd	r25, Y+18	; 0x12
    3a4e:	ab 89       	ldd	r26, Y+19	; 0x13
    3a50:	bc 89       	ldd	r27, Y+20	; 0x14
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	9e 01       	movw	r18, r28
    3a58:	2f 5f       	subi	r18, 0xFF	; 255
    3a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a5c:	a9 01       	movw	r20, r18
    3a5e:	0e 94 0c 1b 	call	0x3618	; 0x3618 <_helper_VoidNumToStr>
    CLCD_VoidPrintChars(Local_u8Buffer);
    3a62:	ce 01       	movw	r24, r28
    3a64:	01 96       	adiw	r24, 0x01	; 1
    3a66:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <CLCD_VoidPrintChars>

}
    3a6a:	64 96       	adiw	r28, 0x14	; 20
    3a6c:	0f b6       	in	r0, 0x3f	; 63
    3a6e:	f8 94       	cli
    3a70:	de bf       	out	0x3e, r29	; 62
    3a72:	0f be       	out	0x3f, r0	; 63
    3a74:	cd bf       	out	0x3d, r28	; 61
    3a76:	cf 91       	pop	r28
    3a78:	df 91       	pop	r29
    3a7a:	08 95       	ret

00003a7c <CLCD_VoidPrintFloat>:

void CLCD_VoidPrintFloat(sint32 copy_s32IntegerPart,uint32 copy_s32FloatingPart){
    3a7c:	df 93       	push	r29
    3a7e:	cf 93       	push	r28
    3a80:	cd b7       	in	r28, 0x3d	; 61
    3a82:	de b7       	in	r29, 0x3e	; 62
    3a84:	68 97       	sbiw	r28, 0x18	; 24
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	f8 94       	cli
    3a8a:	de bf       	out	0x3e, r29	; 62
    3a8c:	0f be       	out	0x3f, r0	; 63
    3a8e:	cd bf       	out	0x3d, r28	; 61
    3a90:	69 8b       	std	Y+17, r22	; 0x11
    3a92:	7a 8b       	std	Y+18, r23	; 0x12
    3a94:	8b 8b       	std	Y+19, r24	; 0x13
    3a96:	9c 8b       	std	Y+20, r25	; 0x14
    3a98:	2d 8b       	std	Y+21, r18	; 0x15
    3a9a:	3e 8b       	std	Y+22, r19	; 0x16
    3a9c:	4f 8b       	std	Y+23, r20	; 0x17
    3a9e:	58 8f       	std	Y+24, r21	; 0x18
    uint8 Local_u8Buffer[16];
    _helper_VoidNumToStr(copy_s32IntegerPart,Local_u8Buffer);
    3aa0:	89 89       	ldd	r24, Y+17	; 0x11
    3aa2:	9a 89       	ldd	r25, Y+18	; 0x12
    3aa4:	ab 89       	ldd	r26, Y+19	; 0x13
    3aa6:	bc 89       	ldd	r27, Y+20	; 0x14
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	9e 01       	movw	r18, r28
    3aae:	2f 5f       	subi	r18, 0xFF	; 255
    3ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab2:	a9 01       	movw	r20, r18
    3ab4:	0e 94 0c 1b 	call	0x3618	; 0x3618 <_helper_VoidNumToStr>
    CLCD_VoidPrintChars(Local_u8Buffer);
    3ab8:	ce 01       	movw	r24, r28
    3aba:	01 96       	adiw	r24, 0x01	; 1
    3abc:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <CLCD_VoidPrintChars>
    CLCD_VoidSendData('.');
    3ac0:	8e e2       	ldi	r24, 0x2E	; 46
    3ac2:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <CLCD_VoidSendData>
    _helper_VoidNumToStr(copy_s32FloatingPart,Local_u8Buffer);
    3ac6:	8d 89       	ldd	r24, Y+21	; 0x15
    3ac8:	9e 89       	ldd	r25, Y+22	; 0x16
    3aca:	af 89       	ldd	r26, Y+23	; 0x17
    3acc:	b8 8d       	ldd	r27, Y+24	; 0x18
    3ace:	bc 01       	movw	r22, r24
    3ad0:	cd 01       	movw	r24, r26
    3ad2:	9e 01       	movw	r18, r28
    3ad4:	2f 5f       	subi	r18, 0xFF	; 255
    3ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad8:	a9 01       	movw	r20, r18
    3ada:	0e 94 0c 1b 	call	0x3618	; 0x3618 <_helper_VoidNumToStr>
    CLCD_VoidPrintChars(Local_u8Buffer);
    3ade:	ce 01       	movw	r24, r28
    3ae0:	01 96       	adiw	r24, 0x01	; 1
    3ae2:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <CLCD_VoidPrintChars>
}
    3ae6:	68 96       	adiw	r28, 0x18	; 24
    3ae8:	0f b6       	in	r0, 0x3f	; 63
    3aea:	f8 94       	cli
    3aec:	de bf       	out	0x3e, r29	; 62
    3aee:	0f be       	out	0x3f, r0	; 63
    3af0:	cd bf       	out	0x3d, r28	; 61
    3af2:	cf 91       	pop	r28
    3af4:	df 91       	pop	r29
    3af6:	08 95       	ret

00003af8 <ADC_voidInit>:
static uint8 ADC_u8ChainFlag = IDLE;
static uint8 ADC_u8ChainDeviceCount=0u;
static ADC_CHAIN_config_t* ADC_u8ChainDevices=NULL;
static uint8 ADC_u8ISRBusyFlag= IDLE;
void ADC_voidInit()
{
    3af8:	df 93       	push	r29
    3afa:	cf 93       	push	r28
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
	// 1- referance selection
#if ADC_u8ReferanceSelection == AREF
	CLS_BIT(ADMUX, REFS1);
	CLS_BIT(ADMUX, REFS0);
#elif ADC_u8ReferanceSelection == AVCC
	CLS_BIT(ADMUX, REFS1);
    3b00:	a7 e2       	ldi	r26, 0x27	; 39
    3b02:	b0 e0       	ldi	r27, 0x00	; 0
    3b04:	e7 e2       	ldi	r30, 0x27	; 39
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	80 81       	ld	r24, Z
    3b0a:	8f 77       	andi	r24, 0x7F	; 127
    3b0c:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
    3b0e:	a7 e2       	ldi	r26, 0x27	; 39
    3b10:	b0 e0       	ldi	r27, 0x00	; 0
    3b12:	e7 e2       	ldi	r30, 0x27	; 39
    3b14:	f0 e0       	ldi	r31, 0x00	; 0
    3b16:	80 81       	ld	r24, Z
    3b18:	80 64       	ori	r24, 0x40	; 64
    3b1a:	8c 93       	st	X, r24

	// 2-bits presentaion
#if ADC_u8_presentationBits == EIGHT_BITS // left adjust
	SET_BIT(ADMUX, ADLAR);
#elif ADC_u8_presentationBits == TEN_BITS
	CLS_BIT(ADMUX, ADLAR); // right adjust
    3b1c:	a7 e2       	ldi	r26, 0x27	; 39
    3b1e:	b0 e0       	ldi	r27, 0x00	; 0
    3b20:	e7 e2       	ldi	r30, 0x27	; 39
    3b22:	f0 e0       	ldi	r31, 0x00	; 0
    3b24:	80 81       	ld	r24, Z
    3b26:	8f 7d       	andi	r24, 0xDF	; 223
    3b28:	8c 93       	st	X, r24
#else
#error "Wrong ADC_u8_presentationBits configuration option"
#endif

	// 3- prescaler setting
	ADCSRA &= PRESCALER_MASK;
    3b2a:	a6 e2       	ldi	r26, 0x26	; 38
    3b2c:	b0 e0       	ldi	r27, 0x00	; 0
    3b2e:	e6 e2       	ldi	r30, 0x26	; 38
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	80 81       	ld	r24, Z
    3b34:	88 7f       	andi	r24, 0xF8	; 248
    3b36:	8c 93       	st	X, r24
	ADCSRA |=ADC_u8_DevisionFactor;
    3b38:	a6 e2       	ldi	r26, 0x26	; 38
    3b3a:	b0 e0       	ldi	r27, 0x00	; 0
    3b3c:	e6 e2       	ldi	r30, 0x26	; 38
    3b3e:	f0 e0       	ldi	r31, 0x00	; 0
    3b40:	80 81       	ld	r24, Z
    3b42:	81 60       	ori	r24, 0x01	; 1
    3b44:	8c 93       	st	X, r24

	// 3- enable ADC
	SET_BIT(ADCSRA, ADEN);
    3b46:	a6 e2       	ldi	r26, 0x26	; 38
    3b48:	b0 e0       	ldi	r27, 0x00	; 0
    3b4a:	e6 e2       	ldi	r30, 0x26	; 38
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	80 81       	ld	r24, Z
    3b50:	80 68       	ori	r24, 0x80	; 128
    3b52:	8c 93       	st	X, r24
}
    3b54:	cf 91       	pop	r28
    3b56:	df 91       	pop	r29
    3b58:	08 95       	ret

00003b5a <ADC_u8StartConverstionSync>:

uint8 ADC_u8StartConverstionSync(ADC_channel_t copy_Channel, uint16* referance_u16DigResult)
{
    3b5a:	df 93       	push	r29
    3b5c:	cf 93       	push	r28
    3b5e:	cd b7       	in	r28, 0x3d	; 61
    3b60:	de b7       	in	r29, 0x3e	; 62
    3b62:	28 97       	sbiw	r28, 0x08	; 8
    3b64:	0f b6       	in	r0, 0x3f	; 63
    3b66:	f8 94       	cli
    3b68:	de bf       	out	0x3e, r29	; 62
    3b6a:	0f be       	out	0x3f, r0	; 63
    3b6c:	cd bf       	out	0x3d, r28	; 61
    3b6e:	8e 83       	std	Y+6, r24	; 0x06
    3b70:	78 87       	std	Y+8, r23	; 0x08
    3b72:	6f 83       	std	Y+7, r22	; 0x07
	uint8 Local_u8ErrorState = OK;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	8d 83       	std	Y+5, r24	; 0x05
	if (referance_u16DigResult != NULL)
    3b78:	8f 81       	ldd	r24, Y+7	; 0x07
    3b7a:	98 85       	ldd	r25, Y+8	; 0x08
    3b7c:	00 97       	sbiw	r24, 0x00	; 0
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <ADC_u8StartConverstionSync+0x28>
    3b80:	68 c0       	rjmp	.+208    	; 0x3c52 <ADC_u8StartConverstionSync+0xf8>
	{
		if(ADC_u8BusyFlag ==IDLE){
    3b82:	80 91 ae 01 	lds	r24, 0x01AE
    3b86:	81 30       	cpi	r24, 0x01	; 1
    3b88:	09 f0       	breq	.+2      	; 0x3b8c <ADC_u8StartConverstionSync+0x32>
    3b8a:	60 c0       	rjmp	.+192    	; 0x3c4c <ADC_u8StartConverstionSync+0xf2>
			ADC_u8BusyFlag = BUSY;
    3b8c:	82 e0       	ldi	r24, 0x02	; 2
    3b8e:	80 93 ae 01 	sts	0x01AE, r24
			uint32 Local_u32Counter = 0u;
    3b92:	19 82       	std	Y+1, r1	; 0x01
    3b94:	1a 82       	std	Y+2, r1	; 0x02
    3b96:	1b 82       	std	Y+3, r1	; 0x03
    3b98:	1c 82       	std	Y+4, r1	; 0x04
			// 1-start required channel
			ADMUX &=CHANNEL_SELECTION_MASK;
    3b9a:	a7 e2       	ldi	r26, 0x27	; 39
    3b9c:	b0 e0       	ldi	r27, 0x00	; 0
    3b9e:	e7 e2       	ldi	r30, 0x27	; 39
    3ba0:	f0 e0       	ldi	r31, 0x00	; 0
    3ba2:	80 81       	ld	r24, Z
    3ba4:	80 7e       	andi	r24, 0xE0	; 224
    3ba6:	8c 93       	st	X, r24
			ADMUX |= copy_Channel;
    3ba8:	a7 e2       	ldi	r26, 0x27	; 39
    3baa:	b0 e0       	ldi	r27, 0x00	; 0
    3bac:	e7 e2       	ldi	r30, 0x27	; 39
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	90 81       	ld	r25, Z
    3bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    3bb4:	89 2b       	or	r24, r25
    3bb6:	8c 93       	st	X, r24
			// 2-start conversion
			SET_BIT(ADCSRA, ADSC);
    3bb8:	a6 e2       	ldi	r26, 0x26	; 38
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	e6 e2       	ldi	r30, 0x26	; 38
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	80 81       	ld	r24, Z
    3bc2:	80 64       	ori	r24, 0x40	; 64
    3bc4:	8c 93       	st	X, r24
    3bc6:	0b c0       	rjmp	.+22     	; 0x3bde <ADC_u8StartConverstionSync+0x84>
			// polling for adc conversion complete flag or timed out
			while ((GET_BIT(ADCSRA, ADIF) != 1) && Local_u32Counter < ADC_u32TIMEOUT_COUNT)
			{
				Local_u32Counter++;
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	9a 81       	ldd	r25, Y+2	; 0x02
    3bcc:	ab 81       	ldd	r26, Y+3	; 0x03
    3bce:	bc 81       	ldd	r27, Y+4	; 0x04
    3bd0:	01 96       	adiw	r24, 0x01	; 1
    3bd2:	a1 1d       	adc	r26, r1
    3bd4:	b1 1d       	adc	r27, r1
    3bd6:	89 83       	std	Y+1, r24	; 0x01
    3bd8:	9a 83       	std	Y+2, r25	; 0x02
    3bda:	ab 83       	std	Y+3, r26	; 0x03
    3bdc:	bc 83       	std	Y+4, r27	; 0x04
			ADMUX &=CHANNEL_SELECTION_MASK;
			ADMUX |= copy_Channel;
			// 2-start conversion
			SET_BIT(ADCSRA, ADSC);
			// polling for adc conversion complete flag or timed out
			while ((GET_BIT(ADCSRA, ADIF) != 1) && Local_u32Counter < ADC_u32TIMEOUT_COUNT)
    3bde:	e6 e2       	ldi	r30, 0x26	; 38
    3be0:	f0 e0       	ldi	r31, 0x00	; 0
    3be2:	80 81       	ld	r24, Z
    3be4:	88 2f       	mov	r24, r24
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	80 71       	andi	r24, 0x10	; 16
    3bea:	90 70       	andi	r25, 0x00	; 0
    3bec:	00 97       	sbiw	r24, 0x00	; 0
    3bee:	61 f4       	brne	.+24     	; 0x3c08 <ADC_u8StartConverstionSync+0xae>
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf4:	ab 81       	ldd	r26, Y+3	; 0x03
    3bf6:	bc 81       	ldd	r27, Y+4	; 0x04
    3bf8:	88 38       	cpi	r24, 0x88	; 136
    3bfa:	23 e1       	ldi	r18, 0x13	; 19
    3bfc:	92 07       	cpc	r25, r18
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	a2 07       	cpc	r26, r18
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	b2 07       	cpc	r27, r18
    3c06:	00 f3       	brcs	.-64     	; 0x3bc8 <ADC_u8StartConverstionSync+0x6e>
			{
				Local_u32Counter++;
			}
			if (Local_u32Counter == ADC_u32TIMEOUT_COUNT)
    3c08:	89 81       	ldd	r24, Y+1	; 0x01
    3c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0c:	ab 81       	ldd	r26, Y+3	; 0x03
    3c0e:	bc 81       	ldd	r27, Y+4	; 0x04
    3c10:	88 38       	cpi	r24, 0x88	; 136
    3c12:	23 e1       	ldi	r18, 0x13	; 19
    3c14:	92 07       	cpc	r25, r18
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	a2 07       	cpc	r26, r18
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	b2 07       	cpc	r27, r18
    3c1e:	19 f4       	brne	.+6      	; 0x3c26 <ADC_u8StartConverstionSync+0xcc>
			{
				/*loop is broken because timeout has passed*/
				Local_u8ErrorState = TIMEOUT_ERR;
    3c20:	84 e0       	ldi	r24, 0x04	; 4
    3c22:	8d 83       	std	Y+5, r24	; 0x05
    3c24:	0f c0       	rjmp	.+30     	; 0x3c44 <ADC_u8StartConverstionSync+0xea>
			}
			else
			{
				// clear flag
				SET_BIT(ADCSRA, ADIF);
    3c26:	a6 e2       	ldi	r26, 0x26	; 38
    3c28:	b0 e0       	ldi	r27, 0x00	; 0
    3c2a:	e6 e2       	ldi	r30, 0x26	; 38
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	80 81       	ld	r24, Z
    3c30:	80 61       	ori	r24, 0x10	; 16
    3c32:	8c 93       	st	X, r24
				// read data
#if ADC_u8_presentationBits == EIGHT_BITS
				*referance_u16DigResult =(uint16)ADCH;
#elif ADC_u8_presentationBits == TEN_BITS
				*referance_u16DigResult = ADC;
    3c34:	e4 e2       	ldi	r30, 0x24	; 36
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	80 81       	ld	r24, Z
    3c3a:	91 81       	ldd	r25, Z+1	; 0x01
    3c3c:	ef 81       	ldd	r30, Y+7	; 0x07
    3c3e:	f8 85       	ldd	r31, Y+8	; 0x08
    3c40:	91 83       	std	Z+1, r25	; 0x01
    3c42:	80 83       	st	Z, r24
#else
#error "Wrong ADC_u8_presentationBits configuration option"
#endif
			}
			ADC_u8BusyFlag = IDLE;
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	80 93 ae 01 	sts	0x01AE, r24
    3c4a:	05 c0       	rjmp	.+10     	; 0x3c56 <ADC_u8StartConverstionSync+0xfc>
		}else
			Local_u8ErrorState = BUSY_ERR ;
    3c4c:	85 e0       	ldi	r24, 0x05	; 5
    3c4e:	8d 83       	std	Y+5, r24	; 0x05
    3c50:	02 c0       	rjmp	.+4      	; 0x3c56 <ADC_u8StartConverstionSync+0xfc>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR;
    3c52:	83 e0       	ldi	r24, 0x03	; 3
    3c54:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState;
    3c56:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3c58:	28 96       	adiw	r28, 0x08	; 8
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	f8 94       	cli
    3c5e:	de bf       	out	0x3e, r29	; 62
    3c60:	0f be       	out	0x3f, r0	; 63
    3c62:	cd bf       	out	0x3d, r28	; 61
    3c64:	cf 91       	pop	r28
    3c66:	df 91       	pop	r29
    3c68:	08 95       	ret

00003c6a <ADC_u8StartConverstionAsync>:
uint8 ADC_u8StartConverstionAsync(ADC_channel_t copy_Channel,uint16* referance_u16DigResult,void (*copy_pvNotificationFunc)(void)){
    3c6a:	df 93       	push	r29
    3c6c:	cf 93       	push	r28
    3c6e:	00 d0       	rcall	.+0      	; 0x3c70 <ADC_u8StartConverstionAsync+0x6>
    3c70:	00 d0       	rcall	.+0      	; 0x3c72 <ADC_u8StartConverstionAsync+0x8>
    3c72:	00 d0       	rcall	.+0      	; 0x3c74 <ADC_u8StartConverstionAsync+0xa>
    3c74:	cd b7       	in	r28, 0x3d	; 61
    3c76:	de b7       	in	r29, 0x3e	; 62
    3c78:	8a 83       	std	Y+2, r24	; 0x02
    3c7a:	7c 83       	std	Y+4, r23	; 0x04
    3c7c:	6b 83       	std	Y+3, r22	; 0x03
    3c7e:	5e 83       	std	Y+6, r21	; 0x06
    3c80:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Local_u8ErrorState = OK;
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	89 83       	std	Y+1, r24	; 0x01
	if (referance_u16DigResult != NULL && copy_pvNotificationFunc !=NULL)
    3c86:	8b 81       	ldd	r24, Y+3	; 0x03
    3c88:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8a:	00 97       	sbiw	r24, 0x00	; 0
    3c8c:	d9 f1       	breq	.+118    	; 0x3d04 <ADC_u8StartConverstionAsync+0x9a>
    3c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c90:	9e 81       	ldd	r25, Y+6	; 0x06
    3c92:	00 97       	sbiw	r24, 0x00	; 0
    3c94:	b9 f1       	breq	.+110    	; 0x3d04 <ADC_u8StartConverstionAsync+0x9a>
	{
		if(ADC_u8BusyFlag ==IDLE){
    3c96:	80 91 ae 01 	lds	r24, 0x01AE
    3c9a:	81 30       	cpi	r24, 0x01	; 1
    3c9c:	81 f5       	brne	.+96     	; 0x3cfe <ADC_u8StartConverstionAsync+0x94>
			ADC_u8BusyFlag = BUSY;
    3c9e:	82 e0       	ldi	r24, 0x02	; 2
    3ca0:	80 93 ae 01 	sts	0x01AE, r24
			ADC_pu16DigResult = referance_u16DigResult;
    3ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca8:	90 93 d3 01 	sts	0x01D3, r25
    3cac:	80 93 d2 01 	sts	0x01D2, r24
			ADC_pvNotificationFunc = copy_pvNotificationFunc;
    3cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb4:	90 93 d5 01 	sts	0x01D5, r25
    3cb8:	80 93 d4 01 	sts	0x01D4, r24
			// 1-start required channel
			ADMUX &=CHANNEL_SELECTION_MASK;
    3cbc:	a7 e2       	ldi	r26, 0x27	; 39
    3cbe:	b0 e0       	ldi	r27, 0x00	; 0
    3cc0:	e7 e2       	ldi	r30, 0x27	; 39
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	80 7e       	andi	r24, 0xE0	; 224
    3cc8:	8c 93       	st	X, r24
			ADMUX |= copy_Channel;
    3cca:	a7 e2       	ldi	r26, 0x27	; 39
    3ccc:	b0 e0       	ldi	r27, 0x00	; 0
    3cce:	e7 e2       	ldi	r30, 0x27	; 39
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	90 81       	ld	r25, Z
    3cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd6:	89 2b       	or	r24, r25
    3cd8:	8c 93       	st	X, r24

			// 2-start conversion
			SET_BIT(ADCSRA, ADSC);
    3cda:	a6 e2       	ldi	r26, 0x26	; 38
    3cdc:	b0 e0       	ldi	r27, 0x00	; 0
    3cde:	e6 e2       	ldi	r30, 0x26	; 38
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	80 81       	ld	r24, Z
    3ce4:	80 64       	ori	r24, 0x40	; 64
    3ce6:	8c 93       	st	X, r24

			/*enable ADC conversion complete interrupt*/
			SET_BIT(ADCSRA,ADIE);
    3ce8:	a6 e2       	ldi	r26, 0x26	; 38
    3cea:	b0 e0       	ldi	r27, 0x00	; 0
    3cec:	e6 e2       	ldi	r30, 0x26	; 38
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	80 81       	ld	r24, Z
    3cf2:	88 60       	ori	r24, 0x08	; 8
    3cf4:	8c 93       	st	X, r24

			ADC_u8BusyFlag = IDLE;
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	80 93 ae 01 	sts	0x01AE, r24
    3cfc:	05 c0       	rjmp	.+10     	; 0x3d08 <ADC_u8StartConverstionAsync+0x9e>
		}else
			Local_u8ErrorState = BUSY_ERR ;
    3cfe:	85 e0       	ldi	r24, 0x05	; 5
    3d00:	89 83       	std	Y+1, r24	; 0x01
    3d02:	02 c0       	rjmp	.+4      	; 0x3d08 <ADC_u8StartConverstionAsync+0x9e>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR;
    3d04:	83 e0       	ldi	r24, 0x03	; 3
    3d06:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3d08:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d0a:	26 96       	adiw	r28, 0x06	; 6
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	f8 94       	cli
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	cd bf       	out	0x3d, r28	; 61
    3d16:	cf 91       	pop	r28
    3d18:	df 91       	pop	r29
    3d1a:	08 95       	ret

00003d1c <ADC_u8StartChainConverstionAsync>:

uint8 ADC_u8StartChainConverstionAsync(ADC_CHAIN_config_t* referance_adcChain,uint8 copy_u8NumberOfADC){
    3d1c:	df 93       	push	r29
    3d1e:	cf 93       	push	r28
    3d20:	00 d0       	rcall	.+0      	; 0x3d22 <ADC_u8StartChainConverstionAsync+0x6>
    3d22:	00 d0       	rcall	.+0      	; 0x3d24 <ADC_u8StartChainConverstionAsync+0x8>
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
    3d28:	9b 83       	std	Y+3, r25	; 0x03
    3d2a:	8a 83       	std	Y+2, r24	; 0x02
    3d2c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	89 83       	std	Y+1, r24	; 0x01
	if (referance_adcChain != NULL )
    3d32:	8a 81       	ldd	r24, Y+2	; 0x02
    3d34:	9b 81       	ldd	r25, Y+3	; 0x03
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	09 f4       	brne	.+2      	; 0x3d3c <ADC_u8StartChainConverstionAsync+0x20>
    3d3a:	47 c0       	rjmp	.+142    	; 0x3dca <ADC_u8StartChainConverstionAsync+0xae>
	{
		ADC_u8ChainFlag = BUSY;
    3d3c:	82 e0       	ldi	r24, 0x02	; 2
    3d3e:	80 93 af 01 	sts	0x01AF, r24
		ADC_u8ChainDevices= referance_adcChain;
    3d42:	8a 81       	ldd	r24, Y+2	; 0x02
    3d44:	9b 81       	ldd	r25, Y+3	; 0x03
    3d46:	90 93 d9 01 	sts	0x01D9, r25
    3d4a:	80 93 d8 01 	sts	0x01D8, r24
		ADC_u8ChainDeviceCount = copy_u8NumberOfADC;
    3d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d50:	80 93 d7 01 	sts	0x01D7, r24
		ADC_u8StartConverstionAsync(referance_adcChain[ADC_u8ChainCounter].ConversionChannel,
    3d54:	80 91 d6 01 	lds	r24, 0x01D6
    3d58:	28 2f       	mov	r18, r24
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	c9 01       	movw	r24, r18
    3d5e:	88 0f       	add	r24, r24
    3d60:	99 1f       	adc	r25, r25
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	28 0f       	add	r18, r24
    3d68:	39 1f       	adc	r19, r25
    3d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d6e:	fc 01       	movw	r30, r24
    3d70:	e2 0f       	add	r30, r18
    3d72:	f3 1f       	adc	r31, r19
    3d74:	60 81       	ld	r22, Z
    3d76:	80 91 d6 01 	lds	r24, 0x01D6
    3d7a:	28 2f       	mov	r18, r24
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	c9 01       	movw	r24, r18
    3d80:	88 0f       	add	r24, r24
    3d82:	99 1f       	adc	r25, r25
    3d84:	88 0f       	add	r24, r24
    3d86:	99 1f       	adc	r25, r25
    3d88:	28 0f       	add	r18, r24
    3d8a:	39 1f       	adc	r19, r25
    3d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d90:	fc 01       	movw	r30, r24
    3d92:	e2 0f       	add	r30, r18
    3d94:	f3 1f       	adc	r31, r19
    3d96:	41 81       	ldd	r20, Z+1	; 0x01
    3d98:	52 81       	ldd	r21, Z+2	; 0x02
    3d9a:	80 91 d6 01 	lds	r24, 0x01D6
    3d9e:	28 2f       	mov	r18, r24
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	c9 01       	movw	r24, r18
    3da4:	88 0f       	add	r24, r24
    3da6:	99 1f       	adc	r25, r25
    3da8:	88 0f       	add	r24, r24
    3daa:	99 1f       	adc	r25, r25
    3dac:	28 0f       	add	r18, r24
    3dae:	39 1f       	adc	r19, r25
    3db0:	8a 81       	ldd	r24, Y+2	; 0x02
    3db2:	9b 81       	ldd	r25, Y+3	; 0x03
    3db4:	fc 01       	movw	r30, r24
    3db6:	e2 0f       	add	r30, r18
    3db8:	f3 1f       	adc	r31, r19
    3dba:	23 81       	ldd	r18, Z+3	; 0x03
    3dbc:	34 81       	ldd	r19, Z+4	; 0x04
    3dbe:	86 2f       	mov	r24, r22
    3dc0:	ba 01       	movw	r22, r20
    3dc2:	a9 01       	movw	r20, r18
    3dc4:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <ADC_u8StartConverstionAsync>
    3dc8:	02 c0       	rjmp	.+4      	; 0x3dce <ADC_u8StartChainConverstionAsync+0xb2>
				referance_adcChain[ADC_u8ChainCounter].result,referance_adcChain[ADC_u8ChainCounter].pvnotificationFunction);
	}
	else
	{
		Local_u8ErrorState = NULL_PTR;
    3dca:	83 e0       	ldi	r24, 0x03	; 3
    3dcc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3dce:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	0f 90       	pop	r0
    3dd6:	0f 90       	pop	r0
    3dd8:	cf 91       	pop	r28
    3dda:	df 91       	pop	r29
    3ddc:	08 95       	ret

00003dde <ADC_voidChainNotification>:
void ADC_voidChainNotification(){
    3dde:	df 93       	push	r29
    3de0:	cf 93       	push	r28
    3de2:	cd b7       	in	r28, 0x3d	; 61
    3de4:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pvNotificationFunc != NULL){
    3de6:	80 91 d4 01 	lds	r24, 0x01D4
    3dea:	90 91 d5 01 	lds	r25, 0x01D5
    3dee:	00 97       	sbiw	r24, 0x00	; 0
    3df0:	29 f0       	breq	.+10     	; 0x3dfc <ADC_voidChainNotification+0x1e>
		ADC_pvNotificationFunc();
    3df2:	e0 91 d4 01 	lds	r30, 0x01D4
    3df6:	f0 91 d5 01 	lds	r31, 0x01D5
    3dfa:	09 95       	icall
	}else{
		/*do nothing*/
	}
	ADC_u8ChainCounter +=1;
    3dfc:	80 91 d6 01 	lds	r24, 0x01D6
    3e00:	8f 5f       	subi	r24, 0xFF	; 255
    3e02:	80 93 d6 01 	sts	0x01D6, r24
	if (ADC_u8ChainCounter == ADC_u8ChainDeviceCount){
    3e06:	90 91 d6 01 	lds	r25, 0x01D6
    3e0a:	80 91 d7 01 	lds	r24, 0x01D7
    3e0e:	98 17       	cp	r25, r24
    3e10:	41 f4       	brne	.+16     	; 0x3e22 <ADC_voidChainNotification+0x44>
		ADC_u8ChainCounter = 0u;
    3e12:	10 92 d6 01 	sts	0x01D6, r1
		ADC_u8ChainDeviceCount = 0u;
    3e16:	10 92 d7 01 	sts	0x01D7, r1
		ADC_u8ChainFlag=IDLE;
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	80 93 af 01 	sts	0x01AF, r24
    3e20:	3f c0       	rjmp	.+126    	; 0x3ea0 <ADC_voidChainNotification+0xc2>
	}else{
		ADC_u8StartConverstionAsync(ADC_u8ChainDevices[ADC_u8ChainCounter].ConversionChannel,
    3e22:	40 91 d8 01 	lds	r20, 0x01D8
    3e26:	50 91 d9 01 	lds	r21, 0x01D9
    3e2a:	80 91 d6 01 	lds	r24, 0x01D6
    3e2e:	28 2f       	mov	r18, r24
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	c9 01       	movw	r24, r18
    3e34:	88 0f       	add	r24, r24
    3e36:	99 1f       	adc	r25, r25
    3e38:	88 0f       	add	r24, r24
    3e3a:	99 1f       	adc	r25, r25
    3e3c:	82 0f       	add	r24, r18
    3e3e:	93 1f       	adc	r25, r19
    3e40:	fa 01       	movw	r30, r20
    3e42:	e8 0f       	add	r30, r24
    3e44:	f9 1f       	adc	r31, r25
    3e46:	a0 81       	ld	r26, Z
    3e48:	40 91 d8 01 	lds	r20, 0x01D8
    3e4c:	50 91 d9 01 	lds	r21, 0x01D9
    3e50:	80 91 d6 01 	lds	r24, 0x01D6
    3e54:	28 2f       	mov	r18, r24
    3e56:	30 e0       	ldi	r19, 0x00	; 0
    3e58:	c9 01       	movw	r24, r18
    3e5a:	88 0f       	add	r24, r24
    3e5c:	99 1f       	adc	r25, r25
    3e5e:	88 0f       	add	r24, r24
    3e60:	99 1f       	adc	r25, r25
    3e62:	82 0f       	add	r24, r18
    3e64:	93 1f       	adc	r25, r19
    3e66:	fa 01       	movw	r30, r20
    3e68:	e8 0f       	add	r30, r24
    3e6a:	f9 1f       	adc	r31, r25
    3e6c:	61 81       	ldd	r22, Z+1	; 0x01
    3e6e:	72 81       	ldd	r23, Z+2	; 0x02
    3e70:	40 91 d8 01 	lds	r20, 0x01D8
    3e74:	50 91 d9 01 	lds	r21, 0x01D9
    3e78:	80 91 d6 01 	lds	r24, 0x01D6
    3e7c:	28 2f       	mov	r18, r24
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	c9 01       	movw	r24, r18
    3e82:	88 0f       	add	r24, r24
    3e84:	99 1f       	adc	r25, r25
    3e86:	88 0f       	add	r24, r24
    3e88:	99 1f       	adc	r25, r25
    3e8a:	82 0f       	add	r24, r18
    3e8c:	93 1f       	adc	r25, r19
    3e8e:	fa 01       	movw	r30, r20
    3e90:	e8 0f       	add	r30, r24
    3e92:	f9 1f       	adc	r31, r25
    3e94:	23 81       	ldd	r18, Z+3	; 0x03
    3e96:	34 81       	ldd	r19, Z+4	; 0x04
    3e98:	8a 2f       	mov	r24, r26
    3e9a:	a9 01       	movw	r20, r18
    3e9c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <ADC_u8StartConverstionAsync>
				ADC_u8ChainDevices[ADC_u8ChainCounter].result,ADC_u8ChainDevices[ADC_u8ChainCounter].pvnotificationFunction);
	}


}
    3ea0:	cf 91       	pop	r28
    3ea2:	df 91       	pop	r29
    3ea4:	08 95       	ret

00003ea6 <__vector_16>:
/*ADC conversion complete ISR*/
void __vector_16(void) __attribute__((signal));
void __vector_16(void){
    3ea6:	1f 92       	push	r1
    3ea8:	0f 92       	push	r0
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	0f 92       	push	r0
    3eae:	11 24       	eor	r1, r1
    3eb0:	2f 93       	push	r18
    3eb2:	3f 93       	push	r19
    3eb4:	4f 93       	push	r20
    3eb6:	5f 93       	push	r21
    3eb8:	6f 93       	push	r22
    3eba:	7f 93       	push	r23
    3ebc:	8f 93       	push	r24
    3ebe:	9f 93       	push	r25
    3ec0:	af 93       	push	r26
    3ec2:	bf 93       	push	r27
    3ec4:	ef 93       	push	r30
    3ec6:	ff 93       	push	r31
    3ec8:	df 93       	push	r29
    3eca:	cf 93       	push	r28
    3ecc:	cd b7       	in	r28, 0x3d	; 61
    3ece:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRBusyFlag ==IDLE){
    3ed0:	80 91 b0 01 	lds	r24, 0x01B0
    3ed4:	81 30       	cpi	r24, 0x01	; 1
    3ed6:	89 f5       	brne	.+98     	; 0x3f3a <__vector_16+0x94>
		ADC_u8ISRBusyFlag = BUSY;
    3ed8:	82 e0       	ldi	r24, 0x02	; 2
    3eda:	80 93 b0 01 	sts	0x01B0, r24
		// read data
#if ADC_u8_presentationBits == EIGHT_BITS
		*ADC_pu16DigResult =(uint16)ADCH;
#elif ADC_u8_presentationBits == TEN_BITS
		*ADC_pu16DigResult = ADC;
    3ede:	a0 91 d2 01 	lds	r26, 0x01D2
    3ee2:	b0 91 d3 01 	lds	r27, 0x01D3
    3ee6:	e4 e2       	ldi	r30, 0x24	; 36
    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
    3eea:	80 81       	ld	r24, Z
    3eec:	91 81       	ldd	r25, Z+1	; 0x01
    3eee:	8d 93       	st	X+, r24
    3ef0:	9c 93       	st	X, r25
		ADC = 0x0000;
    3ef2:	e4 e2       	ldi	r30, 0x24	; 36
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
    3ef6:	11 82       	std	Z+1, r1	; 0x01
    3ef8:	10 82       	st	Z, r1
#else
#error "Wrong ADC_u8_presentationBits configuration option"
#endif
		/*ADC interrupt disable*/
		CLS_BIT(ADCSRA,ADIE);
    3efa:	a6 e2       	ldi	r26, 0x26	; 38
    3efc:	b0 e0       	ldi	r27, 0x00	; 0
    3efe:	e6 e2       	ldi	r30, 0x26	; 38
    3f00:	f0 e0       	ldi	r31, 0x00	; 0
    3f02:	80 81       	ld	r24, Z
    3f04:	87 7f       	andi	r24, 0xF7	; 247
    3f06:	8c 93       	st	X, r24
		if(ADC_u8ChainFlag == IDLE){
    3f08:	80 91 af 01 	lds	r24, 0x01AF
    3f0c:	81 30       	cpi	r24, 0x01	; 1
    3f0e:	61 f4       	brne	.+24     	; 0x3f28 <__vector_16+0x82>
			if(ADC_pvNotificationFunc != NULL){
    3f10:	80 91 d4 01 	lds	r24, 0x01D4
    3f14:	90 91 d5 01 	lds	r25, 0x01D5
    3f18:	00 97       	sbiw	r24, 0x00	; 0
    3f1a:	61 f0       	breq	.+24     	; 0x3f34 <__vector_16+0x8e>
				ADC_pvNotificationFunc();
    3f1c:	e0 91 d4 01 	lds	r30, 0x01D4
    3f20:	f0 91 d5 01 	lds	r31, 0x01D5
    3f24:	09 95       	icall
    3f26:	06 c0       	rjmp	.+12     	; 0x3f34 <__vector_16+0x8e>
			}else{
				/*do nothing*/
			}
		}else if(ADC_u8ChainFlag == BUSY){
    3f28:	80 91 af 01 	lds	r24, 0x01AF
    3f2c:	82 30       	cpi	r24, 0x02	; 2
    3f2e:	11 f4       	brne	.+4      	; 0x3f34 <__vector_16+0x8e>
			ADC_voidChainNotification();
    3f30:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <ADC_voidChainNotification>
		}
		ADC_u8ISRBusyFlag = IDLE;
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	80 93 b0 01 	sts	0x01B0, r24
	}

}
    3f3a:	cf 91       	pop	r28
    3f3c:	df 91       	pop	r29
    3f3e:	ff 91       	pop	r31
    3f40:	ef 91       	pop	r30
    3f42:	bf 91       	pop	r27
    3f44:	af 91       	pop	r26
    3f46:	9f 91       	pop	r25
    3f48:	8f 91       	pop	r24
    3f4a:	7f 91       	pop	r23
    3f4c:	6f 91       	pop	r22
    3f4e:	5f 91       	pop	r21
    3f50:	4f 91       	pop	r20
    3f52:	3f 91       	pop	r19
    3f54:	2f 91       	pop	r18
    3f56:	0f 90       	pop	r0
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	0f 90       	pop	r0
    3f5c:	1f 90       	pop	r1
    3f5e:	18 95       	reti

00003f60 <ADC_voidSetPrescaler>:
void ADC_voidSetPrescaler(uint8 copy_u8DivisionFactor)
{
    3f60:	df 93       	push	r29
    3f62:	cf 93       	push	r28
    3f64:	00 d0       	rcall	.+0      	; 0x3f66 <ADC_voidSetPrescaler+0x6>
    3f66:	0f 92       	push	r0
    3f68:	cd b7       	in	r28, 0x3d	; 61
    3f6a:	de b7       	in	r29, 0x3e	; 62
    3f6c:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_u8DivisionFactor)
    3f6e:	89 81       	ldd	r24, Y+1	; 0x01
    3f70:	28 2f       	mov	r18, r24
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	3b 83       	std	Y+3, r19	; 0x03
    3f76:	2a 83       	std	Y+2, r18	; 0x02
    3f78:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f7c:	80 31       	cpi	r24, 0x10	; 16
    3f7e:	91 05       	cpc	r25, r1
    3f80:	e9 f1       	breq	.+122    	; 0x3ffc <ADC_voidSetPrescaler+0x9c>
    3f82:	2a 81       	ldd	r18, Y+2	; 0x02
    3f84:	3b 81       	ldd	r19, Y+3	; 0x03
    3f86:	21 31       	cpi	r18, 0x11	; 17
    3f88:	31 05       	cpc	r19, r1
    3f8a:	84 f4       	brge	.+32     	; 0x3fac <ADC_voidSetPrescaler+0x4c>
    3f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f90:	84 30       	cpi	r24, 0x04	; 4
    3f92:	91 05       	cpc	r25, r1
    3f94:	19 f1       	breq	.+70     	; 0x3fdc <ADC_voidSetPrescaler+0x7c>
    3f96:	2a 81       	ldd	r18, Y+2	; 0x02
    3f98:	3b 81       	ldd	r19, Y+3	; 0x03
    3f9a:	28 30       	cpi	r18, 0x08	; 8
    3f9c:	31 05       	cpc	r19, r1
    3f9e:	31 f1       	breq	.+76     	; 0x3fec <ADC_voidSetPrescaler+0x8c>
    3fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa4:	82 30       	cpi	r24, 0x02	; 2
    3fa6:	91 05       	cpc	r25, r1
    3fa8:	89 f0       	breq	.+34     	; 0x3fcc <ADC_voidSetPrescaler+0x6c>
    3faa:	47 c0       	rjmp	.+142    	; 0x403a <ADC_voidSetPrescaler+0xda>
    3fac:	2a 81       	ldd	r18, Y+2	; 0x02
    3fae:	3b 81       	ldd	r19, Y+3	; 0x03
    3fb0:	20 34       	cpi	r18, 0x40	; 64
    3fb2:	31 05       	cpc	r19, r1
    3fb4:	99 f1       	breq	.+102    	; 0x401c <ADC_voidSetPrescaler+0xbc>
    3fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    3fba:	80 38       	cpi	r24, 0x80	; 128
    3fbc:	91 05       	cpc	r25, r1
    3fbe:	b1 f1       	breq	.+108    	; 0x402c <ADC_voidSetPrescaler+0xcc>
    3fc0:	2a 81       	ldd	r18, Y+2	; 0x02
    3fc2:	3b 81       	ldd	r19, Y+3	; 0x03
    3fc4:	20 32       	cpi	r18, 0x20	; 32
    3fc6:	31 05       	cpc	r19, r1
    3fc8:	09 f1       	breq	.+66     	; 0x400c <ADC_voidSetPrescaler+0xac>
    3fca:	37 c0       	rjmp	.+110    	; 0x403a <ADC_voidSetPrescaler+0xda>
	{
	case 2:
		ADCSRA &= DIVISION_BY_2;
    3fcc:	a6 e2       	ldi	r26, 0x26	; 38
    3fce:	b0 e0       	ldi	r27, 0x00	; 0
    3fd0:	e6 e2       	ldi	r30, 0x26	; 38
    3fd2:	f0 e0       	ldi	r31, 0x00	; 0
    3fd4:	80 81       	ld	r24, Z
    3fd6:	81 70       	andi	r24, 0x01	; 1
    3fd8:	8c 93       	st	X, r24
    3fda:	2f c0       	rjmp	.+94     	; 0x403a <ADC_voidSetPrescaler+0xda>
		break;
	case 4:
		ADCSRA &= DIVISION_BY_4;
    3fdc:	a6 e2       	ldi	r26, 0x26	; 38
    3fde:	b0 e0       	ldi	r27, 0x00	; 0
    3fe0:	e6 e2       	ldi	r30, 0x26	; 38
    3fe2:	f0 e0       	ldi	r31, 0x00	; 0
    3fe4:	80 81       	ld	r24, Z
    3fe6:	82 70       	andi	r24, 0x02	; 2
    3fe8:	8c 93       	st	X, r24
    3fea:	27 c0       	rjmp	.+78     	; 0x403a <ADC_voidSetPrescaler+0xda>
		break;
	case 8:
		ADCSRA &= DIVISION_BY_8;
    3fec:	a6 e2       	ldi	r26, 0x26	; 38
    3fee:	b0 e0       	ldi	r27, 0x00	; 0
    3ff0:	e6 e2       	ldi	r30, 0x26	; 38
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	80 81       	ld	r24, Z
    3ff6:	83 70       	andi	r24, 0x03	; 3
    3ff8:	8c 93       	st	X, r24
    3ffa:	1f c0       	rjmp	.+62     	; 0x403a <ADC_voidSetPrescaler+0xda>
		break;
	case 16:
		ADCSRA &= DIVISION_BY_16;
    3ffc:	a6 e2       	ldi	r26, 0x26	; 38
    3ffe:	b0 e0       	ldi	r27, 0x00	; 0
    4000:	e6 e2       	ldi	r30, 0x26	; 38
    4002:	f0 e0       	ldi	r31, 0x00	; 0
    4004:	80 81       	ld	r24, Z
    4006:	84 70       	andi	r24, 0x04	; 4
    4008:	8c 93       	st	X, r24
    400a:	17 c0       	rjmp	.+46     	; 0x403a <ADC_voidSetPrescaler+0xda>
		break;
	case 32:
		ADCSRA &= DIVISION_BY_32;
    400c:	a6 e2       	ldi	r26, 0x26	; 38
    400e:	b0 e0       	ldi	r27, 0x00	; 0
    4010:	e6 e2       	ldi	r30, 0x26	; 38
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	80 81       	ld	r24, Z
    4016:	85 70       	andi	r24, 0x05	; 5
    4018:	8c 93       	st	X, r24
    401a:	0f c0       	rjmp	.+30     	; 0x403a <ADC_voidSetPrescaler+0xda>
		break;
	case 64:
		ADCSRA &= DIVISION_BY_64;
    401c:	a6 e2       	ldi	r26, 0x26	; 38
    401e:	b0 e0       	ldi	r27, 0x00	; 0
    4020:	e6 e2       	ldi	r30, 0x26	; 38
    4022:	f0 e0       	ldi	r31, 0x00	; 0
    4024:	80 81       	ld	r24, Z
    4026:	86 70       	andi	r24, 0x06	; 6
    4028:	8c 93       	st	X, r24
    402a:	07 c0       	rjmp	.+14     	; 0x403a <ADC_voidSetPrescaler+0xda>
		break;
	case 128:
		ADCSRA &= DIVISION_BY_128;
    402c:	a6 e2       	ldi	r26, 0x26	; 38
    402e:	b0 e0       	ldi	r27, 0x00	; 0
    4030:	e6 e2       	ldi	r30, 0x26	; 38
    4032:	f0 e0       	ldi	r31, 0x00	; 0
    4034:	80 81       	ld	r24, Z
    4036:	87 70       	andi	r24, 0x07	; 7
    4038:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	0f 90       	pop	r0
    4040:	cf 91       	pop	r28
    4042:	df 91       	pop	r29
    4044:	08 95       	ret

00004046 <GIE_voidEnableGlobal>:
#include "../../libraries/BIT_MATH.h"
#include "../../libraries/ErrType.h"
#include "../../libraries/STD_TYPES_H.h"
#include "../4-GIE/GIE_interface.h"
#include "../4-GIE/GIE_reg.h"
void GIE_voidEnableGlobal(){
    4046:	df 93       	push	r29
    4048:	cf 93       	push	r28
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    // SET_BIT(SREG,SREG_I);
    __asm volatile ("SEI");
    404e:	78 94       	sei
}
    4050:	cf 91       	pop	r28
    4052:	df 91       	pop	r29
    4054:	08 95       	ret

00004056 <GIE_voidDisabledGlobal>:
void GIE_voidDisabledGlobal(){
    4056:	df 93       	push	r29
    4058:	cf 93       	push	r28
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
    // cls_BIT(SREG,SREG_I);
    __asm volatile ("CLI");
    405e:	f8 94       	cli
}
    4060:	cf 91       	pop	r28
    4062:	df 91       	pop	r29
    4064:	08 95       	ret

00004066 <EXTI_u8SetCallBack>:



static void (*EXTI_PFunctionPtr[3])(void) = {NULL,NULL,NULL};

uint8 EXTI_u8SetCallBack(EXTI_IntNum_t copy_IntNum,void(*copy_pvFuncPtr)(void)){
    4066:	df 93       	push	r29
    4068:	cf 93       	push	r28
    406a:	00 d0       	rcall	.+0      	; 0x406c <EXTI_u8SetCallBack+0x6>
    406c:	00 d0       	rcall	.+0      	; 0x406e <EXTI_u8SetCallBack+0x8>
    406e:	cd b7       	in	r28, 0x3d	; 61
    4070:	de b7       	in	r29, 0x3e	; 62
    4072:	8a 83       	std	Y+2, r24	; 0x02
    4074:	7c 83       	std	Y+4, r23	; 0x04
    4076:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pvFuncPtr != NULL){
    407c:	8b 81       	ldd	r24, Y+3	; 0x03
    407e:	9c 81       	ldd	r25, Y+4	; 0x04
    4080:	00 97       	sbiw	r24, 0x00	; 0
    4082:	99 f0       	breq	.+38     	; 0x40aa <EXTI_u8SetCallBack+0x44>
		if((copy_IntNum>=INT0) &&(copy_IntNum<=INT2)){
    4084:	8a 81       	ldd	r24, Y+2	; 0x02
    4086:	83 30       	cpi	r24, 0x03	; 3
    4088:	68 f4       	brcc	.+26     	; 0x40a4 <EXTI_u8SetCallBack+0x3e>
			EXTI_PFunctionPtr[copy_IntNum]= copy_pvFuncPtr;
    408a:	8a 81       	ldd	r24, Y+2	; 0x02
    408c:	88 2f       	mov	r24, r24
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	88 0f       	add	r24, r24
    4092:	99 1f       	adc	r25, r25
    4094:	fc 01       	movw	r30, r24
    4096:	e6 52       	subi	r30, 0x26	; 38
    4098:	fe 4f       	sbci	r31, 0xFE	; 254
    409a:	8b 81       	ldd	r24, Y+3	; 0x03
    409c:	9c 81       	ldd	r25, Y+4	; 0x04
    409e:	91 83       	std	Z+1, r25	; 0x01
    40a0:	80 83       	st	Z, r24
    40a2:	05 c0       	rjmp	.+10     	; 0x40ae <EXTI_u8SetCallBack+0x48>

			}else{
			Local_u8ErrorState = NOK;
    40a4:	82 e0       	ldi	r24, 0x02	; 2
    40a6:	89 83       	std	Y+1, r24	; 0x01
    40a8:	02 c0       	rjmp	.+4      	; 0x40ae <EXTI_u8SetCallBack+0x48>
		}
	}
	else{
		Local_u8ErrorState = NULL_PTR;
    40aa:	83 e0       	ldi	r24, 0x03	; 3
    40ac:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    40ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	0f 90       	pop	r0
    40b8:	cf 91       	pop	r28
    40ba:	df 91       	pop	r29
    40bc:	08 95       	ret

000040be <__vector_1>:
/*INT0 ISR*/
void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    40be:	1f 92       	push	r1
    40c0:	0f 92       	push	r0
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	0f 92       	push	r0
    40c6:	11 24       	eor	r1, r1
    40c8:	2f 93       	push	r18
    40ca:	3f 93       	push	r19
    40cc:	4f 93       	push	r20
    40ce:	5f 93       	push	r21
    40d0:	6f 93       	push	r22
    40d2:	7f 93       	push	r23
    40d4:	8f 93       	push	r24
    40d6:	9f 93       	push	r25
    40d8:	af 93       	push	r26
    40da:	bf 93       	push	r27
    40dc:	ef 93       	push	r30
    40de:	ff 93       	push	r31
    40e0:	df 93       	push	r29
    40e2:	cf 93       	push	r28
    40e4:	cd b7       	in	r28, 0x3d	; 61
    40e6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PFunctionPtr[INT0] != NULL){
    40e8:	80 91 da 01 	lds	r24, 0x01DA
    40ec:	90 91 db 01 	lds	r25, 0x01DB
    40f0:	00 97       	sbiw	r24, 0x00	; 0
    40f2:	29 f0       	breq	.+10     	; 0x40fe <__vector_1+0x40>
		EXTI_PFunctionPtr[INT0]();
    40f4:	e0 91 da 01 	lds	r30, 0x01DA
    40f8:	f0 91 db 01 	lds	r31, 0x01DB
    40fc:	09 95       	icall
		}else{
		/*do nothing*/
	}
}
    40fe:	cf 91       	pop	r28
    4100:	df 91       	pop	r29
    4102:	ff 91       	pop	r31
    4104:	ef 91       	pop	r30
    4106:	bf 91       	pop	r27
    4108:	af 91       	pop	r26
    410a:	9f 91       	pop	r25
    410c:	8f 91       	pop	r24
    410e:	7f 91       	pop	r23
    4110:	6f 91       	pop	r22
    4112:	5f 91       	pop	r21
    4114:	4f 91       	pop	r20
    4116:	3f 91       	pop	r19
    4118:	2f 91       	pop	r18
    411a:	0f 90       	pop	r0
    411c:	0f be       	out	0x3f, r0	; 63
    411e:	0f 90       	pop	r0
    4120:	1f 90       	pop	r1
    4122:	18 95       	reti

00004124 <__vector_2>:

/*INT1 ISR*/
void __vector_2(void) __attribute__((signal));
void __vector_2(void){
    4124:	1f 92       	push	r1
    4126:	0f 92       	push	r0
    4128:	0f b6       	in	r0, 0x3f	; 63
    412a:	0f 92       	push	r0
    412c:	11 24       	eor	r1, r1
    412e:	2f 93       	push	r18
    4130:	3f 93       	push	r19
    4132:	4f 93       	push	r20
    4134:	5f 93       	push	r21
    4136:	6f 93       	push	r22
    4138:	7f 93       	push	r23
    413a:	8f 93       	push	r24
    413c:	9f 93       	push	r25
    413e:	af 93       	push	r26
    4140:	bf 93       	push	r27
    4142:	ef 93       	push	r30
    4144:	ff 93       	push	r31
    4146:	df 93       	push	r29
    4148:	cf 93       	push	r28
    414a:	cd b7       	in	r28, 0x3d	; 61
    414c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PFunctionPtr[INT1] != NULL){
    414e:	80 91 dc 01 	lds	r24, 0x01DC
    4152:	90 91 dd 01 	lds	r25, 0x01DD
    4156:	00 97       	sbiw	r24, 0x00	; 0
    4158:	29 f0       	breq	.+10     	; 0x4164 <__vector_2+0x40>
		EXTI_PFunctionPtr[INT1]();
    415a:	e0 91 dc 01 	lds	r30, 0x01DC
    415e:	f0 91 dd 01 	lds	r31, 0x01DD
    4162:	09 95       	icall
		}else{
		/*do nothing*/
	}
}
    4164:	cf 91       	pop	r28
    4166:	df 91       	pop	r29
    4168:	ff 91       	pop	r31
    416a:	ef 91       	pop	r30
    416c:	bf 91       	pop	r27
    416e:	af 91       	pop	r26
    4170:	9f 91       	pop	r25
    4172:	8f 91       	pop	r24
    4174:	7f 91       	pop	r23
    4176:	6f 91       	pop	r22
    4178:	5f 91       	pop	r21
    417a:	4f 91       	pop	r20
    417c:	3f 91       	pop	r19
    417e:	2f 91       	pop	r18
    4180:	0f 90       	pop	r0
    4182:	0f be       	out	0x3f, r0	; 63
    4184:	0f 90       	pop	r0
    4186:	1f 90       	pop	r1
    4188:	18 95       	reti

0000418a <__vector_3>:

/*INT2 ISR*/
void __vector_3(void) __attribute__((signal));
void __vector_3(void){
    418a:	1f 92       	push	r1
    418c:	0f 92       	push	r0
    418e:	0f b6       	in	r0, 0x3f	; 63
    4190:	0f 92       	push	r0
    4192:	11 24       	eor	r1, r1
    4194:	2f 93       	push	r18
    4196:	3f 93       	push	r19
    4198:	4f 93       	push	r20
    419a:	5f 93       	push	r21
    419c:	6f 93       	push	r22
    419e:	7f 93       	push	r23
    41a0:	8f 93       	push	r24
    41a2:	9f 93       	push	r25
    41a4:	af 93       	push	r26
    41a6:	bf 93       	push	r27
    41a8:	ef 93       	push	r30
    41aa:	ff 93       	push	r31
    41ac:	df 93       	push	r29
    41ae:	cf 93       	push	r28
    41b0:	cd b7       	in	r28, 0x3d	; 61
    41b2:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PFunctionPtr[INT2] != NULL){
    41b4:	80 91 de 01 	lds	r24, 0x01DE
    41b8:	90 91 df 01 	lds	r25, 0x01DF
    41bc:	00 97       	sbiw	r24, 0x00	; 0
    41be:	29 f0       	breq	.+10     	; 0x41ca <__vector_3+0x40>
		EXTI_PFunctionPtr[INT2]();
    41c0:	e0 91 de 01 	lds	r30, 0x01DE
    41c4:	f0 91 df 01 	lds	r31, 0x01DF
    41c8:	09 95       	icall
		}else{
		/*do nothing*/
	}
}
    41ca:	cf 91       	pop	r28
    41cc:	df 91       	pop	r29
    41ce:	ff 91       	pop	r31
    41d0:	ef 91       	pop	r30
    41d2:	bf 91       	pop	r27
    41d4:	af 91       	pop	r26
    41d6:	9f 91       	pop	r25
    41d8:	8f 91       	pop	r24
    41da:	7f 91       	pop	r23
    41dc:	6f 91       	pop	r22
    41de:	5f 91       	pop	r21
    41e0:	4f 91       	pop	r20
    41e2:	3f 91       	pop	r19
    41e4:	2f 91       	pop	r18
    41e6:	0f 90       	pop	r0
    41e8:	0f be       	out	0x3f, r0	; 63
    41ea:	0f 90       	pop	r0
    41ec:	1f 90       	pop	r1
    41ee:	18 95       	reti

000041f0 <EXTI_voidInit>:


void EXTI_voidInit(void)
{
    41f0:	df 93       	push	r29
    41f2:	cf 93       	push	r28
    41f4:	cd b7       	in	r28, 0x3d	; 61
    41f6:	de b7       	in	r29, 0x3e	; 62
	CLS_BIT(MCUCR, MCUCR_IS01);
	#elif EXTI_u8INT0_TRGSRC == FALLING_EDGE
	CLS_BIT(MCUCR, MCUCR_IS00);
	SET_BIT(MCUCR, MCUCR_IS01);
	#elif EXTI_u8INT0_TRGSRC == RISING_EDGE
	SET_BIT(MCUCR, MCUCR_IS00);
    41f8:	a5 e5       	ldi	r26, 0x55	; 85
    41fa:	b0 e0       	ldi	r27, 0x00	; 0
    41fc:	e5 e5       	ldi	r30, 0x55	; 85
    41fe:	f0 e0       	ldi	r31, 0x00	; 0
    4200:	80 81       	ld	r24, Z
    4202:	81 60       	ori	r24, 0x01	; 1
    4204:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_IS01);
    4206:	a5 e5       	ldi	r26, 0x55	; 85
    4208:	b0 e0       	ldi	r27, 0x00	; 0
    420a:	e5 e5       	ldi	r30, 0x55	; 85
    420c:	f0 e0       	ldi	r31, 0x00	; 0
    420e:	80 81       	ld	r24, Z
    4210:	82 60       	ori	r24, 0x02	; 2
    4212:	8c 93       	st	X, r24
	CLS_BIT(MCUCR, MCUCR_IS11);
	#elif EXTI_u8INT1_TRGSRC == FALLING_EDGE
	CLS_BIT(MCUCR, MCUCR_IS10);
	SET_BIT(MCUCR, MCUCR_IS11);
	#elif EXTI_u8INT1_TRGSRC == RISING_EDGE
	SET_BIT(MCUCR, MCUCR_IS10);
    4214:	a5 e5       	ldi	r26, 0x55	; 85
    4216:	b0 e0       	ldi	r27, 0x00	; 0
    4218:	e5 e5       	ldi	r30, 0x55	; 85
    421a:	f0 e0       	ldi	r31, 0x00	; 0
    421c:	80 81       	ld	r24, Z
    421e:	84 60       	ori	r24, 0x04	; 4
    4220:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_IS11);
    4222:	a5 e5       	ldi	r26, 0x55	; 85
    4224:	b0 e0       	ldi	r27, 0x00	; 0
    4226:	e5 e5       	ldi	r30, 0x55	; 85
    4228:	f0 e0       	ldi	r31, 0x00	; 0
    422a:	80 81       	ld	r24, Z
    422c:	88 60       	ori	r24, 0x08	; 8
    422e:	8c 93       	st	X, r24
	#else
	#error "Wrong EXTI_u8INT1_TRIG_SRG configuration option"
	#endif

	#if EXTI_u8INT2_TRGSRC == FALLING_EDGE
	CLS_BIT(MCUCSR, MCUCR_ISC2);
    4230:	a4 e5       	ldi	r26, 0x54	; 84
    4232:	b0 e0       	ldi	r27, 0x00	; 0
    4234:	e4 e5       	ldi	r30, 0x54	; 84
    4236:	f0 e0       	ldi	r31, 0x00	; 0
    4238:	80 81       	ld	r24, Z
    423a:	8f 7b       	andi	r24, 0xBF	; 191
    423c:	8c 93       	st	X, r24
	#endif

	#if EXTI_u8INT0_INIT_STATE == DISABLED
	CLS_BIT(GICR, GICR_INT0);
	#elif EXTI_u8INT0_INIT_STATE == ENABLED
	SET_BIT(GICR, GICR_INT0);
    423e:	ab e5       	ldi	r26, 0x5B	; 91
    4240:	b0 e0       	ldi	r27, 0x00	; 0
    4242:	eb e5       	ldi	r30, 0x5B	; 91
    4244:	f0 e0       	ldi	r31, 0x00	; 0
    4246:	80 81       	ld	r24, Z
    4248:	80 64       	ori	r24, 0x40	; 64
    424a:	8c 93       	st	X, r24
	#endif

	#if EXTI_u8INT1_INIT_STATE == DISABLED
	CLS_BIT(GICR, GICR_INT1);
	#elif EXTI_u8INT1_INIT_STATE == ENABLED
	SET_BIT(GICR, GICR_INT1);
    424c:	ab e5       	ldi	r26, 0x5B	; 91
    424e:	b0 e0       	ldi	r27, 0x00	; 0
    4250:	eb e5       	ldi	r30, 0x5B	; 91
    4252:	f0 e0       	ldi	r31, 0x00	; 0
    4254:	80 81       	ld	r24, Z
    4256:	80 68       	ori	r24, 0x80	; 128
    4258:	8c 93       	st	X, r24
	#endif

	#if EXTI_u8INT2_INIT_STATE == DISABLED
	CLS_BIT(GICR, GICR_INT2);
	#elif EXTI_u8INT2_INIT_STATE == ENABLED
	SET_BIT(GICR, GICR_INT2);
    425a:	ab e5       	ldi	r26, 0x5B	; 91
    425c:	b0 e0       	ldi	r27, 0x00	; 0
    425e:	eb e5       	ldi	r30, 0x5B	; 91
    4260:	f0 e0       	ldi	r31, 0x00	; 0
    4262:	80 81       	ld	r24, Z
    4264:	80 62       	ori	r24, 0x20	; 32
    4266:	8c 93       	st	X, r24
	#else
	#error "Wrong EXTI_u8INT0_INIT_STATE configuration option"
	#endif
}
    4268:	cf 91       	pop	r28
    426a:	df 91       	pop	r29
    426c:	08 95       	ret

0000426e <EXTI_u8SetSenceCtrl>:
uint8 EXTI_u8SetSenceCtrl(EXTI_IntNum_t copy_IntNum, uint8 copy_SenseCtrl)
{
    426e:	df 93       	push	r29
    4270:	cf 93       	push	r28
    4272:	cd b7       	in	r28, 0x3d	; 61
    4274:	de b7       	in	r29, 0x3e	; 62
    4276:	29 97       	sbiw	r28, 0x09	; 9
    4278:	0f b6       	in	r0, 0x3f	; 63
    427a:	f8 94       	cli
    427c:	de bf       	out	0x3e, r29	; 62
    427e:	0f be       	out	0x3f, r0	; 63
    4280:	cd bf       	out	0x3d, r28	; 61
    4282:	8a 83       	std	Y+2, r24	; 0x02
    4284:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Error_state = OK;
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	89 83       	std	Y+1, r24	; 0x01
	if (copy_IntNum == INT0){
    428a:	8a 81       	ldd	r24, Y+2	; 0x02
    428c:	88 23       	and	r24, r24
    428e:	09 f0       	breq	.+2      	; 0x4292 <EXTI_u8SetSenceCtrl+0x24>
    4290:	5f c0       	rjmp	.+190    	; 0x4350 <EXTI_u8SetSenceCtrl+0xe2>
		switch (copy_SenseCtrl){
    4292:	8b 81       	ldd	r24, Y+3	; 0x03
    4294:	28 2f       	mov	r18, r24
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	39 87       	std	Y+9, r19	; 0x09
    429a:	28 87       	std	Y+8, r18	; 0x08
    429c:	88 85       	ldd	r24, Y+8	; 0x08
    429e:	99 85       	ldd	r25, Y+9	; 0x09
    42a0:	82 30       	cpi	r24, 0x02	; 2
    42a2:	91 05       	cpc	r25, r1
    42a4:	29 f1       	breq	.+74     	; 0x42f0 <EXTI_u8SetSenceCtrl+0x82>
    42a6:	28 85       	ldd	r18, Y+8	; 0x08
    42a8:	39 85       	ldd	r19, Y+9	; 0x09
    42aa:	23 30       	cpi	r18, 0x03	; 3
    42ac:	31 05       	cpc	r19, r1
    42ae:	34 f4       	brge	.+12     	; 0x42bc <EXTI_u8SetSenceCtrl+0x4e>
    42b0:	88 85       	ldd	r24, Y+8	; 0x08
    42b2:	99 85       	ldd	r25, Y+9	; 0x09
    42b4:	81 30       	cpi	r24, 0x01	; 1
    42b6:	91 05       	cpc	r25, r1
    42b8:	61 f0       	breq	.+24     	; 0x42d2 <EXTI_u8SetSenceCtrl+0x64>
    42ba:	47 c0       	rjmp	.+142    	; 0x434a <EXTI_u8SetSenceCtrl+0xdc>
    42bc:	28 85       	ldd	r18, Y+8	; 0x08
    42be:	39 85       	ldd	r19, Y+9	; 0x09
    42c0:	23 30       	cpi	r18, 0x03	; 3
    42c2:	31 05       	cpc	r19, r1
    42c4:	21 f1       	breq	.+72     	; 0x430e <EXTI_u8SetSenceCtrl+0xa0>
    42c6:	88 85       	ldd	r24, Y+8	; 0x08
    42c8:	99 85       	ldd	r25, Y+9	; 0x09
    42ca:	84 30       	cpi	r24, 0x04	; 4
    42cc:	91 05       	cpc	r25, r1
    42ce:	71 f1       	breq	.+92     	; 0x432c <EXTI_u8SetSenceCtrl+0xbe>
    42d0:	3c c0       	rjmp	.+120    	; 0x434a <EXTI_u8SetSenceCtrl+0xdc>
			case LOW_LEVEL:CLS_BIT(MCUCR, MCUCR_IS00);CLS_BIT(MCUCR, MCUCR_IS01);break;
    42d2:	a5 e5       	ldi	r26, 0x55	; 85
    42d4:	b0 e0       	ldi	r27, 0x00	; 0
    42d6:	e5 e5       	ldi	r30, 0x55	; 85
    42d8:	f0 e0       	ldi	r31, 0x00	; 0
    42da:	80 81       	ld	r24, Z
    42dc:	8e 7f       	andi	r24, 0xFE	; 254
    42de:	8c 93       	st	X, r24
    42e0:	a5 e5       	ldi	r26, 0x55	; 85
    42e2:	b0 e0       	ldi	r27, 0x00	; 0
    42e4:	e5 e5       	ldi	r30, 0x55	; 85
    42e6:	f0 e0       	ldi	r31, 0x00	; 0
    42e8:	80 81       	ld	r24, Z
    42ea:	8d 7f       	andi	r24, 0xFD	; 253
    42ec:	8c 93       	st	X, r24
    42ee:	bb c0       	rjmp	.+374    	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
			case ON_CHANGE:SET_BIT(MCUCR, MCUCR_IS00);CLS_BIT(MCUCR, MCUCR_IS01);break;
    42f0:	a5 e5       	ldi	r26, 0x55	; 85
    42f2:	b0 e0       	ldi	r27, 0x00	; 0
    42f4:	e5 e5       	ldi	r30, 0x55	; 85
    42f6:	f0 e0       	ldi	r31, 0x00	; 0
    42f8:	80 81       	ld	r24, Z
    42fa:	81 60       	ori	r24, 0x01	; 1
    42fc:	8c 93       	st	X, r24
    42fe:	a5 e5       	ldi	r26, 0x55	; 85
    4300:	b0 e0       	ldi	r27, 0x00	; 0
    4302:	e5 e5       	ldi	r30, 0x55	; 85
    4304:	f0 e0       	ldi	r31, 0x00	; 0
    4306:	80 81       	ld	r24, Z
    4308:	8d 7f       	andi	r24, 0xFD	; 253
    430a:	8c 93       	st	X, r24
    430c:	ac c0       	rjmp	.+344    	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
			case FALLING_EDGE:CLS_BIT(MCUCR, MCUCR_IS00);SET_BIT(MCUCR, MCUCR_IS01);break;
    430e:	a5 e5       	ldi	r26, 0x55	; 85
    4310:	b0 e0       	ldi	r27, 0x00	; 0
    4312:	e5 e5       	ldi	r30, 0x55	; 85
    4314:	f0 e0       	ldi	r31, 0x00	; 0
    4316:	80 81       	ld	r24, Z
    4318:	8e 7f       	andi	r24, 0xFE	; 254
    431a:	8c 93       	st	X, r24
    431c:	a5 e5       	ldi	r26, 0x55	; 85
    431e:	b0 e0       	ldi	r27, 0x00	; 0
    4320:	e5 e5       	ldi	r30, 0x55	; 85
    4322:	f0 e0       	ldi	r31, 0x00	; 0
    4324:	80 81       	ld	r24, Z
    4326:	82 60       	ori	r24, 0x02	; 2
    4328:	8c 93       	st	X, r24
    432a:	9d c0       	rjmp	.+314    	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
			case RISING_EDGE:SET_BIT(MCUCR, MCUCR_IS00);SET_BIT(MCUCR, MCUCR_IS01);break;
    432c:	a5 e5       	ldi	r26, 0x55	; 85
    432e:	b0 e0       	ldi	r27, 0x00	; 0
    4330:	e5 e5       	ldi	r30, 0x55	; 85
    4332:	f0 e0       	ldi	r31, 0x00	; 0
    4334:	80 81       	ld	r24, Z
    4336:	81 60       	ori	r24, 0x01	; 1
    4338:	8c 93       	st	X, r24
    433a:	a5 e5       	ldi	r26, 0x55	; 85
    433c:	b0 e0       	ldi	r27, 0x00	; 0
    433e:	e5 e5       	ldi	r30, 0x55	; 85
    4340:	f0 e0       	ldi	r31, 0x00	; 0
    4342:	80 81       	ld	r24, Z
    4344:	82 60       	ori	r24, 0x02	; 2
    4346:	8c 93       	st	X, r24
    4348:	8e c0       	rjmp	.+284    	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
			default:Local_u8Error_state = NOK;break;
    434a:	82 e0       	ldi	r24, 0x02	; 2
    434c:	89 83       	std	Y+1, r24	; 0x01
    434e:	8b c0       	rjmp	.+278    	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
		}
	}
	else if (copy_IntNum == INT1){
    4350:	8a 81       	ldd	r24, Y+2	; 0x02
    4352:	81 30       	cpi	r24, 0x01	; 1
    4354:	09 f0       	breq	.+2      	; 0x4358 <EXTI_u8SetSenceCtrl+0xea>
    4356:	5f c0       	rjmp	.+190    	; 0x4416 <EXTI_u8SetSenceCtrl+0x1a8>
		switch (copy_SenseCtrl){
    4358:	8b 81       	ldd	r24, Y+3	; 0x03
    435a:	28 2f       	mov	r18, r24
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	3f 83       	std	Y+7, r19	; 0x07
    4360:	2e 83       	std	Y+6, r18	; 0x06
    4362:	8e 81       	ldd	r24, Y+6	; 0x06
    4364:	9f 81       	ldd	r25, Y+7	; 0x07
    4366:	82 30       	cpi	r24, 0x02	; 2
    4368:	91 05       	cpc	r25, r1
    436a:	29 f1       	breq	.+74     	; 0x43b6 <EXTI_u8SetSenceCtrl+0x148>
    436c:	2e 81       	ldd	r18, Y+6	; 0x06
    436e:	3f 81       	ldd	r19, Y+7	; 0x07
    4370:	23 30       	cpi	r18, 0x03	; 3
    4372:	31 05       	cpc	r19, r1
    4374:	34 f4       	brge	.+12     	; 0x4382 <EXTI_u8SetSenceCtrl+0x114>
    4376:	8e 81       	ldd	r24, Y+6	; 0x06
    4378:	9f 81       	ldd	r25, Y+7	; 0x07
    437a:	81 30       	cpi	r24, 0x01	; 1
    437c:	91 05       	cpc	r25, r1
    437e:	61 f0       	breq	.+24     	; 0x4398 <EXTI_u8SetSenceCtrl+0x12a>
    4380:	47 c0       	rjmp	.+142    	; 0x4410 <EXTI_u8SetSenceCtrl+0x1a2>
    4382:	2e 81       	ldd	r18, Y+6	; 0x06
    4384:	3f 81       	ldd	r19, Y+7	; 0x07
    4386:	23 30       	cpi	r18, 0x03	; 3
    4388:	31 05       	cpc	r19, r1
    438a:	21 f1       	breq	.+72     	; 0x43d4 <EXTI_u8SetSenceCtrl+0x166>
    438c:	8e 81       	ldd	r24, Y+6	; 0x06
    438e:	9f 81       	ldd	r25, Y+7	; 0x07
    4390:	84 30       	cpi	r24, 0x04	; 4
    4392:	91 05       	cpc	r25, r1
    4394:	71 f1       	breq	.+92     	; 0x43f2 <EXTI_u8SetSenceCtrl+0x184>
    4396:	3c c0       	rjmp	.+120    	; 0x4410 <EXTI_u8SetSenceCtrl+0x1a2>
			case LOW_LEVEL:CLS_BIT(MCUCR, MCUCR_IS10);CLS_BIT(MCUCR, MCUCR_IS11);break;
    4398:	a5 e5       	ldi	r26, 0x55	; 85
    439a:	b0 e0       	ldi	r27, 0x00	; 0
    439c:	e5 e5       	ldi	r30, 0x55	; 85
    439e:	f0 e0       	ldi	r31, 0x00	; 0
    43a0:	80 81       	ld	r24, Z
    43a2:	8b 7f       	andi	r24, 0xFB	; 251
    43a4:	8c 93       	st	X, r24
    43a6:	a5 e5       	ldi	r26, 0x55	; 85
    43a8:	b0 e0       	ldi	r27, 0x00	; 0
    43aa:	e5 e5       	ldi	r30, 0x55	; 85
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	80 81       	ld	r24, Z
    43b0:	87 7f       	andi	r24, 0xF7	; 247
    43b2:	8c 93       	st	X, r24
    43b4:	58 c0       	rjmp	.+176    	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
			case ON_CHANGE:SET_BIT(MCUCR, MCUCR_IS10);CLS_BIT(MCUCR, MCUCR_IS11);break;
    43b6:	a5 e5       	ldi	r26, 0x55	; 85
    43b8:	b0 e0       	ldi	r27, 0x00	; 0
    43ba:	e5 e5       	ldi	r30, 0x55	; 85
    43bc:	f0 e0       	ldi	r31, 0x00	; 0
    43be:	80 81       	ld	r24, Z
    43c0:	84 60       	ori	r24, 0x04	; 4
    43c2:	8c 93       	st	X, r24
    43c4:	a5 e5       	ldi	r26, 0x55	; 85
    43c6:	b0 e0       	ldi	r27, 0x00	; 0
    43c8:	e5 e5       	ldi	r30, 0x55	; 85
    43ca:	f0 e0       	ldi	r31, 0x00	; 0
    43cc:	80 81       	ld	r24, Z
    43ce:	87 7f       	andi	r24, 0xF7	; 247
    43d0:	8c 93       	st	X, r24
    43d2:	49 c0       	rjmp	.+146    	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
			case FALLING_EDGE:CLS_BIT(MCUCR, MCUCR_IS10);SET_BIT(MCUCR, MCUCR_IS11);break;
    43d4:	a5 e5       	ldi	r26, 0x55	; 85
    43d6:	b0 e0       	ldi	r27, 0x00	; 0
    43d8:	e5 e5       	ldi	r30, 0x55	; 85
    43da:	f0 e0       	ldi	r31, 0x00	; 0
    43dc:	80 81       	ld	r24, Z
    43de:	8b 7f       	andi	r24, 0xFB	; 251
    43e0:	8c 93       	st	X, r24
    43e2:	a5 e5       	ldi	r26, 0x55	; 85
    43e4:	b0 e0       	ldi	r27, 0x00	; 0
    43e6:	e5 e5       	ldi	r30, 0x55	; 85
    43e8:	f0 e0       	ldi	r31, 0x00	; 0
    43ea:	80 81       	ld	r24, Z
    43ec:	88 60       	ori	r24, 0x08	; 8
    43ee:	8c 93       	st	X, r24
    43f0:	3a c0       	rjmp	.+116    	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
			case RISING_EDGE:SET_BIT(MCUCR, MCUCR_IS10);SET_BIT(MCUCR, MCUCR_IS11);break;
    43f2:	a5 e5       	ldi	r26, 0x55	; 85
    43f4:	b0 e0       	ldi	r27, 0x00	; 0
    43f6:	e5 e5       	ldi	r30, 0x55	; 85
    43f8:	f0 e0       	ldi	r31, 0x00	; 0
    43fa:	80 81       	ld	r24, Z
    43fc:	84 60       	ori	r24, 0x04	; 4
    43fe:	8c 93       	st	X, r24
    4400:	a5 e5       	ldi	r26, 0x55	; 85
    4402:	b0 e0       	ldi	r27, 0x00	; 0
    4404:	e5 e5       	ldi	r30, 0x55	; 85
    4406:	f0 e0       	ldi	r31, 0x00	; 0
    4408:	80 81       	ld	r24, Z
    440a:	88 60       	ori	r24, 0x08	; 8
    440c:	8c 93       	st	X, r24
    440e:	2b c0       	rjmp	.+86     	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
			default:Local_u8Error_state = NOK;break;
    4410:	82 e0       	ldi	r24, 0x02	; 2
    4412:	89 83       	std	Y+1, r24	; 0x01
    4414:	28 c0       	rjmp	.+80     	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
		}
	}
	else if (copy_IntNum == INT2){
    4416:	8a 81       	ldd	r24, Y+2	; 0x02
    4418:	82 30       	cpi	r24, 0x02	; 2
    441a:	19 f5       	brne	.+70     	; 0x4462 <EXTI_u8SetSenceCtrl+0x1f4>
		switch (copy_SenseCtrl){
    441c:	8b 81       	ldd	r24, Y+3	; 0x03
    441e:	28 2f       	mov	r18, r24
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	3d 83       	std	Y+5, r19	; 0x05
    4424:	2c 83       	std	Y+4, r18	; 0x04
    4426:	8c 81       	ldd	r24, Y+4	; 0x04
    4428:	9d 81       	ldd	r25, Y+5	; 0x05
    442a:	83 30       	cpi	r24, 0x03	; 3
    442c:	91 05       	cpc	r25, r1
    442e:	31 f0       	breq	.+12     	; 0x443c <EXTI_u8SetSenceCtrl+0x1ce>
    4430:	2c 81       	ldd	r18, Y+4	; 0x04
    4432:	3d 81       	ldd	r19, Y+5	; 0x05
    4434:	24 30       	cpi	r18, 0x04	; 4
    4436:	31 05       	cpc	r19, r1
    4438:	49 f0       	breq	.+18     	; 0x444c <EXTI_u8SetSenceCtrl+0x1de>
    443a:	10 c0       	rjmp	.+32     	; 0x445c <EXTI_u8SetSenceCtrl+0x1ee>
			case FALLING_EDGE:CLS_BIT(MCUCSR, MCUCR_ISC2);break;
    443c:	a4 e5       	ldi	r26, 0x54	; 84
    443e:	b0 e0       	ldi	r27, 0x00	; 0
    4440:	e4 e5       	ldi	r30, 0x54	; 84
    4442:	f0 e0       	ldi	r31, 0x00	; 0
    4444:	80 81       	ld	r24, Z
    4446:	8f 7b       	andi	r24, 0xBF	; 191
    4448:	8c 93       	st	X, r24
    444a:	0d c0       	rjmp	.+26     	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
			case RISING_EDGE:SET_BIT(MCUCSR, MCUCR_ISC2);break;
    444c:	a4 e5       	ldi	r26, 0x54	; 84
    444e:	b0 e0       	ldi	r27, 0x00	; 0
    4450:	e4 e5       	ldi	r30, 0x54	; 84
    4452:	f0 e0       	ldi	r31, 0x00	; 0
    4454:	80 81       	ld	r24, Z
    4456:	80 64       	ori	r24, 0x40	; 64
    4458:	8c 93       	st	X, r24
    445a:	05 c0       	rjmp	.+10     	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
			default:Local_u8Error_state = NOK;break;
    445c:	82 e0       	ldi	r24, 0x02	; 2
    445e:	89 83       	std	Y+1, r24	; 0x01
    4460:	02 c0       	rjmp	.+4      	; 0x4466 <EXTI_u8SetSenceCtrl+0x1f8>
		}
	}
	else
	Local_u8Error_state = NOK;
    4462:	82 e0       	ldi	r24, 0x02	; 2
    4464:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8Error_state;
    4466:	89 81       	ldd	r24, Y+1	; 0x01
}
    4468:	29 96       	adiw	r28, 0x09	; 9
    446a:	0f b6       	in	r0, 0x3f	; 63
    446c:	f8 94       	cli
    446e:	de bf       	out	0x3e, r29	; 62
    4470:	0f be       	out	0x3f, r0	; 63
    4472:	cd bf       	out	0x3d, r28	; 61
    4474:	cf 91       	pop	r28
    4476:	df 91       	pop	r29
    4478:	08 95       	ret

0000447a <EXTI_u8IntEnable>:

uint8 EXTI_u8IntEnable(EXTI_IntNum_t copy_IntNum){
    447a:	df 93       	push	r29
    447c:	cf 93       	push	r28
    447e:	00 d0       	rcall	.+0      	; 0x4480 <EXTI_u8IntEnable+0x6>
    4480:	00 d0       	rcall	.+0      	; 0x4482 <EXTI_u8IntEnable+0x8>
    4482:	cd b7       	in	r28, 0x3d	; 61
    4484:	de b7       	in	r29, 0x3e	; 62
    4486:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Error_state = OK;
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_IntNum){
    448c:	8a 81       	ldd	r24, Y+2	; 0x02
    448e:	28 2f       	mov	r18, r24
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	3c 83       	std	Y+4, r19	; 0x04
    4494:	2b 83       	std	Y+3, r18	; 0x03
    4496:	8b 81       	ldd	r24, Y+3	; 0x03
    4498:	9c 81       	ldd	r25, Y+4	; 0x04
    449a:	81 30       	cpi	r24, 0x01	; 1
    449c:	91 05       	cpc	r25, r1
    449e:	89 f0       	breq	.+34     	; 0x44c2 <EXTI_u8IntEnable+0x48>
    44a0:	2b 81       	ldd	r18, Y+3	; 0x03
    44a2:	3c 81       	ldd	r19, Y+4	; 0x04
    44a4:	22 30       	cpi	r18, 0x02	; 2
    44a6:	31 05       	cpc	r19, r1
    44a8:	a1 f0       	breq	.+40     	; 0x44d2 <EXTI_u8IntEnable+0x58>
    44aa:	8b 81       	ldd	r24, Y+3	; 0x03
    44ac:	9c 81       	ldd	r25, Y+4	; 0x04
    44ae:	00 97       	sbiw	r24, 0x00	; 0
    44b0:	c1 f4       	brne	.+48     	; 0x44e2 <EXTI_u8IntEnable+0x68>
		case INT0:SET_BIT(GICR,GICR_INT0);break;
    44b2:	ab e5       	ldi	r26, 0x5B	; 91
    44b4:	b0 e0       	ldi	r27, 0x00	; 0
    44b6:	eb e5       	ldi	r30, 0x5B	; 91
    44b8:	f0 e0       	ldi	r31, 0x00	; 0
    44ba:	80 81       	ld	r24, Z
    44bc:	80 64       	ori	r24, 0x40	; 64
    44be:	8c 93       	st	X, r24
    44c0:	12 c0       	rjmp	.+36     	; 0x44e6 <EXTI_u8IntEnable+0x6c>
		case INT1:SET_BIT(GICR,GICR_INT1);break;
    44c2:	ab e5       	ldi	r26, 0x5B	; 91
    44c4:	b0 e0       	ldi	r27, 0x00	; 0
    44c6:	eb e5       	ldi	r30, 0x5B	; 91
    44c8:	f0 e0       	ldi	r31, 0x00	; 0
    44ca:	80 81       	ld	r24, Z
    44cc:	80 68       	ori	r24, 0x80	; 128
    44ce:	8c 93       	st	X, r24
    44d0:	0a c0       	rjmp	.+20     	; 0x44e6 <EXTI_u8IntEnable+0x6c>
		case INT2:SET_BIT(GICR,GICR_INT2);break;
    44d2:	ab e5       	ldi	r26, 0x5B	; 91
    44d4:	b0 e0       	ldi	r27, 0x00	; 0
    44d6:	eb e5       	ldi	r30, 0x5B	; 91
    44d8:	f0 e0       	ldi	r31, 0x00	; 0
    44da:	80 81       	ld	r24, Z
    44dc:	80 62       	ori	r24, 0x20	; 32
    44de:	8c 93       	st	X, r24
    44e0:	02 c0       	rjmp	.+4      	; 0x44e6 <EXTI_u8IntEnable+0x6c>
		default:Local_u8Error_state = NOK;break;
    44e2:	82 e0       	ldi	r24, 0x02	; 2
    44e4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_state;
    44e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	cf 91       	pop	r28
    44f2:	df 91       	pop	r29
    44f4:	08 95       	ret

000044f6 <EXTI_u8IntDisable>:
uint8 EXTI_u8IntDisable(EXTI_IntNum_t copy_IntNum){
    44f6:	df 93       	push	r29
    44f8:	cf 93       	push	r28
    44fa:	00 d0       	rcall	.+0      	; 0x44fc <EXTI_u8IntDisable+0x6>
    44fc:	00 d0       	rcall	.+0      	; 0x44fe <EXTI_u8IntDisable+0x8>
    44fe:	cd b7       	in	r28, 0x3d	; 61
    4500:	de b7       	in	r29, 0x3e	; 62
    4502:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Error_state = OK;
    4504:	81 e0       	ldi	r24, 0x01	; 1
    4506:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_IntNum){
    4508:	8a 81       	ldd	r24, Y+2	; 0x02
    450a:	28 2f       	mov	r18, r24
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	3c 83       	std	Y+4, r19	; 0x04
    4510:	2b 83       	std	Y+3, r18	; 0x03
    4512:	8b 81       	ldd	r24, Y+3	; 0x03
    4514:	9c 81       	ldd	r25, Y+4	; 0x04
    4516:	81 30       	cpi	r24, 0x01	; 1
    4518:	91 05       	cpc	r25, r1
    451a:	89 f0       	breq	.+34     	; 0x453e <EXTI_u8IntDisable+0x48>
    451c:	2b 81       	ldd	r18, Y+3	; 0x03
    451e:	3c 81       	ldd	r19, Y+4	; 0x04
    4520:	22 30       	cpi	r18, 0x02	; 2
    4522:	31 05       	cpc	r19, r1
    4524:	a1 f0       	breq	.+40     	; 0x454e <EXTI_u8IntDisable+0x58>
    4526:	8b 81       	ldd	r24, Y+3	; 0x03
    4528:	9c 81       	ldd	r25, Y+4	; 0x04
    452a:	00 97       	sbiw	r24, 0x00	; 0
    452c:	c1 f4       	brne	.+48     	; 0x455e <EXTI_u8IntDisable+0x68>
		case INT0:CLS_BIT(GICR,GICR_INT0);break;
    452e:	ab e5       	ldi	r26, 0x5B	; 91
    4530:	b0 e0       	ldi	r27, 0x00	; 0
    4532:	eb e5       	ldi	r30, 0x5B	; 91
    4534:	f0 e0       	ldi	r31, 0x00	; 0
    4536:	80 81       	ld	r24, Z
    4538:	8f 7b       	andi	r24, 0xBF	; 191
    453a:	8c 93       	st	X, r24
    453c:	12 c0       	rjmp	.+36     	; 0x4562 <EXTI_u8IntDisable+0x6c>
		case INT1:CLS_BIT(GICR,GICR_INT1);break;
    453e:	ab e5       	ldi	r26, 0x5B	; 91
    4540:	b0 e0       	ldi	r27, 0x00	; 0
    4542:	eb e5       	ldi	r30, 0x5B	; 91
    4544:	f0 e0       	ldi	r31, 0x00	; 0
    4546:	80 81       	ld	r24, Z
    4548:	8f 77       	andi	r24, 0x7F	; 127
    454a:	8c 93       	st	X, r24
    454c:	0a c0       	rjmp	.+20     	; 0x4562 <EXTI_u8IntDisable+0x6c>
		case INT2:CLS_BIT(GICR,GICR_INT2);break;
    454e:	ab e5       	ldi	r26, 0x5B	; 91
    4550:	b0 e0       	ldi	r27, 0x00	; 0
    4552:	eb e5       	ldi	r30, 0x5B	; 91
    4554:	f0 e0       	ldi	r31, 0x00	; 0
    4556:	80 81       	ld	r24, Z
    4558:	8f 7d       	andi	r24, 0xDF	; 223
    455a:	8c 93       	st	X, r24
    455c:	02 c0       	rjmp	.+4      	; 0x4562 <EXTI_u8IntDisable+0x6c>
		default:Local_u8Error_state = NOK;break;
    455e:	82 e0       	ldi	r24, 0x02	; 2
    4560:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_state;
    4562:	89 81       	ldd	r24, Y+1	; 0x01
}
    4564:	0f 90       	pop	r0
    4566:	0f 90       	pop	r0
    4568:	0f 90       	pop	r0
    456a:	0f 90       	pop	r0
    456c:	cf 91       	pop	r28
    456e:	df 91       	pop	r29
    4570:	08 95       	ret

00004572 <Port_voidInit>:
#include "PORT_cfg.h"
#include "PORT_prv.h"
// #include "../DIO_interface.h"


void Port_voidInit(){
    4572:	df 93       	push	r29
    4574:	cf 93       	push	r28
    4576:	cd b7       	in	r28, 0x3d	; 61
    4578:	de b7       	in	r29, 0x3e	; 62

    DDRA = PORTA_DIR;
    457a:	ea e3       	ldi	r30, 0x3A	; 58
    457c:	f0 e0       	ldi	r31, 0x00	; 0
    457e:	8e e7       	ldi	r24, 0x7E	; 126
    4580:	80 83       	st	Z, r24
    DDRB = PORTB_DIR;
    4582:	e7 e3       	ldi	r30, 0x37	; 55
    4584:	f0 e0       	ldi	r31, 0x00	; 0
    4586:	10 82       	st	Z, r1
    DDRC = PORTC_DIR;
    4588:	e4 e3       	ldi	r30, 0x34	; 52
    458a:	f0 e0       	ldi	r31, 0x00	; 0
    458c:	83 e0       	ldi	r24, 0x03	; 3
    458e:	80 83       	st	Z, r24
    DDRD = PORTD_DIR;
    4590:	e1 e3       	ldi	r30, 0x31	; 49
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	10 82       	st	Z, r1

    PORTA = PORTA_INITVAL;
    4596:	eb e3       	ldi	r30, 0x3B	; 59
    4598:	f0 e0       	ldi	r31, 0x00	; 0
    459a:	10 82       	st	Z, r1
    PORTB = PORTB_INITVAL;
    459c:	e8 e3       	ldi	r30, 0x38	; 56
    459e:	f0 e0       	ldi	r31, 0x00	; 0
    45a0:	10 82       	st	Z, r1
    PORTC = PORTC_INITVAL;
    45a2:	e5 e3       	ldi	r30, 0x35	; 53
    45a4:	f0 e0       	ldi	r31, 0x00	; 0
    45a6:	10 82       	st	Z, r1
    PORTD = PORTD_INITVAL;
    45a8:	e2 e3       	ldi	r30, 0x32	; 50
    45aa:	f0 e0       	ldi	r31, 0x00	; 0
    45ac:	10 82       	st	Z, r1
}
    45ae:	cf 91       	pop	r28
    45b0:	df 91       	pop	r29
    45b2:	08 95       	ret

000045b4 <DIO_u8_SetPinDir>:





uint8 DIO_u8_SetPinDir(DIO_port_t copy_port, DIO_pin_t copy_pinNum, DIO_pinDir_t copy_pinDir){
    45b4:	df 93       	push	r29
    45b6:	cf 93       	push	r28
    45b8:	cd b7       	in	r28, 0x3d	; 61
    45ba:	de b7       	in	r29, 0x3e	; 62
    45bc:	28 97       	sbiw	r28, 0x08	; 8
    45be:	0f b6       	in	r0, 0x3f	; 63
    45c0:	f8 94       	cli
    45c2:	de bf       	out	0x3e, r29	; 62
    45c4:	0f be       	out	0x3f, r0	; 63
    45c6:	cd bf       	out	0x3d, r28	; 61
    45c8:	8a 83       	std	Y+2, r24	; 0x02
    45ca:	6b 83       	std	Y+3, r22	; 0x03
    45cc:	4c 83       	std	Y+4, r20	; 0x04
    uint8 Local_u8ErrorState = OK;
    45ce:	81 e0       	ldi	r24, 0x01	; 1
    45d0:	89 83       	std	Y+1, r24	; 0x01
    if((copy_pinNum >= DIO_PIN0)  && (copy_pinNum<=DIO_PIN7)){
    45d2:	8b 81       	ldd	r24, Y+3	; 0x03
    45d4:	88 30       	cpi	r24, 0x08	; 8
    45d6:	08 f0       	brcs	.+2      	; 0x45da <DIO_u8_SetPinDir+0x26>
    45d8:	f4 c0       	rjmp	.+488    	; 0x47c2 <DIO_u8_SetPinDir+0x20e>

        if(copy_pinDir == DIO_PIN_INPUT){
    45da:	8c 81       	ldd	r24, Y+4	; 0x04
    45dc:	88 23       	and	r24, r24
    45de:	09 f0       	breq	.+2      	; 0x45e2 <DIO_u8_SetPinDir+0x2e>
    45e0:	77 c0       	rjmp	.+238    	; 0x46d0 <DIO_u8_SetPinDir+0x11c>
            switch (copy_port)
    45e2:	8a 81       	ldd	r24, Y+2	; 0x02
    45e4:	28 2f       	mov	r18, r24
    45e6:	30 e0       	ldi	r19, 0x00	; 0
    45e8:	38 87       	std	Y+8, r19	; 0x08
    45ea:	2f 83       	std	Y+7, r18	; 0x07
    45ec:	8f 81       	ldd	r24, Y+7	; 0x07
    45ee:	98 85       	ldd	r25, Y+8	; 0x08
    45f0:	81 30       	cpi	r24, 0x01	; 1
    45f2:	91 05       	cpc	r25, r1
    45f4:	59 f1       	breq	.+86     	; 0x464c <DIO_u8_SetPinDir+0x98>
    45f6:	2f 81       	ldd	r18, Y+7	; 0x07
    45f8:	38 85       	ldd	r19, Y+8	; 0x08
    45fa:	22 30       	cpi	r18, 0x02	; 2
    45fc:	31 05       	cpc	r19, r1
    45fe:	2c f4       	brge	.+10     	; 0x460a <DIO_u8_SetPinDir+0x56>
    4600:	8f 81       	ldd	r24, Y+7	; 0x07
    4602:	98 85       	ldd	r25, Y+8	; 0x08
    4604:	00 97       	sbiw	r24, 0x00	; 0
    4606:	69 f0       	breq	.+26     	; 0x4622 <DIO_u8_SetPinDir+0x6e>
    4608:	60 c0       	rjmp	.+192    	; 0x46ca <DIO_u8_SetPinDir+0x116>
    460a:	2f 81       	ldd	r18, Y+7	; 0x07
    460c:	38 85       	ldd	r19, Y+8	; 0x08
    460e:	22 30       	cpi	r18, 0x02	; 2
    4610:	31 05       	cpc	r19, r1
    4612:	89 f1       	breq	.+98     	; 0x4676 <DIO_u8_SetPinDir+0xc2>
    4614:	8f 81       	ldd	r24, Y+7	; 0x07
    4616:	98 85       	ldd	r25, Y+8	; 0x08
    4618:	83 30       	cpi	r24, 0x03	; 3
    461a:	91 05       	cpc	r25, r1
    461c:	09 f4       	brne	.+2      	; 0x4620 <DIO_u8_SetPinDir+0x6c>
    461e:	40 c0       	rjmp	.+128    	; 0x46a0 <DIO_u8_SetPinDir+0xec>
    4620:	54 c0       	rjmp	.+168    	; 0x46ca <DIO_u8_SetPinDir+0x116>
            {
            case DIO_PORTA : CLS_BIT(DDRA,copy_pinNum); break;
    4622:	aa e3       	ldi	r26, 0x3A	; 58
    4624:	b0 e0       	ldi	r27, 0x00	; 0
    4626:	ea e3       	ldi	r30, 0x3A	; 58
    4628:	f0 e0       	ldi	r31, 0x00	; 0
    462a:	80 81       	ld	r24, Z
    462c:	48 2f       	mov	r20, r24
    462e:	8b 81       	ldd	r24, Y+3	; 0x03
    4630:	28 2f       	mov	r18, r24
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	02 2e       	mov	r0, r18
    463a:	02 c0       	rjmp	.+4      	; 0x4640 <DIO_u8_SetPinDir+0x8c>
    463c:	88 0f       	add	r24, r24
    463e:	99 1f       	adc	r25, r25
    4640:	0a 94       	dec	r0
    4642:	e2 f7       	brpl	.-8      	; 0x463c <DIO_u8_SetPinDir+0x88>
    4644:	80 95       	com	r24
    4646:	84 23       	and	r24, r20
    4648:	8c 93       	st	X, r24
    464a:	bd c0       	rjmp	.+378    	; 0x47c6 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTB : CLS_BIT(DDRB,copy_pinNum); break;
    464c:	a7 e3       	ldi	r26, 0x37	; 55
    464e:	b0 e0       	ldi	r27, 0x00	; 0
    4650:	e7 e3       	ldi	r30, 0x37	; 55
    4652:	f0 e0       	ldi	r31, 0x00	; 0
    4654:	80 81       	ld	r24, Z
    4656:	48 2f       	mov	r20, r24
    4658:	8b 81       	ldd	r24, Y+3	; 0x03
    465a:	28 2f       	mov	r18, r24
    465c:	30 e0       	ldi	r19, 0x00	; 0
    465e:	81 e0       	ldi	r24, 0x01	; 1
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	02 2e       	mov	r0, r18
    4664:	02 c0       	rjmp	.+4      	; 0x466a <DIO_u8_SetPinDir+0xb6>
    4666:	88 0f       	add	r24, r24
    4668:	99 1f       	adc	r25, r25
    466a:	0a 94       	dec	r0
    466c:	e2 f7       	brpl	.-8      	; 0x4666 <DIO_u8_SetPinDir+0xb2>
    466e:	80 95       	com	r24
    4670:	84 23       	and	r24, r20
    4672:	8c 93       	st	X, r24
    4674:	a8 c0       	rjmp	.+336    	; 0x47c6 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTC : CLS_BIT(DDRC,copy_pinNum); break;
    4676:	a4 e3       	ldi	r26, 0x34	; 52
    4678:	b0 e0       	ldi	r27, 0x00	; 0
    467a:	e4 e3       	ldi	r30, 0x34	; 52
    467c:	f0 e0       	ldi	r31, 0x00	; 0
    467e:	80 81       	ld	r24, Z
    4680:	48 2f       	mov	r20, r24
    4682:	8b 81       	ldd	r24, Y+3	; 0x03
    4684:	28 2f       	mov	r18, r24
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	02 2e       	mov	r0, r18
    468e:	02 c0       	rjmp	.+4      	; 0x4694 <DIO_u8_SetPinDir+0xe0>
    4690:	88 0f       	add	r24, r24
    4692:	99 1f       	adc	r25, r25
    4694:	0a 94       	dec	r0
    4696:	e2 f7       	brpl	.-8      	; 0x4690 <DIO_u8_SetPinDir+0xdc>
    4698:	80 95       	com	r24
    469a:	84 23       	and	r24, r20
    469c:	8c 93       	st	X, r24
    469e:	93 c0       	rjmp	.+294    	; 0x47c6 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTD : CLS_BIT(DDRD,copy_pinNum); break;
    46a0:	a1 e3       	ldi	r26, 0x31	; 49
    46a2:	b0 e0       	ldi	r27, 0x00	; 0
    46a4:	e1 e3       	ldi	r30, 0x31	; 49
    46a6:	f0 e0       	ldi	r31, 0x00	; 0
    46a8:	80 81       	ld	r24, Z
    46aa:	48 2f       	mov	r20, r24
    46ac:	8b 81       	ldd	r24, Y+3	; 0x03
    46ae:	28 2f       	mov	r18, r24
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	02 2e       	mov	r0, r18
    46b8:	02 c0       	rjmp	.+4      	; 0x46be <DIO_u8_SetPinDir+0x10a>
    46ba:	88 0f       	add	r24, r24
    46bc:	99 1f       	adc	r25, r25
    46be:	0a 94       	dec	r0
    46c0:	e2 f7       	brpl	.-8      	; 0x46ba <DIO_u8_SetPinDir+0x106>
    46c2:	80 95       	com	r24
    46c4:	84 23       	and	r24, r20
    46c6:	8c 93       	st	X, r24
    46c8:	7e c0       	rjmp	.+252    	; 0x47c6 <DIO_u8_SetPinDir+0x212>
            
            default: Local_u8ErrorState = NOK;  break;
    46ca:	82 e0       	ldi	r24, 0x02	; 2
    46cc:	89 83       	std	Y+1, r24	; 0x01
    46ce:	7b c0       	rjmp	.+246    	; 0x47c6 <DIO_u8_SetPinDir+0x212>
            }
        }   
        else if(copy_pinDir == DIO_PIN_OUTPUT){
    46d0:	8c 81       	ldd	r24, Y+4	; 0x04
    46d2:	81 30       	cpi	r24, 0x01	; 1
    46d4:	09 f0       	breq	.+2      	; 0x46d8 <DIO_u8_SetPinDir+0x124>
    46d6:	72 c0       	rjmp	.+228    	; 0x47bc <DIO_u8_SetPinDir+0x208>
             switch (copy_port)
    46d8:	8a 81       	ldd	r24, Y+2	; 0x02
    46da:	28 2f       	mov	r18, r24
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	3e 83       	std	Y+6, r19	; 0x06
    46e0:	2d 83       	std	Y+5, r18	; 0x05
    46e2:	8d 81       	ldd	r24, Y+5	; 0x05
    46e4:	9e 81       	ldd	r25, Y+6	; 0x06
    46e6:	81 30       	cpi	r24, 0x01	; 1
    46e8:	91 05       	cpc	r25, r1
    46ea:	49 f1       	breq	.+82     	; 0x473e <DIO_u8_SetPinDir+0x18a>
    46ec:	2d 81       	ldd	r18, Y+5	; 0x05
    46ee:	3e 81       	ldd	r19, Y+6	; 0x06
    46f0:	22 30       	cpi	r18, 0x02	; 2
    46f2:	31 05       	cpc	r19, r1
    46f4:	2c f4       	brge	.+10     	; 0x4700 <DIO_u8_SetPinDir+0x14c>
    46f6:	8d 81       	ldd	r24, Y+5	; 0x05
    46f8:	9e 81       	ldd	r25, Y+6	; 0x06
    46fa:	00 97       	sbiw	r24, 0x00	; 0
    46fc:	61 f0       	breq	.+24     	; 0x4716 <DIO_u8_SetPinDir+0x162>
    46fe:	5b c0       	rjmp	.+182    	; 0x47b6 <DIO_u8_SetPinDir+0x202>
    4700:	2d 81       	ldd	r18, Y+5	; 0x05
    4702:	3e 81       	ldd	r19, Y+6	; 0x06
    4704:	22 30       	cpi	r18, 0x02	; 2
    4706:	31 05       	cpc	r19, r1
    4708:	71 f1       	breq	.+92     	; 0x4766 <DIO_u8_SetPinDir+0x1b2>
    470a:	8d 81       	ldd	r24, Y+5	; 0x05
    470c:	9e 81       	ldd	r25, Y+6	; 0x06
    470e:	83 30       	cpi	r24, 0x03	; 3
    4710:	91 05       	cpc	r25, r1
    4712:	e9 f1       	breq	.+122    	; 0x478e <DIO_u8_SetPinDir+0x1da>
    4714:	50 c0       	rjmp	.+160    	; 0x47b6 <DIO_u8_SetPinDir+0x202>
            {
            case DIO_PORTA : SET_BIT(DDRA,copy_pinNum); break;
    4716:	aa e3       	ldi	r26, 0x3A	; 58
    4718:	b0 e0       	ldi	r27, 0x00	; 0
    471a:	ea e3       	ldi	r30, 0x3A	; 58
    471c:	f0 e0       	ldi	r31, 0x00	; 0
    471e:	80 81       	ld	r24, Z
    4720:	48 2f       	mov	r20, r24
    4722:	8b 81       	ldd	r24, Y+3	; 0x03
    4724:	28 2f       	mov	r18, r24
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	81 e0       	ldi	r24, 0x01	; 1
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	02 2e       	mov	r0, r18
    472e:	02 c0       	rjmp	.+4      	; 0x4734 <DIO_u8_SetPinDir+0x180>
    4730:	88 0f       	add	r24, r24
    4732:	99 1f       	adc	r25, r25
    4734:	0a 94       	dec	r0
    4736:	e2 f7       	brpl	.-8      	; 0x4730 <DIO_u8_SetPinDir+0x17c>
    4738:	84 2b       	or	r24, r20
    473a:	8c 93       	st	X, r24
    473c:	44 c0       	rjmp	.+136    	; 0x47c6 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTB : SET_BIT(DDRB,copy_pinNum); break;
    473e:	a7 e3       	ldi	r26, 0x37	; 55
    4740:	b0 e0       	ldi	r27, 0x00	; 0
    4742:	e7 e3       	ldi	r30, 0x37	; 55
    4744:	f0 e0       	ldi	r31, 0x00	; 0
    4746:	80 81       	ld	r24, Z
    4748:	48 2f       	mov	r20, r24
    474a:	8b 81       	ldd	r24, Y+3	; 0x03
    474c:	28 2f       	mov	r18, r24
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	81 e0       	ldi	r24, 0x01	; 1
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	02 2e       	mov	r0, r18
    4756:	02 c0       	rjmp	.+4      	; 0x475c <DIO_u8_SetPinDir+0x1a8>
    4758:	88 0f       	add	r24, r24
    475a:	99 1f       	adc	r25, r25
    475c:	0a 94       	dec	r0
    475e:	e2 f7       	brpl	.-8      	; 0x4758 <DIO_u8_SetPinDir+0x1a4>
    4760:	84 2b       	or	r24, r20
    4762:	8c 93       	st	X, r24
    4764:	30 c0       	rjmp	.+96     	; 0x47c6 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTC : SET_BIT(DDRC,copy_pinNum); break;
    4766:	a4 e3       	ldi	r26, 0x34	; 52
    4768:	b0 e0       	ldi	r27, 0x00	; 0
    476a:	e4 e3       	ldi	r30, 0x34	; 52
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	80 81       	ld	r24, Z
    4770:	48 2f       	mov	r20, r24
    4772:	8b 81       	ldd	r24, Y+3	; 0x03
    4774:	28 2f       	mov	r18, r24
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	81 e0       	ldi	r24, 0x01	; 1
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	02 2e       	mov	r0, r18
    477e:	02 c0       	rjmp	.+4      	; 0x4784 <DIO_u8_SetPinDir+0x1d0>
    4780:	88 0f       	add	r24, r24
    4782:	99 1f       	adc	r25, r25
    4784:	0a 94       	dec	r0
    4786:	e2 f7       	brpl	.-8      	; 0x4780 <DIO_u8_SetPinDir+0x1cc>
    4788:	84 2b       	or	r24, r20
    478a:	8c 93       	st	X, r24
    478c:	1c c0       	rjmp	.+56     	; 0x47c6 <DIO_u8_SetPinDir+0x212>
            case DIO_PORTD : SET_BIT(DDRD,copy_pinNum); break;
    478e:	a1 e3       	ldi	r26, 0x31	; 49
    4790:	b0 e0       	ldi	r27, 0x00	; 0
    4792:	e1 e3       	ldi	r30, 0x31	; 49
    4794:	f0 e0       	ldi	r31, 0x00	; 0
    4796:	80 81       	ld	r24, Z
    4798:	48 2f       	mov	r20, r24
    479a:	8b 81       	ldd	r24, Y+3	; 0x03
    479c:	28 2f       	mov	r18, r24
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	02 2e       	mov	r0, r18
    47a6:	02 c0       	rjmp	.+4      	; 0x47ac <DIO_u8_SetPinDir+0x1f8>
    47a8:	88 0f       	add	r24, r24
    47aa:	99 1f       	adc	r25, r25
    47ac:	0a 94       	dec	r0
    47ae:	e2 f7       	brpl	.-8      	; 0x47a8 <DIO_u8_SetPinDir+0x1f4>
    47b0:	84 2b       	or	r24, r20
    47b2:	8c 93       	st	X, r24
    47b4:	08 c0       	rjmp	.+16     	; 0x47c6 <DIO_u8_SetPinDir+0x212>
            
            default: Local_u8ErrorState = NOK;  break;
    47b6:	82 e0       	ldi	r24, 0x02	; 2
    47b8:	89 83       	std	Y+1, r24	; 0x01
    47ba:	05 c0       	rjmp	.+10     	; 0x47c6 <DIO_u8_SetPinDir+0x212>
            }
        }else
        Local_u8ErrorState = NOK;
    47bc:	82 e0       	ldi	r24, 0x02	; 2
    47be:	89 83       	std	Y+1, r24	; 0x01
    47c0:	02 c0       	rjmp	.+4      	; 0x47c6 <DIO_u8_SetPinDir+0x212>
    }else 
    Local_u8ErrorState = NOK;
    47c2:	82 e0       	ldi	r24, 0x02	; 2
    47c4:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    47c6:	89 81       	ldd	r24, Y+1	; 0x01

}
    47c8:	28 96       	adiw	r28, 0x08	; 8
    47ca:	0f b6       	in	r0, 0x3f	; 63
    47cc:	f8 94       	cli
    47ce:	de bf       	out	0x3e, r29	; 62
    47d0:	0f be       	out	0x3f, r0	; 63
    47d2:	cd bf       	out	0x3d, r28	; 61
    47d4:	cf 91       	pop	r28
    47d6:	df 91       	pop	r29
    47d8:	08 95       	ret

000047da <DIO_u8_SetPortDir>:
uint8 DIO_u8_SetPortDir(DIO_port_t copy_port,  uint8 copy_pinDir){
    47da:	df 93       	push	r29
    47dc:	cf 93       	push	r28
    47de:	00 d0       	rcall	.+0      	; 0x47e0 <DIO_u8_SetPortDir+0x6>
    47e0:	00 d0       	rcall	.+0      	; 0x47e2 <DIO_u8_SetPortDir+0x8>
    47e2:	0f 92       	push	r0
    47e4:	cd b7       	in	r28, 0x3d	; 61
    47e6:	de b7       	in	r29, 0x3e	; 62
    47e8:	8a 83       	std	Y+2, r24	; 0x02
    47ea:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Local_u8ErrorState = OK;
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	89 83       	std	Y+1, r24	; 0x01
        //if(copy_pinDir == DIO_PIN_INPUT){
            switch (copy_port)
    47f0:	8a 81       	ldd	r24, Y+2	; 0x02
    47f2:	28 2f       	mov	r18, r24
    47f4:	30 e0       	ldi	r19, 0x00	; 0
    47f6:	3d 83       	std	Y+5, r19	; 0x05
    47f8:	2c 83       	std	Y+4, r18	; 0x04
    47fa:	8c 81       	ldd	r24, Y+4	; 0x04
    47fc:	9d 81       	ldd	r25, Y+5	; 0x05
    47fe:	81 30       	cpi	r24, 0x01	; 1
    4800:	91 05       	cpc	r25, r1
    4802:	d1 f0       	breq	.+52     	; 0x4838 <DIO_u8_SetPortDir+0x5e>
    4804:	2c 81       	ldd	r18, Y+4	; 0x04
    4806:	3d 81       	ldd	r19, Y+5	; 0x05
    4808:	22 30       	cpi	r18, 0x02	; 2
    480a:	31 05       	cpc	r19, r1
    480c:	2c f4       	brge	.+10     	; 0x4818 <DIO_u8_SetPortDir+0x3e>
    480e:	8c 81       	ldd	r24, Y+4	; 0x04
    4810:	9d 81       	ldd	r25, Y+5	; 0x05
    4812:	00 97       	sbiw	r24, 0x00	; 0
    4814:	61 f0       	breq	.+24     	; 0x482e <DIO_u8_SetPortDir+0x54>
    4816:	1f c0       	rjmp	.+62     	; 0x4856 <DIO_u8_SetPortDir+0x7c>
    4818:	2c 81       	ldd	r18, Y+4	; 0x04
    481a:	3d 81       	ldd	r19, Y+5	; 0x05
    481c:	22 30       	cpi	r18, 0x02	; 2
    481e:	31 05       	cpc	r19, r1
    4820:	81 f0       	breq	.+32     	; 0x4842 <DIO_u8_SetPortDir+0x68>
    4822:	8c 81       	ldd	r24, Y+4	; 0x04
    4824:	9d 81       	ldd	r25, Y+5	; 0x05
    4826:	83 30       	cpi	r24, 0x03	; 3
    4828:	91 05       	cpc	r25, r1
    482a:	81 f0       	breq	.+32     	; 0x484c <DIO_u8_SetPortDir+0x72>
    482c:	14 c0       	rjmp	.+40     	; 0x4856 <DIO_u8_SetPortDir+0x7c>
            {
            case DIO_PORTA :DDRA = copy_pinDir; break;
    482e:	ea e3       	ldi	r30, 0x3A	; 58
    4830:	f0 e0       	ldi	r31, 0x00	; 0
    4832:	8b 81       	ldd	r24, Y+3	; 0x03
    4834:	80 83       	st	Z, r24
    4836:	11 c0       	rjmp	.+34     	; 0x485a <DIO_u8_SetPortDir+0x80>
            case DIO_PORTB :DDRB = copy_pinDir; break;
    4838:	e7 e3       	ldi	r30, 0x37	; 55
    483a:	f0 e0       	ldi	r31, 0x00	; 0
    483c:	8b 81       	ldd	r24, Y+3	; 0x03
    483e:	80 83       	st	Z, r24
    4840:	0c c0       	rjmp	.+24     	; 0x485a <DIO_u8_SetPortDir+0x80>
            case DIO_PORTC :DDRC = copy_pinDir; break;
    4842:	e4 e3       	ldi	r30, 0x34	; 52
    4844:	f0 e0       	ldi	r31, 0x00	; 0
    4846:	8b 81       	ldd	r24, Y+3	; 0x03
    4848:	80 83       	st	Z, r24
    484a:	07 c0       	rjmp	.+14     	; 0x485a <DIO_u8_SetPortDir+0x80>
            case DIO_PORTD :DDRD = copy_pinDir; break;
    484c:	e1 e3       	ldi	r30, 0x31	; 49
    484e:	f0 e0       	ldi	r31, 0x00	; 0
    4850:	8b 81       	ldd	r24, Y+3	; 0x03
    4852:	80 83       	st	Z, r24
    4854:	02 c0       	rjmp	.+4      	; 0x485a <DIO_u8_SetPortDir+0x80>
            
            default: Local_u8ErrorState = NOK;  break;
    4856:	82 e0       	ldi	r24, 0x02	; 2
    4858:	89 83       	std	Y+1, r24	; 0x01
            }
        
        
    
    return Local_u8ErrorState;
    485a:	89 81       	ldd	r24, Y+1	; 0x01

}
    485c:	0f 90       	pop	r0
    485e:	0f 90       	pop	r0
    4860:	0f 90       	pop	r0
    4862:	0f 90       	pop	r0
    4864:	0f 90       	pop	r0
    4866:	cf 91       	pop	r28
    4868:	df 91       	pop	r29
    486a:	08 95       	ret

0000486c <DIO_u8_SetPinVal>:

uint8 DIO_u8_SetPinVal(DIO_port_t copy_port, DIO_pin_t copy_pinNum, DIO_pinVal_t copy_pinVal){
    486c:	df 93       	push	r29
    486e:	cf 93       	push	r28
    4870:	cd b7       	in	r28, 0x3d	; 61
    4872:	de b7       	in	r29, 0x3e	; 62
    4874:	28 97       	sbiw	r28, 0x08	; 8
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	f8 94       	cli
    487a:	de bf       	out	0x3e, r29	; 62
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	cd bf       	out	0x3d, r28	; 61
    4880:	8a 83       	std	Y+2, r24	; 0x02
    4882:	6b 83       	std	Y+3, r22	; 0x03
    4884:	4c 83       	std	Y+4, r20	; 0x04
uint8 Local_u8ErrorState = OK;
    4886:	81 e0       	ldi	r24, 0x01	; 1
    4888:	89 83       	std	Y+1, r24	; 0x01
    if((copy_pinNum >= DIO_PIN0)  && (copy_pinNum<=DIO_PIN7)){
    488a:	8b 81       	ldd	r24, Y+3	; 0x03
    488c:	88 30       	cpi	r24, 0x08	; 8
    488e:	08 f0       	brcs	.+2      	; 0x4892 <DIO_u8_SetPinVal+0x26>
    4890:	f4 c0       	rjmp	.+488    	; 0x4a7a <DIO_u8_SetPinVal+0x20e>

        if(copy_pinVal == DIO_PIN_LOW){
    4892:	8c 81       	ldd	r24, Y+4	; 0x04
    4894:	88 23       	and	r24, r24
    4896:	09 f0       	breq	.+2      	; 0x489a <DIO_u8_SetPinVal+0x2e>
    4898:	77 c0       	rjmp	.+238    	; 0x4988 <DIO_u8_SetPinVal+0x11c>
            switch (copy_port)
    489a:	8a 81       	ldd	r24, Y+2	; 0x02
    489c:	28 2f       	mov	r18, r24
    489e:	30 e0       	ldi	r19, 0x00	; 0
    48a0:	38 87       	std	Y+8, r19	; 0x08
    48a2:	2f 83       	std	Y+7, r18	; 0x07
    48a4:	8f 81       	ldd	r24, Y+7	; 0x07
    48a6:	98 85       	ldd	r25, Y+8	; 0x08
    48a8:	81 30       	cpi	r24, 0x01	; 1
    48aa:	91 05       	cpc	r25, r1
    48ac:	59 f1       	breq	.+86     	; 0x4904 <DIO_u8_SetPinVal+0x98>
    48ae:	2f 81       	ldd	r18, Y+7	; 0x07
    48b0:	38 85       	ldd	r19, Y+8	; 0x08
    48b2:	22 30       	cpi	r18, 0x02	; 2
    48b4:	31 05       	cpc	r19, r1
    48b6:	2c f4       	brge	.+10     	; 0x48c2 <DIO_u8_SetPinVal+0x56>
    48b8:	8f 81       	ldd	r24, Y+7	; 0x07
    48ba:	98 85       	ldd	r25, Y+8	; 0x08
    48bc:	00 97       	sbiw	r24, 0x00	; 0
    48be:	69 f0       	breq	.+26     	; 0x48da <DIO_u8_SetPinVal+0x6e>
    48c0:	60 c0       	rjmp	.+192    	; 0x4982 <DIO_u8_SetPinVal+0x116>
    48c2:	2f 81       	ldd	r18, Y+7	; 0x07
    48c4:	38 85       	ldd	r19, Y+8	; 0x08
    48c6:	22 30       	cpi	r18, 0x02	; 2
    48c8:	31 05       	cpc	r19, r1
    48ca:	89 f1       	breq	.+98     	; 0x492e <DIO_u8_SetPinVal+0xc2>
    48cc:	8f 81       	ldd	r24, Y+7	; 0x07
    48ce:	98 85       	ldd	r25, Y+8	; 0x08
    48d0:	83 30       	cpi	r24, 0x03	; 3
    48d2:	91 05       	cpc	r25, r1
    48d4:	09 f4       	brne	.+2      	; 0x48d8 <DIO_u8_SetPinVal+0x6c>
    48d6:	40 c0       	rjmp	.+128    	; 0x4958 <DIO_u8_SetPinVal+0xec>
    48d8:	54 c0       	rjmp	.+168    	; 0x4982 <DIO_u8_SetPinVal+0x116>
            {
            case DIO_PORTA : CLS_BIT(PORTA,copy_pinNum); break;
    48da:	ab e3       	ldi	r26, 0x3B	; 59
    48dc:	b0 e0       	ldi	r27, 0x00	; 0
    48de:	eb e3       	ldi	r30, 0x3B	; 59
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	80 81       	ld	r24, Z
    48e4:	48 2f       	mov	r20, r24
    48e6:	8b 81       	ldd	r24, Y+3	; 0x03
    48e8:	28 2f       	mov	r18, r24
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	02 2e       	mov	r0, r18
    48f2:	02 c0       	rjmp	.+4      	; 0x48f8 <DIO_u8_SetPinVal+0x8c>
    48f4:	88 0f       	add	r24, r24
    48f6:	99 1f       	adc	r25, r25
    48f8:	0a 94       	dec	r0
    48fa:	e2 f7       	brpl	.-8      	; 0x48f4 <DIO_u8_SetPinVal+0x88>
    48fc:	80 95       	com	r24
    48fe:	84 23       	and	r24, r20
    4900:	8c 93       	st	X, r24
    4902:	bd c0       	rjmp	.+378    	; 0x4a7e <DIO_u8_SetPinVal+0x212>
            case DIO_PORTB : CLS_BIT(PORTB,copy_pinNum); break;
    4904:	a8 e3       	ldi	r26, 0x38	; 56
    4906:	b0 e0       	ldi	r27, 0x00	; 0
    4908:	e8 e3       	ldi	r30, 0x38	; 56
    490a:	f0 e0       	ldi	r31, 0x00	; 0
    490c:	80 81       	ld	r24, Z
    490e:	48 2f       	mov	r20, r24
    4910:	8b 81       	ldd	r24, Y+3	; 0x03
    4912:	28 2f       	mov	r18, r24
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	81 e0       	ldi	r24, 0x01	; 1
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	02 2e       	mov	r0, r18
    491c:	02 c0       	rjmp	.+4      	; 0x4922 <DIO_u8_SetPinVal+0xb6>
    491e:	88 0f       	add	r24, r24
    4920:	99 1f       	adc	r25, r25
    4922:	0a 94       	dec	r0
    4924:	e2 f7       	brpl	.-8      	; 0x491e <DIO_u8_SetPinVal+0xb2>
    4926:	80 95       	com	r24
    4928:	84 23       	and	r24, r20
    492a:	8c 93       	st	X, r24
    492c:	a8 c0       	rjmp	.+336    	; 0x4a7e <DIO_u8_SetPinVal+0x212>
            case DIO_PORTC : CLS_BIT(PORTC,copy_pinNum); break;
    492e:	a5 e3       	ldi	r26, 0x35	; 53
    4930:	b0 e0       	ldi	r27, 0x00	; 0
    4932:	e5 e3       	ldi	r30, 0x35	; 53
    4934:	f0 e0       	ldi	r31, 0x00	; 0
    4936:	80 81       	ld	r24, Z
    4938:	48 2f       	mov	r20, r24
    493a:	8b 81       	ldd	r24, Y+3	; 0x03
    493c:	28 2f       	mov	r18, r24
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	81 e0       	ldi	r24, 0x01	; 1
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	02 2e       	mov	r0, r18
    4946:	02 c0       	rjmp	.+4      	; 0x494c <DIO_u8_SetPinVal+0xe0>
    4948:	88 0f       	add	r24, r24
    494a:	99 1f       	adc	r25, r25
    494c:	0a 94       	dec	r0
    494e:	e2 f7       	brpl	.-8      	; 0x4948 <DIO_u8_SetPinVal+0xdc>
    4950:	80 95       	com	r24
    4952:	84 23       	and	r24, r20
    4954:	8c 93       	st	X, r24
    4956:	93 c0       	rjmp	.+294    	; 0x4a7e <DIO_u8_SetPinVal+0x212>
            case DIO_PORTD : CLS_BIT(PORTD,copy_pinNum); break;
    4958:	a2 e3       	ldi	r26, 0x32	; 50
    495a:	b0 e0       	ldi	r27, 0x00	; 0
    495c:	e2 e3       	ldi	r30, 0x32	; 50
    495e:	f0 e0       	ldi	r31, 0x00	; 0
    4960:	80 81       	ld	r24, Z
    4962:	48 2f       	mov	r20, r24
    4964:	8b 81       	ldd	r24, Y+3	; 0x03
    4966:	28 2f       	mov	r18, r24
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	81 e0       	ldi	r24, 0x01	; 1
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	02 2e       	mov	r0, r18
    4970:	02 c0       	rjmp	.+4      	; 0x4976 <DIO_u8_SetPinVal+0x10a>
    4972:	88 0f       	add	r24, r24
    4974:	99 1f       	adc	r25, r25
    4976:	0a 94       	dec	r0
    4978:	e2 f7       	brpl	.-8      	; 0x4972 <DIO_u8_SetPinVal+0x106>
    497a:	80 95       	com	r24
    497c:	84 23       	and	r24, r20
    497e:	8c 93       	st	X, r24
    4980:	7e c0       	rjmp	.+252    	; 0x4a7e <DIO_u8_SetPinVal+0x212>
            
            default: Local_u8ErrorState = NOK;  break;
    4982:	82 e0       	ldi	r24, 0x02	; 2
    4984:	89 83       	std	Y+1, r24	; 0x01
    4986:	7b c0       	rjmp	.+246    	; 0x4a7e <DIO_u8_SetPinVal+0x212>
            }
        }   
        else if(copy_pinVal == DIO_PIN_HIGH){
    4988:	8c 81       	ldd	r24, Y+4	; 0x04
    498a:	81 30       	cpi	r24, 0x01	; 1
    498c:	09 f0       	breq	.+2      	; 0x4990 <DIO_u8_SetPinVal+0x124>
    498e:	72 c0       	rjmp	.+228    	; 0x4a74 <DIO_u8_SetPinVal+0x208>
             switch (copy_port)
    4990:	8a 81       	ldd	r24, Y+2	; 0x02
    4992:	28 2f       	mov	r18, r24
    4994:	30 e0       	ldi	r19, 0x00	; 0
    4996:	3e 83       	std	Y+6, r19	; 0x06
    4998:	2d 83       	std	Y+5, r18	; 0x05
    499a:	8d 81       	ldd	r24, Y+5	; 0x05
    499c:	9e 81       	ldd	r25, Y+6	; 0x06
    499e:	81 30       	cpi	r24, 0x01	; 1
    49a0:	91 05       	cpc	r25, r1
    49a2:	49 f1       	breq	.+82     	; 0x49f6 <DIO_u8_SetPinVal+0x18a>
    49a4:	2d 81       	ldd	r18, Y+5	; 0x05
    49a6:	3e 81       	ldd	r19, Y+6	; 0x06
    49a8:	22 30       	cpi	r18, 0x02	; 2
    49aa:	31 05       	cpc	r19, r1
    49ac:	2c f4       	brge	.+10     	; 0x49b8 <DIO_u8_SetPinVal+0x14c>
    49ae:	8d 81       	ldd	r24, Y+5	; 0x05
    49b0:	9e 81       	ldd	r25, Y+6	; 0x06
    49b2:	00 97       	sbiw	r24, 0x00	; 0
    49b4:	61 f0       	breq	.+24     	; 0x49ce <DIO_u8_SetPinVal+0x162>
    49b6:	5b c0       	rjmp	.+182    	; 0x4a6e <DIO_u8_SetPinVal+0x202>
    49b8:	2d 81       	ldd	r18, Y+5	; 0x05
    49ba:	3e 81       	ldd	r19, Y+6	; 0x06
    49bc:	22 30       	cpi	r18, 0x02	; 2
    49be:	31 05       	cpc	r19, r1
    49c0:	71 f1       	breq	.+92     	; 0x4a1e <DIO_u8_SetPinVal+0x1b2>
    49c2:	8d 81       	ldd	r24, Y+5	; 0x05
    49c4:	9e 81       	ldd	r25, Y+6	; 0x06
    49c6:	83 30       	cpi	r24, 0x03	; 3
    49c8:	91 05       	cpc	r25, r1
    49ca:	e9 f1       	breq	.+122    	; 0x4a46 <DIO_u8_SetPinVal+0x1da>
    49cc:	50 c0       	rjmp	.+160    	; 0x4a6e <DIO_u8_SetPinVal+0x202>
            {
            case DIO_PORTA : SET_BIT(PORTA,copy_pinNum); break;
    49ce:	ab e3       	ldi	r26, 0x3B	; 59
    49d0:	b0 e0       	ldi	r27, 0x00	; 0
    49d2:	eb e3       	ldi	r30, 0x3B	; 59
    49d4:	f0 e0       	ldi	r31, 0x00	; 0
    49d6:	80 81       	ld	r24, Z
    49d8:	48 2f       	mov	r20, r24
    49da:	8b 81       	ldd	r24, Y+3	; 0x03
    49dc:	28 2f       	mov	r18, r24
    49de:	30 e0       	ldi	r19, 0x00	; 0
    49e0:	81 e0       	ldi	r24, 0x01	; 1
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	02 2e       	mov	r0, r18
    49e6:	02 c0       	rjmp	.+4      	; 0x49ec <DIO_u8_SetPinVal+0x180>
    49e8:	88 0f       	add	r24, r24
    49ea:	99 1f       	adc	r25, r25
    49ec:	0a 94       	dec	r0
    49ee:	e2 f7       	brpl	.-8      	; 0x49e8 <DIO_u8_SetPinVal+0x17c>
    49f0:	84 2b       	or	r24, r20
    49f2:	8c 93       	st	X, r24
    49f4:	44 c0       	rjmp	.+136    	; 0x4a7e <DIO_u8_SetPinVal+0x212>
            case DIO_PORTB : SET_BIT(PORTB,copy_pinNum); break;
    49f6:	a8 e3       	ldi	r26, 0x38	; 56
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	e8 e3       	ldi	r30, 0x38	; 56
    49fc:	f0 e0       	ldi	r31, 0x00	; 0
    49fe:	80 81       	ld	r24, Z
    4a00:	48 2f       	mov	r20, r24
    4a02:	8b 81       	ldd	r24, Y+3	; 0x03
    4a04:	28 2f       	mov	r18, r24
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	02 2e       	mov	r0, r18
    4a0e:	02 c0       	rjmp	.+4      	; 0x4a14 <DIO_u8_SetPinVal+0x1a8>
    4a10:	88 0f       	add	r24, r24
    4a12:	99 1f       	adc	r25, r25
    4a14:	0a 94       	dec	r0
    4a16:	e2 f7       	brpl	.-8      	; 0x4a10 <DIO_u8_SetPinVal+0x1a4>
    4a18:	84 2b       	or	r24, r20
    4a1a:	8c 93       	st	X, r24
    4a1c:	30 c0       	rjmp	.+96     	; 0x4a7e <DIO_u8_SetPinVal+0x212>
            case DIO_PORTC : SET_BIT(PORTC,copy_pinNum); break;
    4a1e:	a5 e3       	ldi	r26, 0x35	; 53
    4a20:	b0 e0       	ldi	r27, 0x00	; 0
    4a22:	e5 e3       	ldi	r30, 0x35	; 53
    4a24:	f0 e0       	ldi	r31, 0x00	; 0
    4a26:	80 81       	ld	r24, Z
    4a28:	48 2f       	mov	r20, r24
    4a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a2c:	28 2f       	mov	r18, r24
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	81 e0       	ldi	r24, 0x01	; 1
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	02 2e       	mov	r0, r18
    4a36:	02 c0       	rjmp	.+4      	; 0x4a3c <DIO_u8_SetPinVal+0x1d0>
    4a38:	88 0f       	add	r24, r24
    4a3a:	99 1f       	adc	r25, r25
    4a3c:	0a 94       	dec	r0
    4a3e:	e2 f7       	brpl	.-8      	; 0x4a38 <DIO_u8_SetPinVal+0x1cc>
    4a40:	84 2b       	or	r24, r20
    4a42:	8c 93       	st	X, r24
    4a44:	1c c0       	rjmp	.+56     	; 0x4a7e <DIO_u8_SetPinVal+0x212>
            case DIO_PORTD : SET_BIT(PORTD,copy_pinNum); break;
    4a46:	a2 e3       	ldi	r26, 0x32	; 50
    4a48:	b0 e0       	ldi	r27, 0x00	; 0
    4a4a:	e2 e3       	ldi	r30, 0x32	; 50
    4a4c:	f0 e0       	ldi	r31, 0x00	; 0
    4a4e:	80 81       	ld	r24, Z
    4a50:	48 2f       	mov	r20, r24
    4a52:	8b 81       	ldd	r24, Y+3	; 0x03
    4a54:	28 2f       	mov	r18, r24
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	81 e0       	ldi	r24, 0x01	; 1
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	02 2e       	mov	r0, r18
    4a5e:	02 c0       	rjmp	.+4      	; 0x4a64 <DIO_u8_SetPinVal+0x1f8>
    4a60:	88 0f       	add	r24, r24
    4a62:	99 1f       	adc	r25, r25
    4a64:	0a 94       	dec	r0
    4a66:	e2 f7       	brpl	.-8      	; 0x4a60 <DIO_u8_SetPinVal+0x1f4>
    4a68:	84 2b       	or	r24, r20
    4a6a:	8c 93       	st	X, r24
    4a6c:	08 c0       	rjmp	.+16     	; 0x4a7e <DIO_u8_SetPinVal+0x212>
            
            default: Local_u8ErrorState = NOK;  break;
    4a6e:	82 e0       	ldi	r24, 0x02	; 2
    4a70:	89 83       	std	Y+1, r24	; 0x01
    4a72:	05 c0       	rjmp	.+10     	; 0x4a7e <DIO_u8_SetPinVal+0x212>
            }
        }else
        Local_u8ErrorState = NOK;
    4a74:	82 e0       	ldi	r24, 0x02	; 2
    4a76:	89 83       	std	Y+1, r24	; 0x01
    4a78:	02 c0       	rjmp	.+4      	; 0x4a7e <DIO_u8_SetPinVal+0x212>
    }else 
    Local_u8ErrorState = NOK;
    4a7a:	82 e0       	ldi	r24, 0x02	; 2
    4a7c:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    4a7e:	89 81       	ldd	r24, Y+1	; 0x01

}
    4a80:	28 96       	adiw	r28, 0x08	; 8
    4a82:	0f b6       	in	r0, 0x3f	; 63
    4a84:	f8 94       	cli
    4a86:	de bf       	out	0x3e, r29	; 62
    4a88:	0f be       	out	0x3f, r0	; 63
    4a8a:	cd bf       	out	0x3d, r28	; 61
    4a8c:	cf 91       	pop	r28
    4a8e:	df 91       	pop	r29
    4a90:	08 95       	ret

00004a92 <DIO_u8_SetPortVal>:
uint8 DIO_u8_SetPortVal(DIO_port_t copy_port,  uint8 copy_pinVal){
    4a92:	df 93       	push	r29
    4a94:	cf 93       	push	r28
    4a96:	00 d0       	rcall	.+0      	; 0x4a98 <DIO_u8_SetPortVal+0x6>
    4a98:	00 d0       	rcall	.+0      	; 0x4a9a <DIO_u8_SetPortVal+0x8>
    4a9a:	0f 92       	push	r0
    4a9c:	cd b7       	in	r28, 0x3d	; 61
    4a9e:	de b7       	in	r29, 0x3e	; 62
    4aa0:	8a 83       	std	Y+2, r24	; 0x02
    4aa2:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Local_u8ErrorState = OK;
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	89 83       	std	Y+1, r24	; 0x01
        //if(copy_pinVal == DIO_PIN_LOW){
            switch (copy_port)
    4aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aaa:	28 2f       	mov	r18, r24
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	3d 83       	std	Y+5, r19	; 0x05
    4ab0:	2c 83       	std	Y+4, r18	; 0x04
    4ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ab4:	9d 81       	ldd	r25, Y+5	; 0x05
    4ab6:	81 30       	cpi	r24, 0x01	; 1
    4ab8:	91 05       	cpc	r25, r1
    4aba:	d1 f0       	breq	.+52     	; 0x4af0 <DIO_u8_SetPortVal+0x5e>
    4abc:	2c 81       	ldd	r18, Y+4	; 0x04
    4abe:	3d 81       	ldd	r19, Y+5	; 0x05
    4ac0:	22 30       	cpi	r18, 0x02	; 2
    4ac2:	31 05       	cpc	r19, r1
    4ac4:	2c f4       	brge	.+10     	; 0x4ad0 <DIO_u8_SetPortVal+0x3e>
    4ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    4ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    4aca:	00 97       	sbiw	r24, 0x00	; 0
    4acc:	61 f0       	breq	.+24     	; 0x4ae6 <DIO_u8_SetPortVal+0x54>
    4ace:	1f c0       	rjmp	.+62     	; 0x4b0e <DIO_u8_SetPortVal+0x7c>
    4ad0:	2c 81       	ldd	r18, Y+4	; 0x04
    4ad2:	3d 81       	ldd	r19, Y+5	; 0x05
    4ad4:	22 30       	cpi	r18, 0x02	; 2
    4ad6:	31 05       	cpc	r19, r1
    4ad8:	81 f0       	breq	.+32     	; 0x4afa <DIO_u8_SetPortVal+0x68>
    4ada:	8c 81       	ldd	r24, Y+4	; 0x04
    4adc:	9d 81       	ldd	r25, Y+5	; 0x05
    4ade:	83 30       	cpi	r24, 0x03	; 3
    4ae0:	91 05       	cpc	r25, r1
    4ae2:	81 f0       	breq	.+32     	; 0x4b04 <DIO_u8_SetPortVal+0x72>
    4ae4:	14 c0       	rjmp	.+40     	; 0x4b0e <DIO_u8_SetPortVal+0x7c>
            {
            case DIO_PORTA :PORTA = copy_pinVal; break;
    4ae6:	eb e3       	ldi	r30, 0x3B	; 59
    4ae8:	f0 e0       	ldi	r31, 0x00	; 0
    4aea:	8b 81       	ldd	r24, Y+3	; 0x03
    4aec:	80 83       	st	Z, r24
    4aee:	11 c0       	rjmp	.+34     	; 0x4b12 <DIO_u8_SetPortVal+0x80>
            case DIO_PORTB :PORTB = copy_pinVal; break;
    4af0:	e8 e3       	ldi	r30, 0x38	; 56
    4af2:	f0 e0       	ldi	r31, 0x00	; 0
    4af4:	8b 81       	ldd	r24, Y+3	; 0x03
    4af6:	80 83       	st	Z, r24
    4af8:	0c c0       	rjmp	.+24     	; 0x4b12 <DIO_u8_SetPortVal+0x80>
            case DIO_PORTC :PORTC = copy_pinVal; break;
    4afa:	e5 e3       	ldi	r30, 0x35	; 53
    4afc:	f0 e0       	ldi	r31, 0x00	; 0
    4afe:	8b 81       	ldd	r24, Y+3	; 0x03
    4b00:	80 83       	st	Z, r24
    4b02:	07 c0       	rjmp	.+14     	; 0x4b12 <DIO_u8_SetPortVal+0x80>
            case DIO_PORTD :PORTD = copy_pinVal; break;
    4b04:	e2 e3       	ldi	r30, 0x32	; 50
    4b06:	f0 e0       	ldi	r31, 0x00	; 0
    4b08:	8b 81       	ldd	r24, Y+3	; 0x03
    4b0a:	80 83       	st	Z, r24
    4b0c:	02 c0       	rjmp	.+4      	; 0x4b12 <DIO_u8_SetPortVal+0x80>
            
            default: Local_u8ErrorState = NOK;  break;
    4b0e:	82 e0       	ldi	r24, 0x02	; 2
    4b10:	89 83       	std	Y+1, r24	; 0x01
            }
       
    
    return Local_u8ErrorState;
    4b12:	89 81       	ldd	r24, Y+1	; 0x01

}
    4b14:	0f 90       	pop	r0
    4b16:	0f 90       	pop	r0
    4b18:	0f 90       	pop	r0
    4b1a:	0f 90       	pop	r0
    4b1c:	0f 90       	pop	r0
    4b1e:	cf 91       	pop	r28
    4b20:	df 91       	pop	r29
    4b22:	08 95       	ret

00004b24 <DIO_u8_GetPinVal>:

uint8 DIO_u8_GetPinVal(DIO_port_t copy_port, DIO_pin_t copy_pinNum, DIO_pinVal_t *copy_pinVal){
    4b24:	df 93       	push	r29
    4b26:	cf 93       	push	r28
    4b28:	cd b7       	in	r28, 0x3d	; 61
    4b2a:	de b7       	in	r29, 0x3e	; 62
    4b2c:	27 97       	sbiw	r28, 0x07	; 7
    4b2e:	0f b6       	in	r0, 0x3f	; 63
    4b30:	f8 94       	cli
    4b32:	de bf       	out	0x3e, r29	; 62
    4b34:	0f be       	out	0x3f, r0	; 63
    4b36:	cd bf       	out	0x3d, r28	; 61
    4b38:	8a 83       	std	Y+2, r24	; 0x02
    4b3a:	6b 83       	std	Y+3, r22	; 0x03
    4b3c:	5d 83       	std	Y+5, r21	; 0x05
    4b3e:	4c 83       	std	Y+4, r20	; 0x04
    uint8 Local_u8ErrorState = OK;
    4b40:	81 e0       	ldi	r24, 0x01	; 1
    4b42:	89 83       	std	Y+1, r24	; 0x01
    if(copy_pinVal !=NULL){
    4b44:	8c 81       	ldd	r24, Y+4	; 0x04
    4b46:	9d 81       	ldd	r25, Y+5	; 0x05
    4b48:	00 97       	sbiw	r24, 0x00	; 0
    4b4a:	09 f4       	brne	.+2      	; 0x4b4e <DIO_u8_GetPinVal+0x2a>
    4b4c:	7b c0       	rjmp	.+246    	; 0x4c44 <DIO_u8_GetPinVal+0x120>
        if((copy_pinNum >= DIO_PIN0)  && (copy_pinNum<=DIO_PIN7)){
    4b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b50:	88 30       	cpi	r24, 0x08	; 8
    4b52:	08 f0       	brcs	.+2      	; 0x4b56 <DIO_u8_GetPinVal+0x32>
    4b54:	74 c0       	rjmp	.+232    	; 0x4c3e <DIO_u8_GetPinVal+0x11a>
            switch (copy_port)
    4b56:	8a 81       	ldd	r24, Y+2	; 0x02
    4b58:	28 2f       	mov	r18, r24
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	3f 83       	std	Y+7, r19	; 0x07
    4b5e:	2e 83       	std	Y+6, r18	; 0x06
    4b60:	4e 81       	ldd	r20, Y+6	; 0x06
    4b62:	5f 81       	ldd	r21, Y+7	; 0x07
    4b64:	41 30       	cpi	r20, 0x01	; 1
    4b66:	51 05       	cpc	r21, r1
    4b68:	59 f1       	breq	.+86     	; 0x4bc0 <DIO_u8_GetPinVal+0x9c>
    4b6a:	8e 81       	ldd	r24, Y+6	; 0x06
    4b6c:	9f 81       	ldd	r25, Y+7	; 0x07
    4b6e:	82 30       	cpi	r24, 0x02	; 2
    4b70:	91 05       	cpc	r25, r1
    4b72:	34 f4       	brge	.+12     	; 0x4b80 <DIO_u8_GetPinVal+0x5c>
    4b74:	2e 81       	ldd	r18, Y+6	; 0x06
    4b76:	3f 81       	ldd	r19, Y+7	; 0x07
    4b78:	21 15       	cp	r18, r1
    4b7a:	31 05       	cpc	r19, r1
    4b7c:	69 f0       	breq	.+26     	; 0x4b98 <DIO_u8_GetPinVal+0x74>
    4b7e:	5c c0       	rjmp	.+184    	; 0x4c38 <DIO_u8_GetPinVal+0x114>
    4b80:	4e 81       	ldd	r20, Y+6	; 0x06
    4b82:	5f 81       	ldd	r21, Y+7	; 0x07
    4b84:	42 30       	cpi	r20, 0x02	; 2
    4b86:	51 05       	cpc	r21, r1
    4b88:	79 f1       	breq	.+94     	; 0x4be8 <DIO_u8_GetPinVal+0xc4>
    4b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    4b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    4b8e:	83 30       	cpi	r24, 0x03	; 3
    4b90:	91 05       	cpc	r25, r1
    4b92:	09 f4       	brne	.+2      	; 0x4b96 <DIO_u8_GetPinVal+0x72>
    4b94:	3d c0       	rjmp	.+122    	; 0x4c10 <DIO_u8_GetPinVal+0xec>
    4b96:	50 c0       	rjmp	.+160    	; 0x4c38 <DIO_u8_GetPinVal+0x114>
            {
            case DIO_PORTA : *copy_pinVal = GET_BIT(PINA,copy_pinNum); break;
    4b98:	e9 e3       	ldi	r30, 0x39	; 57
    4b9a:	f0 e0       	ldi	r31, 0x00	; 0
    4b9c:	80 81       	ld	r24, Z
    4b9e:	28 2f       	mov	r18, r24
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba4:	88 2f       	mov	r24, r24
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	a9 01       	movw	r20, r18
    4baa:	02 c0       	rjmp	.+4      	; 0x4bb0 <DIO_u8_GetPinVal+0x8c>
    4bac:	55 95       	asr	r21
    4bae:	47 95       	ror	r20
    4bb0:	8a 95       	dec	r24
    4bb2:	e2 f7       	brpl	.-8      	; 0x4bac <DIO_u8_GetPinVal+0x88>
    4bb4:	ca 01       	movw	r24, r20
    4bb6:	81 70       	andi	r24, 0x01	; 1
    4bb8:	ec 81       	ldd	r30, Y+4	; 0x04
    4bba:	fd 81       	ldd	r31, Y+5	; 0x05
    4bbc:	80 83       	st	Z, r24
    4bbe:	44 c0       	rjmp	.+136    	; 0x4c48 <DIO_u8_GetPinVal+0x124>
            case DIO_PORTB : *copy_pinVal = GET_BIT(PINB,copy_pinNum); break;
    4bc0:	e6 e3       	ldi	r30, 0x36	; 54
    4bc2:	f0 e0       	ldi	r31, 0x00	; 0
    4bc4:	80 81       	ld	r24, Z
    4bc6:	28 2f       	mov	r18, r24
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    4bca:	8b 81       	ldd	r24, Y+3	; 0x03
    4bcc:	88 2f       	mov	r24, r24
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	a9 01       	movw	r20, r18
    4bd2:	02 c0       	rjmp	.+4      	; 0x4bd8 <DIO_u8_GetPinVal+0xb4>
    4bd4:	55 95       	asr	r21
    4bd6:	47 95       	ror	r20
    4bd8:	8a 95       	dec	r24
    4bda:	e2 f7       	brpl	.-8      	; 0x4bd4 <DIO_u8_GetPinVal+0xb0>
    4bdc:	ca 01       	movw	r24, r20
    4bde:	81 70       	andi	r24, 0x01	; 1
    4be0:	ec 81       	ldd	r30, Y+4	; 0x04
    4be2:	fd 81       	ldd	r31, Y+5	; 0x05
    4be4:	80 83       	st	Z, r24
    4be6:	30 c0       	rjmp	.+96     	; 0x4c48 <DIO_u8_GetPinVal+0x124>
            case DIO_PORTC : *copy_pinVal = GET_BIT(PINC,copy_pinNum); break;
    4be8:	e3 e3       	ldi	r30, 0x33	; 51
    4bea:	f0 e0       	ldi	r31, 0x00	; 0
    4bec:	80 81       	ld	r24, Z
    4bee:	28 2f       	mov	r18, r24
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf4:	88 2f       	mov	r24, r24
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	a9 01       	movw	r20, r18
    4bfa:	02 c0       	rjmp	.+4      	; 0x4c00 <DIO_u8_GetPinVal+0xdc>
    4bfc:	55 95       	asr	r21
    4bfe:	47 95       	ror	r20
    4c00:	8a 95       	dec	r24
    4c02:	e2 f7       	brpl	.-8      	; 0x4bfc <DIO_u8_GetPinVal+0xd8>
    4c04:	ca 01       	movw	r24, r20
    4c06:	81 70       	andi	r24, 0x01	; 1
    4c08:	ec 81       	ldd	r30, Y+4	; 0x04
    4c0a:	fd 81       	ldd	r31, Y+5	; 0x05
    4c0c:	80 83       	st	Z, r24
    4c0e:	1c c0       	rjmp	.+56     	; 0x4c48 <DIO_u8_GetPinVal+0x124>
            case DIO_PORTD : *copy_pinVal = GET_BIT(PIND,copy_pinNum); break;
    4c10:	e0 e3       	ldi	r30, 0x30	; 48
    4c12:	f0 e0       	ldi	r31, 0x00	; 0
    4c14:	80 81       	ld	r24, Z
    4c16:	28 2f       	mov	r18, r24
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1c:	88 2f       	mov	r24, r24
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	a9 01       	movw	r20, r18
    4c22:	02 c0       	rjmp	.+4      	; 0x4c28 <DIO_u8_GetPinVal+0x104>
    4c24:	55 95       	asr	r21
    4c26:	47 95       	ror	r20
    4c28:	8a 95       	dec	r24
    4c2a:	e2 f7       	brpl	.-8      	; 0x4c24 <DIO_u8_GetPinVal+0x100>
    4c2c:	ca 01       	movw	r24, r20
    4c2e:	81 70       	andi	r24, 0x01	; 1
    4c30:	ec 81       	ldd	r30, Y+4	; 0x04
    4c32:	fd 81       	ldd	r31, Y+5	; 0x05
    4c34:	80 83       	st	Z, r24
    4c36:	08 c0       	rjmp	.+16     	; 0x4c48 <DIO_u8_GetPinVal+0x124>
            
            default: Local_u8ErrorState = NOK;  break;
    4c38:	82 e0       	ldi	r24, 0x02	; 2
    4c3a:	89 83       	std	Y+1, r24	; 0x01
    4c3c:	05 c0       	rjmp	.+10     	; 0x4c48 <DIO_u8_GetPinVal+0x124>
            }
            
        }else 
            Local_u8ErrorState = NOK;
    4c3e:	82 e0       	ldi	r24, 0x02	; 2
    4c40:	89 83       	std	Y+1, r24	; 0x01
    4c42:	02 c0       	rjmp	.+4      	; 0x4c48 <DIO_u8_GetPinVal+0x124>
    }
    else
        Local_u8ErrorState = NULL_PTR;
    4c44:	83 e0       	ldi	r24, 0x03	; 3
    4c46:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    4c48:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c4a:	27 96       	adiw	r28, 0x07	; 7
    4c4c:	0f b6       	in	r0, 0x3f	; 63
    4c4e:	f8 94       	cli
    4c50:	de bf       	out	0x3e, r29	; 62
    4c52:	0f be       	out	0x3f, r0	; 63
    4c54:	cd bf       	out	0x3d, r28	; 61
    4c56:	cf 91       	pop	r28
    4c58:	df 91       	pop	r29
    4c5a:	08 95       	ret

00004c5c <DIO_u8_GetPinDir>:

uint8 DIO_u8_GetPinDir(DIO_port_t copy_port, DIO_pin_t copy_pinNum, DIO_pinDir_t *copy_pinDir){
    4c5c:	df 93       	push	r29
    4c5e:	cf 93       	push	r28
    4c60:	cd b7       	in	r28, 0x3d	; 61
    4c62:	de b7       	in	r29, 0x3e	; 62
    4c64:	27 97       	sbiw	r28, 0x07	; 7
    4c66:	0f b6       	in	r0, 0x3f	; 63
    4c68:	f8 94       	cli
    4c6a:	de bf       	out	0x3e, r29	; 62
    4c6c:	0f be       	out	0x3f, r0	; 63
    4c6e:	cd bf       	out	0x3d, r28	; 61
    4c70:	8a 83       	std	Y+2, r24	; 0x02
    4c72:	6b 83       	std	Y+3, r22	; 0x03
    4c74:	5d 83       	std	Y+5, r21	; 0x05
    4c76:	4c 83       	std	Y+4, r20	; 0x04
    uint8 Local_u8ErrorState = OK;
    4c78:	81 e0       	ldi	r24, 0x01	; 1
    4c7a:	89 83       	std	Y+1, r24	; 0x01
    if(copy_pinDir !=NULL){
    4c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c7e:	9d 81       	ldd	r25, Y+5	; 0x05
    4c80:	00 97       	sbiw	r24, 0x00	; 0
    4c82:	09 f4       	brne	.+2      	; 0x4c86 <DIO_u8_GetPinDir+0x2a>
    4c84:	7b c0       	rjmp	.+246    	; 0x4d7c <DIO_u8_GetPinDir+0x120>
        if((copy_pinNum >= DIO_PIN0)  && (copy_pinNum<=DIO_PIN7)){
    4c86:	8b 81       	ldd	r24, Y+3	; 0x03
    4c88:	88 30       	cpi	r24, 0x08	; 8
    4c8a:	08 f0       	brcs	.+2      	; 0x4c8e <DIO_u8_GetPinDir+0x32>
    4c8c:	74 c0       	rjmp	.+232    	; 0x4d76 <DIO_u8_GetPinDir+0x11a>
            switch (copy_port)
    4c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c90:	28 2f       	mov	r18, r24
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	3f 83       	std	Y+7, r19	; 0x07
    4c96:	2e 83       	std	Y+6, r18	; 0x06
    4c98:	4e 81       	ldd	r20, Y+6	; 0x06
    4c9a:	5f 81       	ldd	r21, Y+7	; 0x07
    4c9c:	41 30       	cpi	r20, 0x01	; 1
    4c9e:	51 05       	cpc	r21, r1
    4ca0:	59 f1       	breq	.+86     	; 0x4cf8 <DIO_u8_GetPinDir+0x9c>
    4ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    4ca4:	9f 81       	ldd	r25, Y+7	; 0x07
    4ca6:	82 30       	cpi	r24, 0x02	; 2
    4ca8:	91 05       	cpc	r25, r1
    4caa:	34 f4       	brge	.+12     	; 0x4cb8 <DIO_u8_GetPinDir+0x5c>
    4cac:	2e 81       	ldd	r18, Y+6	; 0x06
    4cae:	3f 81       	ldd	r19, Y+7	; 0x07
    4cb0:	21 15       	cp	r18, r1
    4cb2:	31 05       	cpc	r19, r1
    4cb4:	69 f0       	breq	.+26     	; 0x4cd0 <DIO_u8_GetPinDir+0x74>
    4cb6:	5c c0       	rjmp	.+184    	; 0x4d70 <DIO_u8_GetPinDir+0x114>
    4cb8:	4e 81       	ldd	r20, Y+6	; 0x06
    4cba:	5f 81       	ldd	r21, Y+7	; 0x07
    4cbc:	42 30       	cpi	r20, 0x02	; 2
    4cbe:	51 05       	cpc	r21, r1
    4cc0:	79 f1       	breq	.+94     	; 0x4d20 <DIO_u8_GetPinDir+0xc4>
    4cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    4cc4:	9f 81       	ldd	r25, Y+7	; 0x07
    4cc6:	83 30       	cpi	r24, 0x03	; 3
    4cc8:	91 05       	cpc	r25, r1
    4cca:	09 f4       	brne	.+2      	; 0x4cce <DIO_u8_GetPinDir+0x72>
    4ccc:	3d c0       	rjmp	.+122    	; 0x4d48 <DIO_u8_GetPinDir+0xec>
    4cce:	50 c0       	rjmp	.+160    	; 0x4d70 <DIO_u8_GetPinDir+0x114>
            {
            case DIO_PORTA : *copy_pinDir = GET_BIT(DDRA,copy_pinNum); break;
    4cd0:	ea e3       	ldi	r30, 0x3A	; 58
    4cd2:	f0 e0       	ldi	r31, 0x00	; 0
    4cd4:	80 81       	ld	r24, Z
    4cd6:	28 2f       	mov	r18, r24
    4cd8:	30 e0       	ldi	r19, 0x00	; 0
    4cda:	8b 81       	ldd	r24, Y+3	; 0x03
    4cdc:	88 2f       	mov	r24, r24
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	a9 01       	movw	r20, r18
    4ce2:	02 c0       	rjmp	.+4      	; 0x4ce8 <DIO_u8_GetPinDir+0x8c>
    4ce4:	55 95       	asr	r21
    4ce6:	47 95       	ror	r20
    4ce8:	8a 95       	dec	r24
    4cea:	e2 f7       	brpl	.-8      	; 0x4ce4 <DIO_u8_GetPinDir+0x88>
    4cec:	ca 01       	movw	r24, r20
    4cee:	81 70       	andi	r24, 0x01	; 1
    4cf0:	ec 81       	ldd	r30, Y+4	; 0x04
    4cf2:	fd 81       	ldd	r31, Y+5	; 0x05
    4cf4:	80 83       	st	Z, r24
    4cf6:	44 c0       	rjmp	.+136    	; 0x4d80 <DIO_u8_GetPinDir+0x124>
            case DIO_PORTB : *copy_pinDir = GET_BIT(DDRB,copy_pinNum); break;
    4cf8:	e7 e3       	ldi	r30, 0x37	; 55
    4cfa:	f0 e0       	ldi	r31, 0x00	; 0
    4cfc:	80 81       	ld	r24, Z
    4cfe:	28 2f       	mov	r18, r24
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	8b 81       	ldd	r24, Y+3	; 0x03
    4d04:	88 2f       	mov	r24, r24
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	a9 01       	movw	r20, r18
    4d0a:	02 c0       	rjmp	.+4      	; 0x4d10 <DIO_u8_GetPinDir+0xb4>
    4d0c:	55 95       	asr	r21
    4d0e:	47 95       	ror	r20
    4d10:	8a 95       	dec	r24
    4d12:	e2 f7       	brpl	.-8      	; 0x4d0c <DIO_u8_GetPinDir+0xb0>
    4d14:	ca 01       	movw	r24, r20
    4d16:	81 70       	andi	r24, 0x01	; 1
    4d18:	ec 81       	ldd	r30, Y+4	; 0x04
    4d1a:	fd 81       	ldd	r31, Y+5	; 0x05
    4d1c:	80 83       	st	Z, r24
    4d1e:	30 c0       	rjmp	.+96     	; 0x4d80 <DIO_u8_GetPinDir+0x124>
            case DIO_PORTC : *copy_pinDir = GET_BIT(DDRC,copy_pinNum); break;
    4d20:	e4 e3       	ldi	r30, 0x34	; 52
    4d22:	f0 e0       	ldi	r31, 0x00	; 0
    4d24:	80 81       	ld	r24, Z
    4d26:	28 2f       	mov	r18, r24
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d2c:	88 2f       	mov	r24, r24
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	a9 01       	movw	r20, r18
    4d32:	02 c0       	rjmp	.+4      	; 0x4d38 <DIO_u8_GetPinDir+0xdc>
    4d34:	55 95       	asr	r21
    4d36:	47 95       	ror	r20
    4d38:	8a 95       	dec	r24
    4d3a:	e2 f7       	brpl	.-8      	; 0x4d34 <DIO_u8_GetPinDir+0xd8>
    4d3c:	ca 01       	movw	r24, r20
    4d3e:	81 70       	andi	r24, 0x01	; 1
    4d40:	ec 81       	ldd	r30, Y+4	; 0x04
    4d42:	fd 81       	ldd	r31, Y+5	; 0x05
    4d44:	80 83       	st	Z, r24
    4d46:	1c c0       	rjmp	.+56     	; 0x4d80 <DIO_u8_GetPinDir+0x124>
            case DIO_PORTD : *copy_pinDir = GET_BIT(DDRD,copy_pinNum); break;
    4d48:	e1 e3       	ldi	r30, 0x31	; 49
    4d4a:	f0 e0       	ldi	r31, 0x00	; 0
    4d4c:	80 81       	ld	r24, Z
    4d4e:	28 2f       	mov	r18, r24
    4d50:	30 e0       	ldi	r19, 0x00	; 0
    4d52:	8b 81       	ldd	r24, Y+3	; 0x03
    4d54:	88 2f       	mov	r24, r24
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	a9 01       	movw	r20, r18
    4d5a:	02 c0       	rjmp	.+4      	; 0x4d60 <DIO_u8_GetPinDir+0x104>
    4d5c:	55 95       	asr	r21
    4d5e:	47 95       	ror	r20
    4d60:	8a 95       	dec	r24
    4d62:	e2 f7       	brpl	.-8      	; 0x4d5c <DIO_u8_GetPinDir+0x100>
    4d64:	ca 01       	movw	r24, r20
    4d66:	81 70       	andi	r24, 0x01	; 1
    4d68:	ec 81       	ldd	r30, Y+4	; 0x04
    4d6a:	fd 81       	ldd	r31, Y+5	; 0x05
    4d6c:	80 83       	st	Z, r24
    4d6e:	08 c0       	rjmp	.+16     	; 0x4d80 <DIO_u8_GetPinDir+0x124>

            default: Local_u8ErrorState = NOK;  break;
    4d70:	82 e0       	ldi	r24, 0x02	; 2
    4d72:	89 83       	std	Y+1, r24	; 0x01
    4d74:	05 c0       	rjmp	.+10     	; 0x4d80 <DIO_u8_GetPinDir+0x124>
            }

        }else
            Local_u8ErrorState = NOK;
    4d76:	82 e0       	ldi	r24, 0x02	; 2
    4d78:	89 83       	std	Y+1, r24	; 0x01
    4d7a:	02 c0       	rjmp	.+4      	; 0x4d80 <DIO_u8_GetPinDir+0x124>
    }
    else
        Local_u8ErrorState = NULL_PTR;
    4d7c:	83 e0       	ldi	r24, 0x03	; 3
    4d7e:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    4d80:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d82:	27 96       	adiw	r28, 0x07	; 7
    4d84:	0f b6       	in	r0, 0x3f	; 63
    4d86:	f8 94       	cli
    4d88:	de bf       	out	0x3e, r29	; 62
    4d8a:	0f be       	out	0x3f, r0	; 63
    4d8c:	cd bf       	out	0x3d, r28	; 61
    4d8e:	cf 91       	pop	r28
    4d90:	df 91       	pop	r29
    4d92:	08 95       	ret

00004d94 <DIO_u8_TogglePinVal>:
uint8 DIO_u8_TogglePinVal(DIO_port_t copy_port, DIO_pin_t copy_pinNum){
    4d94:	df 93       	push	r29
    4d96:	cf 93       	push	r28
    4d98:	00 d0       	rcall	.+0      	; 0x4d9a <DIO_u8_TogglePinVal+0x6>
    4d9a:	00 d0       	rcall	.+0      	; 0x4d9c <DIO_u8_TogglePinVal+0x8>
    4d9c:	0f 92       	push	r0
    4d9e:	cd b7       	in	r28, 0x3d	; 61
    4da0:	de b7       	in	r29, 0x3e	; 62
    4da2:	8a 83       	std	Y+2, r24	; 0x02
    4da4:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Local_u8ErrorState = OK;
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	89 83       	std	Y+1, r24	; 0x01
        if((copy_pinNum >= DIO_PIN0)  && (copy_pinNum<=DIO_PIN7)){
    4daa:	8b 81       	ldd	r24, Y+3	; 0x03
    4dac:	88 30       	cpi	r24, 0x08	; 8
    4dae:	08 f0       	brcs	.+2      	; 0x4db2 <DIO_u8_TogglePinVal+0x1e>
    4db0:	72 c0       	rjmp	.+228    	; 0x4e96 <DIO_u8_TogglePinVal+0x102>
            switch (copy_port)
    4db2:	8a 81       	ldd	r24, Y+2	; 0x02
    4db4:	28 2f       	mov	r18, r24
    4db6:	30 e0       	ldi	r19, 0x00	; 0
    4db8:	3d 83       	std	Y+5, r19	; 0x05
    4dba:	2c 83       	std	Y+4, r18	; 0x04
    4dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    4dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    4dc0:	81 30       	cpi	r24, 0x01	; 1
    4dc2:	91 05       	cpc	r25, r1
    4dc4:	49 f1       	breq	.+82     	; 0x4e18 <DIO_u8_TogglePinVal+0x84>
    4dc6:	2c 81       	ldd	r18, Y+4	; 0x04
    4dc8:	3d 81       	ldd	r19, Y+5	; 0x05
    4dca:	22 30       	cpi	r18, 0x02	; 2
    4dcc:	31 05       	cpc	r19, r1
    4dce:	2c f4       	brge	.+10     	; 0x4dda <DIO_u8_TogglePinVal+0x46>
    4dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    4dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    4dd4:	00 97       	sbiw	r24, 0x00	; 0
    4dd6:	61 f0       	breq	.+24     	; 0x4df0 <DIO_u8_TogglePinVal+0x5c>
    4dd8:	5b c0       	rjmp	.+182    	; 0x4e90 <DIO_u8_TogglePinVal+0xfc>
    4dda:	2c 81       	ldd	r18, Y+4	; 0x04
    4ddc:	3d 81       	ldd	r19, Y+5	; 0x05
    4dde:	22 30       	cpi	r18, 0x02	; 2
    4de0:	31 05       	cpc	r19, r1
    4de2:	71 f1       	breq	.+92     	; 0x4e40 <DIO_u8_TogglePinVal+0xac>
    4de4:	8c 81       	ldd	r24, Y+4	; 0x04
    4de6:	9d 81       	ldd	r25, Y+5	; 0x05
    4de8:	83 30       	cpi	r24, 0x03	; 3
    4dea:	91 05       	cpc	r25, r1
    4dec:	e9 f1       	breq	.+122    	; 0x4e68 <DIO_u8_TogglePinVal+0xd4>
    4dee:	50 c0       	rjmp	.+160    	; 0x4e90 <DIO_u8_TogglePinVal+0xfc>
            {
            case DIO_PORTA :  TOG_BIT(PORTA,copy_pinNum); break;
    4df0:	ab e3       	ldi	r26, 0x3B	; 59
    4df2:	b0 e0       	ldi	r27, 0x00	; 0
    4df4:	eb e3       	ldi	r30, 0x3B	; 59
    4df6:	f0 e0       	ldi	r31, 0x00	; 0
    4df8:	80 81       	ld	r24, Z
    4dfa:	48 2f       	mov	r20, r24
    4dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dfe:	28 2f       	mov	r18, r24
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	81 e0       	ldi	r24, 0x01	; 1
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	02 2e       	mov	r0, r18
    4e08:	02 c0       	rjmp	.+4      	; 0x4e0e <DIO_u8_TogglePinVal+0x7a>
    4e0a:	88 0f       	add	r24, r24
    4e0c:	99 1f       	adc	r25, r25
    4e0e:	0a 94       	dec	r0
    4e10:	e2 f7       	brpl	.-8      	; 0x4e0a <DIO_u8_TogglePinVal+0x76>
    4e12:	84 27       	eor	r24, r20
    4e14:	8c 93       	st	X, r24
    4e16:	41 c0       	rjmp	.+130    	; 0x4e9a <DIO_u8_TogglePinVal+0x106>
            case DIO_PORTB :  TOG_BIT(PORTB,copy_pinNum); break;
    4e18:	a8 e3       	ldi	r26, 0x38	; 56
    4e1a:	b0 e0       	ldi	r27, 0x00	; 0
    4e1c:	e8 e3       	ldi	r30, 0x38	; 56
    4e1e:	f0 e0       	ldi	r31, 0x00	; 0
    4e20:	80 81       	ld	r24, Z
    4e22:	48 2f       	mov	r20, r24
    4e24:	8b 81       	ldd	r24, Y+3	; 0x03
    4e26:	28 2f       	mov	r18, r24
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	81 e0       	ldi	r24, 0x01	; 1
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	02 2e       	mov	r0, r18
    4e30:	02 c0       	rjmp	.+4      	; 0x4e36 <DIO_u8_TogglePinVal+0xa2>
    4e32:	88 0f       	add	r24, r24
    4e34:	99 1f       	adc	r25, r25
    4e36:	0a 94       	dec	r0
    4e38:	e2 f7       	brpl	.-8      	; 0x4e32 <DIO_u8_TogglePinVal+0x9e>
    4e3a:	84 27       	eor	r24, r20
    4e3c:	8c 93       	st	X, r24
    4e3e:	2d c0       	rjmp	.+90     	; 0x4e9a <DIO_u8_TogglePinVal+0x106>
            case DIO_PORTC :  TOG_BIT(PORTC,copy_pinNum); break;
    4e40:	a5 e3       	ldi	r26, 0x35	; 53
    4e42:	b0 e0       	ldi	r27, 0x00	; 0
    4e44:	e5 e3       	ldi	r30, 0x35	; 53
    4e46:	f0 e0       	ldi	r31, 0x00	; 0
    4e48:	80 81       	ld	r24, Z
    4e4a:	48 2f       	mov	r20, r24
    4e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e4e:	28 2f       	mov	r18, r24
    4e50:	30 e0       	ldi	r19, 0x00	; 0
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	02 2e       	mov	r0, r18
    4e58:	02 c0       	rjmp	.+4      	; 0x4e5e <DIO_u8_TogglePinVal+0xca>
    4e5a:	88 0f       	add	r24, r24
    4e5c:	99 1f       	adc	r25, r25
    4e5e:	0a 94       	dec	r0
    4e60:	e2 f7       	brpl	.-8      	; 0x4e5a <DIO_u8_TogglePinVal+0xc6>
    4e62:	84 27       	eor	r24, r20
    4e64:	8c 93       	st	X, r24
    4e66:	19 c0       	rjmp	.+50     	; 0x4e9a <DIO_u8_TogglePinVal+0x106>
            case DIO_PORTD :  TOG_BIT(PORTD,copy_pinNum); break;
    4e68:	a2 e3       	ldi	r26, 0x32	; 50
    4e6a:	b0 e0       	ldi	r27, 0x00	; 0
    4e6c:	e2 e3       	ldi	r30, 0x32	; 50
    4e6e:	f0 e0       	ldi	r31, 0x00	; 0
    4e70:	80 81       	ld	r24, Z
    4e72:	48 2f       	mov	r20, r24
    4e74:	8b 81       	ldd	r24, Y+3	; 0x03
    4e76:	28 2f       	mov	r18, r24
    4e78:	30 e0       	ldi	r19, 0x00	; 0
    4e7a:	81 e0       	ldi	r24, 0x01	; 1
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	02 2e       	mov	r0, r18
    4e80:	02 c0       	rjmp	.+4      	; 0x4e86 <DIO_u8_TogglePinVal+0xf2>
    4e82:	88 0f       	add	r24, r24
    4e84:	99 1f       	adc	r25, r25
    4e86:	0a 94       	dec	r0
    4e88:	e2 f7       	brpl	.-8      	; 0x4e82 <DIO_u8_TogglePinVal+0xee>
    4e8a:	84 27       	eor	r24, r20
    4e8c:	8c 93       	st	X, r24
    4e8e:	05 c0       	rjmp	.+10     	; 0x4e9a <DIO_u8_TogglePinVal+0x106>

            default: Local_u8ErrorState = NOK;  break;
    4e90:	82 e0       	ldi	r24, 0x02	; 2
    4e92:	89 83       	std	Y+1, r24	; 0x01
    4e94:	02 c0       	rjmp	.+4      	; 0x4e9a <DIO_u8_TogglePinVal+0x106>
            }

        }else
            Local_u8ErrorState = NOK;
    4e96:	82 e0       	ldi	r24, 0x02	; 2
    4e98:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8ErrorState;
    4e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e9c:	0f 90       	pop	r0
    4e9e:	0f 90       	pop	r0
    4ea0:	0f 90       	pop	r0
    4ea2:	0f 90       	pop	r0
    4ea4:	0f 90       	pop	r0
    4ea6:	cf 91       	pop	r28
    4ea8:	df 91       	pop	r29
    4eaa:	08 95       	ret

00004eac <DIO_u8_PinPullUp>:

uint8 DIO_u8_PinPullUp(DIO_port_t copy_port, DIO_pin_t copy_pinNum){
    4eac:	df 93       	push	r29
    4eae:	cf 93       	push	r28
    4eb0:	00 d0       	rcall	.+0      	; 0x4eb2 <DIO_u8_PinPullUp+0x6>
    4eb2:	0f 92       	push	r0
    4eb4:	cd b7       	in	r28, 0x3d	; 61
    4eb6:	de b7       	in	r29, 0x3e	; 62
    4eb8:	8a 83       	std	Y+2, r24	; 0x02
    4eba:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Local_u8ErrorState = OK;
    4ebc:	81 e0       	ldi	r24, 0x01	; 1
    4ebe:	89 83       	std	Y+1, r24	; 0x01
    Local_u8ErrorState = DIO_u8_SetPinDir(copy_port,copy_pinNum,DIO_PIN_INPUT);
    4ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec2:	6b 81       	ldd	r22, Y+3	; 0x03
    4ec4:	40 e0       	ldi	r20, 0x00	; 0
    4ec6:	0e 94 da 22 	call	0x45b4	; 0x45b4 <DIO_u8_SetPinDir>
    4eca:	89 83       	std	Y+1, r24	; 0x01
    if(Local_u8ErrorState == OK){
    4ecc:	89 81       	ldd	r24, Y+1	; 0x01
    4ece:	81 30       	cpi	r24, 0x01	; 1
    4ed0:	31 f4       	brne	.+12     	; 0x4ede <DIO_u8_PinPullUp+0x32>
        Local_u8ErrorState = DIO_u8_SetPinVal(copy_port,copy_pinNum,DIO_PIN_HIGH);
    4ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed4:	6b 81       	ldd	r22, Y+3	; 0x03
    4ed6:	41 e0       	ldi	r20, 0x01	; 1
    4ed8:	0e 94 36 24 	call	0x486c	; 0x486c <DIO_u8_SetPinVal>
    4edc:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
    4ede:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ee0:	0f 90       	pop	r0
    4ee2:	0f 90       	pop	r0
    4ee4:	0f 90       	pop	r0
    4ee6:	cf 91       	pop	r28
    4ee8:	df 91       	pop	r29
    4eea:	08 95       	ret

00004eec <main>:
#include "3-APP/GarageSys/GARAGE_interface.h"



void main()
{
    4eec:	df 93       	push	r29
    4eee:	cf 93       	push	r28
    4ef0:	cd b7       	in	r28, 0x3d	; 61
    4ef2:	de b7       	in	r29, 0x3e	; 62
    4ef4:	67 97       	sbiw	r28, 0x17	; 23
    4ef6:	0f b6       	in	r0, 0x3f	; 63
    4ef8:	f8 94       	cli
    4efa:	de bf       	out	0x3e, r29	; 62
    4efc:	0f be       	out	0x3f, r0	; 63
    4efe:	cd bf       	out	0x3d, r28	; 61
	/*Initialize*/
	Port_voidInit();
    4f00:	0e 94 b9 22 	call	0x4572	; 0x4572 <Port_voidInit>
	ADC_voidInit();
    4f04:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <ADC_voidInit>
	GIE_voidEnableGlobal();
    4f08:	0e 94 23 20 	call	0x4046	; 0x4046 <GIE_voidEnableGlobal>

	CLCD_VoidInit();
    4f0c:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <CLCD_VoidInit>
//	LED_Config_t Local_LedGreen = {LED_ACTIVE_HIGH,DIO_PORTC,DIO_PIN1};

	GASY_CONFIG_t Local_GASY = {{ADC0_SINGLE_ENDED,5000ul,9u},
			{ADC7_SINGLE_ENDED,5000ul,9u},
			{LED_ACTIVE_HIGH,DIO_PORTC,DIO_PIN0},
			 {LED_ACTIVE_HIGH,DIO_PORTC,DIO_PIN1}};
    4f10:	ce 01       	movw	r24, r28
    4f12:	01 96       	adiw	r24, 0x01	; 1
    4f14:	9c 8b       	std	Y+20, r25	; 0x14
    4f16:	8b 8b       	std	Y+19, r24	; 0x13
    4f18:	eb eb       	ldi	r30, 0xBB	; 187
    4f1a:	f1 e0       	ldi	r31, 0x01	; 1
    4f1c:	fe 8b       	std	Y+22, r31	; 0x16
    4f1e:	ed 8b       	std	Y+21, r30	; 0x15
    4f20:	f2 e1       	ldi	r31, 0x12	; 18
    4f22:	ff 8b       	std	Y+23, r31	; 0x17
    4f24:	ed 89       	ldd	r30, Y+21	; 0x15
    4f26:	fe 89       	ldd	r31, Y+22	; 0x16
    4f28:	00 80       	ld	r0, Z
    4f2a:	8d 89       	ldd	r24, Y+21	; 0x15
    4f2c:	9e 89       	ldd	r25, Y+22	; 0x16
    4f2e:	01 96       	adiw	r24, 0x01	; 1
    4f30:	9e 8b       	std	Y+22, r25	; 0x16
    4f32:	8d 8b       	std	Y+21, r24	; 0x15
    4f34:	eb 89       	ldd	r30, Y+19	; 0x13
    4f36:	fc 89       	ldd	r31, Y+20	; 0x14
    4f38:	00 82       	st	Z, r0
    4f3a:	8b 89       	ldd	r24, Y+19	; 0x13
    4f3c:	9c 89       	ldd	r25, Y+20	; 0x14
    4f3e:	01 96       	adiw	r24, 0x01	; 1
    4f40:	9c 8b       	std	Y+20, r25	; 0x14
    4f42:	8b 8b       	std	Y+19, r24	; 0x13
    4f44:	9f 89       	ldd	r25, Y+23	; 0x17
    4f46:	91 50       	subi	r25, 0x01	; 1
    4f48:	9f 8b       	std	Y+23, r25	; 0x17
    4f4a:	ef 89       	ldd	r30, Y+23	; 0x17
    4f4c:	ee 23       	and	r30, r30
    4f4e:	51 f7       	brne	.-44     	; 0x4f24 <main+0x38>

	GASY_u8init(&Local_GASY);
    4f50:	ce 01       	movw	r24, r28
    4f52:	01 96       	adiw	r24, 0x01	; 1
    4f54:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GASY_u8init>
	GASY_voidMainLoop();
    4f58:	0e 94 8c 08 	call	0x1118	; 0x1118 <GASY_voidMainLoop>
//	while(1){}

}
    4f5c:	67 96       	adiw	r28, 0x17	; 23
    4f5e:	0f b6       	in	r0, 0x3f	; 63
    4f60:	f8 94       	cli
    4f62:	de bf       	out	0x3e, r29	; 62
    4f64:	0f be       	out	0x3f, r0	; 63
    4f66:	cd bf       	out	0x3d, r28	; 61
    4f68:	cf 91       	pop	r28
    4f6a:	df 91       	pop	r29
    4f6c:	08 95       	ret

00004f6e <__mulsi3>:
    4f6e:	62 9f       	mul	r22, r18
    4f70:	d0 01       	movw	r26, r0
    4f72:	73 9f       	mul	r23, r19
    4f74:	f0 01       	movw	r30, r0
    4f76:	82 9f       	mul	r24, r18
    4f78:	e0 0d       	add	r30, r0
    4f7a:	f1 1d       	adc	r31, r1
    4f7c:	64 9f       	mul	r22, r20
    4f7e:	e0 0d       	add	r30, r0
    4f80:	f1 1d       	adc	r31, r1
    4f82:	92 9f       	mul	r25, r18
    4f84:	f0 0d       	add	r31, r0
    4f86:	83 9f       	mul	r24, r19
    4f88:	f0 0d       	add	r31, r0
    4f8a:	74 9f       	mul	r23, r20
    4f8c:	f0 0d       	add	r31, r0
    4f8e:	65 9f       	mul	r22, r21
    4f90:	f0 0d       	add	r31, r0
    4f92:	99 27       	eor	r25, r25
    4f94:	72 9f       	mul	r23, r18
    4f96:	b0 0d       	add	r27, r0
    4f98:	e1 1d       	adc	r30, r1
    4f9a:	f9 1f       	adc	r31, r25
    4f9c:	63 9f       	mul	r22, r19
    4f9e:	b0 0d       	add	r27, r0
    4fa0:	e1 1d       	adc	r30, r1
    4fa2:	f9 1f       	adc	r31, r25
    4fa4:	bd 01       	movw	r22, r26
    4fa6:	cf 01       	movw	r24, r30
    4fa8:	11 24       	eor	r1, r1
    4faa:	08 95       	ret

00004fac <__udivmodhi4>:
    4fac:	aa 1b       	sub	r26, r26
    4fae:	bb 1b       	sub	r27, r27
    4fb0:	51 e1       	ldi	r21, 0x11	; 17
    4fb2:	07 c0       	rjmp	.+14     	; 0x4fc2 <__udivmodhi4_ep>

00004fb4 <__udivmodhi4_loop>:
    4fb4:	aa 1f       	adc	r26, r26
    4fb6:	bb 1f       	adc	r27, r27
    4fb8:	a6 17       	cp	r26, r22
    4fba:	b7 07       	cpc	r27, r23
    4fbc:	10 f0       	brcs	.+4      	; 0x4fc2 <__udivmodhi4_ep>
    4fbe:	a6 1b       	sub	r26, r22
    4fc0:	b7 0b       	sbc	r27, r23

00004fc2 <__udivmodhi4_ep>:
    4fc2:	88 1f       	adc	r24, r24
    4fc4:	99 1f       	adc	r25, r25
    4fc6:	5a 95       	dec	r21
    4fc8:	a9 f7       	brne	.-22     	; 0x4fb4 <__udivmodhi4_loop>
    4fca:	80 95       	com	r24
    4fcc:	90 95       	com	r25
    4fce:	bc 01       	movw	r22, r24
    4fd0:	cd 01       	movw	r24, r26
    4fd2:	08 95       	ret

00004fd4 <__udivmodsi4>:
    4fd4:	a1 e2       	ldi	r26, 0x21	; 33
    4fd6:	1a 2e       	mov	r1, r26
    4fd8:	aa 1b       	sub	r26, r26
    4fda:	bb 1b       	sub	r27, r27
    4fdc:	fd 01       	movw	r30, r26
    4fde:	0d c0       	rjmp	.+26     	; 0x4ffa <__udivmodsi4_ep>

00004fe0 <__udivmodsi4_loop>:
    4fe0:	aa 1f       	adc	r26, r26
    4fe2:	bb 1f       	adc	r27, r27
    4fe4:	ee 1f       	adc	r30, r30
    4fe6:	ff 1f       	adc	r31, r31
    4fe8:	a2 17       	cp	r26, r18
    4fea:	b3 07       	cpc	r27, r19
    4fec:	e4 07       	cpc	r30, r20
    4fee:	f5 07       	cpc	r31, r21
    4ff0:	20 f0       	brcs	.+8      	; 0x4ffa <__udivmodsi4_ep>
    4ff2:	a2 1b       	sub	r26, r18
    4ff4:	b3 0b       	sbc	r27, r19
    4ff6:	e4 0b       	sbc	r30, r20
    4ff8:	f5 0b       	sbc	r31, r21

00004ffa <__udivmodsi4_ep>:
    4ffa:	66 1f       	adc	r22, r22
    4ffc:	77 1f       	adc	r23, r23
    4ffe:	88 1f       	adc	r24, r24
    5000:	99 1f       	adc	r25, r25
    5002:	1a 94       	dec	r1
    5004:	69 f7       	brne	.-38     	; 0x4fe0 <__udivmodsi4_loop>
    5006:	60 95       	com	r22
    5008:	70 95       	com	r23
    500a:	80 95       	com	r24
    500c:	90 95       	com	r25
    500e:	9b 01       	movw	r18, r22
    5010:	ac 01       	movw	r20, r24
    5012:	bd 01       	movw	r22, r26
    5014:	cf 01       	movw	r24, r30
    5016:	08 95       	ret

00005018 <__divmodsi4>:
    5018:	97 fb       	bst	r25, 7
    501a:	09 2e       	mov	r0, r25
    501c:	05 26       	eor	r0, r21
    501e:	0e d0       	rcall	.+28     	; 0x503c <__divmodsi4_neg1>
    5020:	57 fd       	sbrc	r21, 7
    5022:	04 d0       	rcall	.+8      	; 0x502c <__divmodsi4_neg2>
    5024:	d7 df       	rcall	.-82     	; 0x4fd4 <__udivmodsi4>
    5026:	0a d0       	rcall	.+20     	; 0x503c <__divmodsi4_neg1>
    5028:	00 1c       	adc	r0, r0
    502a:	38 f4       	brcc	.+14     	; 0x503a <__divmodsi4_exit>

0000502c <__divmodsi4_neg2>:
    502c:	50 95       	com	r21
    502e:	40 95       	com	r20
    5030:	30 95       	com	r19
    5032:	21 95       	neg	r18
    5034:	3f 4f       	sbci	r19, 0xFF	; 255
    5036:	4f 4f       	sbci	r20, 0xFF	; 255
    5038:	5f 4f       	sbci	r21, 0xFF	; 255

0000503a <__divmodsi4_exit>:
    503a:	08 95       	ret

0000503c <__divmodsi4_neg1>:
    503c:	f6 f7       	brtc	.-4      	; 0x503a <__divmodsi4_exit>
    503e:	90 95       	com	r25
    5040:	80 95       	com	r24
    5042:	70 95       	com	r23
    5044:	61 95       	neg	r22
    5046:	7f 4f       	sbci	r23, 0xFF	; 255
    5048:	8f 4f       	sbci	r24, 0xFF	; 255
    504a:	9f 4f       	sbci	r25, 0xFF	; 255
    504c:	08 95       	ret

0000504e <__prologue_saves__>:
    504e:	2f 92       	push	r2
    5050:	3f 92       	push	r3
    5052:	4f 92       	push	r4
    5054:	5f 92       	push	r5
    5056:	6f 92       	push	r6
    5058:	7f 92       	push	r7
    505a:	8f 92       	push	r8
    505c:	9f 92       	push	r9
    505e:	af 92       	push	r10
    5060:	bf 92       	push	r11
    5062:	cf 92       	push	r12
    5064:	df 92       	push	r13
    5066:	ef 92       	push	r14
    5068:	ff 92       	push	r15
    506a:	0f 93       	push	r16
    506c:	1f 93       	push	r17
    506e:	cf 93       	push	r28
    5070:	df 93       	push	r29
    5072:	cd b7       	in	r28, 0x3d	; 61
    5074:	de b7       	in	r29, 0x3e	; 62
    5076:	ca 1b       	sub	r28, r26
    5078:	db 0b       	sbc	r29, r27
    507a:	0f b6       	in	r0, 0x3f	; 63
    507c:	f8 94       	cli
    507e:	de bf       	out	0x3e, r29	; 62
    5080:	0f be       	out	0x3f, r0	; 63
    5082:	cd bf       	out	0x3d, r28	; 61
    5084:	09 94       	ijmp

00005086 <__epilogue_restores__>:
    5086:	2a 88       	ldd	r2, Y+18	; 0x12
    5088:	39 88       	ldd	r3, Y+17	; 0x11
    508a:	48 88       	ldd	r4, Y+16	; 0x10
    508c:	5f 84       	ldd	r5, Y+15	; 0x0f
    508e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5090:	7d 84       	ldd	r7, Y+13	; 0x0d
    5092:	8c 84       	ldd	r8, Y+12	; 0x0c
    5094:	9b 84       	ldd	r9, Y+11	; 0x0b
    5096:	aa 84       	ldd	r10, Y+10	; 0x0a
    5098:	b9 84       	ldd	r11, Y+9	; 0x09
    509a:	c8 84       	ldd	r12, Y+8	; 0x08
    509c:	df 80       	ldd	r13, Y+7	; 0x07
    509e:	ee 80       	ldd	r14, Y+6	; 0x06
    50a0:	fd 80       	ldd	r15, Y+5	; 0x05
    50a2:	0c 81       	ldd	r16, Y+4	; 0x04
    50a4:	1b 81       	ldd	r17, Y+3	; 0x03
    50a6:	aa 81       	ldd	r26, Y+2	; 0x02
    50a8:	b9 81       	ldd	r27, Y+1	; 0x01
    50aa:	ce 0f       	add	r28, r30
    50ac:	d1 1d       	adc	r29, r1
    50ae:	0f b6       	in	r0, 0x3f	; 63
    50b0:	f8 94       	cli
    50b2:	de bf       	out	0x3e, r29	; 62
    50b4:	0f be       	out	0x3f, r0	; 63
    50b6:	cd bf       	out	0x3d, r28	; 61
    50b8:	ed 01       	movw	r28, r26
    50ba:	08 95       	ret

000050bc <_exit>:
    50bc:	f8 94       	cli

000050be <__stop_program>:
    50be:	ff cf       	rjmp	.-2      	; 0x50be <__stop_program>
